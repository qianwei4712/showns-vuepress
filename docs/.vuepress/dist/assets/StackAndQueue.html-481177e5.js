import{_ as n,o as s,c as a,f as t}from"./app-0869a5be.js";const e={},p=t(`<div class="catalog"><ul><li><a href="#t1">前言</a></li><li><a href="#t2">Stack</a></li><li><a href="#t3">Queue &amp; Deque</a></li><li><a href="#t4">ArrayDeque</a><ul><li><a href="#t41">构造方法</a></li><li><a href="#t42">ArrayDeque特点</a></li></ul></li><li><a href="#te">参考文章</a></li></ul></div><h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> <span id="t1">前言</span></h3><p>阅读 Java 版本为 <strong>1.8.0.25</strong>。</p><p><strong>栈（Stack）</strong> 和 <strong>队列（Queue）</strong> 应该是大家非常熟悉的数据结构了。</p><p>Java 中有 <strong>栈（Stack）</strong> 的具体类， <strong>队列（Queue）</strong> 只定义了接口，当然所有实现了这个接口的类都可以当作一个队列使用。</p><p>首先是最基本的定义：</p><blockquote><p>栈（stack ），一种遵循先进后出（FILO—First-In/Last-Out）原则的线性存储结构。</p><p>队列（queue），一种遵循先进先出（FIFO—first in first out）原则的线性存储结构。</p></blockquote><p>栈和队列的实现方式也是不止一种，主要有：顺序存储结构（数组底层）和链式存储结构（链表）。主要区别就是元素在实际物理空间的存放位置，<strong>也就是内存是否连续</strong>。</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/然而.jpg" alt="avatar"></p><blockquote><p><strong>栈（Stack）</strong> 这个类继承自 <strong>Vector</strong> ，底层用数组实现，是 JDK1.0 时代的产物，官方已经不推荐使用了。</p><p><strong>队列（Queue）</strong> 的话，JDK1.6 开始声明了 <strong>Deque（double ended queue ）双向队列接口</strong> ，<strong>双向队列同时具备栈和队列的功能。</strong></p></blockquote><p>所以现在选择在 java 中使用 <em>栈和队列</em> 的话，推荐选择实现了 <em>Deque</em> 的</p><ul><li><p><span style="color:red;">首选是 <strong>ArrayDeque</strong> ，其次是 <strong>LinkedList</strong> ，当然这两个都不是线程安全的。</span></p></li><li><p>对于线程安全的需求，JDK 提供了 <strong>BlockingQueue</strong> 阻塞队列以及双向队列，这也是一个非常重要的接口。（本文不介绍，重新开一篇。）</p></li></ul><p>然后，选择 <strong>ArrayDeque</strong> 的具体原因后面详细介绍。</p><p>学习方式为，将源码以及相关类拷贝至自定义包内，进行注释添加，代码请移步：<br><a href="https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/ArrayDeque.java" target="_blank">https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/ArrayDeque.java</a></p><p>其中包含了 <em>Stack、Queue、Deque、ArrayDeque</em> 类或接口的注释。</p><br><h3 id="stack" tabindex="-1"><a class="header-anchor" href="#stack" aria-hidden="true">#</a> <span id="t2">Stack</span></h3><p>刚刚已经提到，<strong>栈（Stack）</strong> 这个类继承自 <strong>Vector</strong> ，底层用数组实现。</p><p>可以参考本站 <strong>Java集合知识体系 - Vector 源码分析</strong> 。</p><p>因为 <strong>Vector</strong> 在方法上添加了 <strong>synchronized</strong> ，以达到线程安全的目的，不过 JVM 级别的 <strong>synchronized</strong> 特别消耗资源，已不被 Java 官方推荐使用。</p><p>所以继承自它的 Stack 更不可能被推荐使用。并且 Stack 代码很少，底层有兴趣转 Vector 源码解读吧，包括它的扩容，构造等。</p><p>Stack 的方法：</p><table><thead><tr><th style="text-align:center;">方法名</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">empty</td><td style="text-align:center;">boolean</td><td style="text-align:center;">判断是否为空</td></tr><tr><td style="text-align:center;">peek</td><td style="text-align:center;">E</td><td style="text-align:center;">只返回栈顶端的元素，不弹出该元素（空栈会抛出异常）</td></tr><tr><td style="text-align:center;">pop</td><td style="text-align:center;">E</td><td style="text-align:center;">弹出栈顶的元素</td></tr><tr><td style="text-align:center;">push</td><td style="text-align:center;">E</td><td style="text-align:center;">将元素压入栈，并返回</td></tr><tr><td style="text-align:center;">search</td><td style="text-align:center;">int</td><td style="text-align:center;">返回最靠近顶端的目标元素到顶端的距离（调用 lastIndexOf）</td></tr></tbody></table><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/StackAndQueue1.png" alt="StackAndQueue1"></p><br><h3 id="queue-deque" tabindex="-1"><a class="header-anchor" href="#queue-deque" aria-hidden="true">#</a> <span id="t3">Queue &amp; Deque</span></h3><p>java 中 <strong>Queue（单向队列）</strong> 是个接口，设计了队列基础方法，实际代码要看实现类。</p><p><strong>Deque（双向队列）</strong> 继承 <strong>Queue</strong> 在原有队列方法基础上，增加反向队列方法，也设计了栈的基础方法。</p><p>所以，我一般都是使用双向队列实现类的，毕竟有一个类能实现两个效果，多省事。。。。。</p><p>java中最常见的队列是 LinkedList ，底层用链表实现，顺便打个广告，有兴趣可以看看我以前写的 linkedList 的源码</p><p>可以参考本站 <strong>Java集合知识体系 - LinkedList 源码分析</strong> 。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/StackAndQueue2.png" alt="StackAndQueue2"></p><p>接口官方注释中，要求了一些抛出异常的情形，不是每个接口都有这四个约束，具体请自行查阅 JDK：</p><ul><li>若违反容量限制，抛出 IllegalStateException</li><li>若传入的类型和泛型不兼容，抛出 ClassCastException</li><li>如果指定元素为 null，并且这个队列不允许为 null，抛出 NullPointerException</li><li>若传入元素的某些属性阻止压入，那么抛出 IllegalArgumentException</li></ul><p><strong>Queue（单向队列）</strong> 基础方法：</p><table><thead><tr><th style="text-align:center;">功能</th><th style="text-align:center;">异常系列</th><th style="text-align:center;">增强系列</th></tr></thead><tbody><tr><td style="text-align:center;">添加</td><td style="text-align:center;">boolean add(E e)<br>队尾添加元素，超出抛出IllegalStateException</td><td style="text-align:center;">boolean offer(E e)<br>队尾添加元素，超出返回false</td></tr><tr><td style="text-align:center;">移除</td><td style="text-align:center;">E remove()<br>移除队头元素并返回，如果队列为空抛出NoSuchElementException</td><td style="text-align:center;">E poll()<br>移除队头元素并返回，如果队列为空返回null</td></tr><tr><td style="text-align:center;">获得</td><td style="text-align:center;">E element()<br>返回队头元素，但是不删除，如果队列为空抛出NoSuchElementException</td><td style="text-align:center;">E peek()<br>返回队头元素，但是不删除，如果队列为空返回null</td></tr></tbody></table><p>Queue的接口区别不难理解，虽然不知道为啥要分成两类。。。</p><br><p><strong>Deque（双向队列）</strong> 除了上面的方法外，还增加了栈的方法、collection方法（就不介绍了）和双向队列方法：</p><table><thead><tr><th style="text-align:center;">功能</th><th style="text-align:center;">正向方法（队头开始）</th><th style="text-align:center;">逆向方法（队尾开始）</th></tr></thead><tbody><tr><td style="text-align:center;">添加元素，超出抛出IllegalStateException</td><td style="text-align:center;">void addFirst(E e)</td><td style="text-align:center;">void addLast(E e)</td></tr><tr><td style="text-align:center;">添加元素，超出返回false</td><td style="text-align:center;">boolean offerFirst(E e)</td><td style="text-align:center;">boolean offerLast(E e)</td></tr><tr><td style="text-align:center;">移除元素并返回，如果队列为空抛出NoSuchElementException</td><td style="text-align:center;">E removeFirst()</td><td style="text-align:center;">E removeLast()</td></tr><tr><td style="text-align:center;">移除元素并返回，如果队列为空返回null</td><td style="text-align:center;">E pollFirst()</td><td style="text-align:center;">E pollLast()</td></tr><tr><td style="text-align:center;">获得元素，但是不删除，如果队列为空抛出NoSuchElementException</td><td style="text-align:center;">E getFirst()</td><td style="text-align:center;">E getLast()</td></tr><tr><td style="text-align:center;">返回元素，但是不删除，如果队列为空返回null</td><td style="text-align:center;">E peekFirst()</td><td style="text-align:center;">E peekLast()</td></tr><tr><td style="text-align:center;">删除第一个相同元素，依次检索</td><td style="text-align:center;">boolean removeFirstOccurrence(Object o)</td><td style="text-align:center;">boolean removeLastOccurrence(Object o)</td></tr></tbody></table><p>因为只是接口，也没有太多代码细节，下面通过 <strong>ArrayDeque</strong> 实际代码来讲解。</p><br><h3 id="arraydeque" tabindex="-1"><a class="header-anchor" href="#arraydeque" aria-hidden="true">#</a> <span id="t4">ArrayDeque</span></h3><p>JDK 1.8 官方注释第一段写了：</p><blockquote><p><strong>ArrayDeque当用作栈时，此类可能比 Stack 快，而用作队列时，则比 LinkedList 要快。</strong></p></blockquote><p>所以这个类就是这么好用。。。。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/StackAndQueue3.png" alt="StackAndQueue3"></p><p>从继承关系图，发现 ArrayDeque 没有实现 List 接口。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/StackAndQueue4.png" alt="StackAndQueue4"></p><h4 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> <span id="t41">构造方法</span></h4><p>arrayDeque 有三个字段</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//底层数组实现，容量就是队列长度</span>
    <span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">;</span>
    <span class="token comment">//队列头的索引</span>
    <span class="token keyword">transient</span> <span class="token keyword">int</span> head<span class="token punctuation">;</span>
    <span class="token comment">//将被添加的元素的位置索引，队列尾指针</span>
    <span class="token keyword">transient</span> <span class="token keyword">int</span> tail<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//无参构造默认长度 16</span>
    <span class="token keyword">public</span> <span class="token class-name">ArrayDeque</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//指定容量的构造器</span>
    <span class="token comment">//因为要求数组长度必须是 2的幂，所以需要对传入的长度进行计算</span>
    <span class="token keyword">public</span> <span class="token class-name">ArrayDeque</span><span class="token punctuation">(</span><span class="token keyword">int</span> numElements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">allocateElements</span><span class="token punctuation">(</span>numElements<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里主要的运算在 <code>allocateElements</code> 方法，位运算结果是确定的，虽然不知道为啥。。。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//如果传入参数大于等于8，计算比传入参数大的最小的 2的幂</span>
    <span class="token comment">//传入1，得到8；传入8，得到16；传入17，得到32</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">allocateElements</span><span class="token punctuation">(</span><span class="token keyword">int</span> numElements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//最小长度 8</span>
        <span class="token keyword">int</span> initialCapacity <span class="token operator">=</span> <span class="token constant">MIN_INITIAL_CAPACITY</span><span class="token punctuation">;</span>
        <span class="token comment">//如果传入的指定长度大于等于 8，计算数组大小</span>
        <span class="token comment">//算法利用或运算和右移运算，计算结果始终为2的n次方。。。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>numElements <span class="token operator">&gt;=</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            initialCapacity <span class="token operator">=</span> numElements<span class="token punctuation">;</span>
            initialCapacity <span class="token operator">|=</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;&gt;&gt;</span>  <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            initialCapacity <span class="token operator">|=</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;&gt;&gt;</span>  <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            initialCapacity <span class="token operator">|=</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;&gt;&gt;</span>  <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            initialCapacity <span class="token operator">|=</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;&gt;&gt;</span>  <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            initialCapacity <span class="token operator">|=</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            initialCapacity<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">//如果超出int最大长度2^31-1，需要缩短长度</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token comment">//缩小为 2^30</span>
                initialCapacity <span class="token operator">&gt;&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法乍一看是不是有点懵？</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/sad20200408181541.png" alt="avatar"></p><p>现在对方法中的几个右移距举例解释，假设初始值为二进制 <code>1XXX XXXX XXXX</code> ，</p><ol><li>第一次右移1位后用0补上空位，<code>01XX XXXX XXXX</code> ，然后进行 <strong>或运算</strong> 得 <code>11XX XXXX XXXX</code></li><li>第二次右移2位，<code>0011 XXXX XXXX</code> ，<strong>或运算</strong> 得 <code>1111 XXXX XXXX</code></li><li>第三次右移4位运算得 <code>1111 1111 XXXX</code></li><li>.........因为 <strong>initialCapacity</strong> 的类型是 <strong>int</strong> ，用二进制补码表示数值，最大值是 <code>2^31 - 1</code> 或者 <code>0x7fffffff</code> ，二进制表示为32位，所以最后一次右移16位后可以补满32位</li><li>然后 <strong>initialCapacity++</strong> ，从 <code>1111 1111 1111</code> 进位为 <code>1 0000 0000 0000</code> 变成 <code>2^12</code> 这样2的12次幂。。。</li><li>如果 <strong>initialCapacity++</strong> 前，已经是 <strong>int</strong> 最大值，那么实际值超出 <strong>int</strong> 最大值，变为 <strong>int</strong> 最小值 <code>-2^31</code> 或者 <code>0x80000000</code> 。因为小于0，所以右移一位变成 <code>2^30</code> 或者 <code>0x40000000</code> 。</li></ol><p><span style="color:red;"><strong>所以 ArrayDeque 最大初始化长度为 2^30 。</strong></span></p><p>有一句说一句，这种东西真的一点都不好玩，看懂了以后用不到，也写不出来。。。。只能来装装B。。。 。还是装的低级B</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/马云：我就这样静静得看着你装逼.jpeg" alt="avatar"></p><br><h4 id="arraydeque特点" tabindex="-1"><a class="header-anchor" href="#arraydeque特点" aria-hidden="true">#</a> <span id="t42">ArrayDeque特点</span></h4><p>具体的使用上，也就是符合 <em>栈和双向队列</em> 的特点，代码实现上和 ArrayList 没太大差别，不会过多得讲解。</p><p>这一部分会介绍下和其他 Collection 类不同的地方。</p><br><p><strong>一. ArrayDeque内部实现</strong></p><p>首先看下最基础的队列头添加元素 <strong>addFirst</strong> 和队列尾添加元素 <strong>addLast</strong> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//队列头部添加元素</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//不允许null</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//在头部插入数据，头指针向左移动，每次调用addFirst，head减一</span>
        elements<span class="token punctuation">[</span>head <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token comment">//如果队列头索引和将被添加的位置索引相同，进行扩容</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> tail<span class="token punctuation">)</span>
            <span class="token function">doubleCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//队列尾部添加元素</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//先将元素加入数组</span>
        elements<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token comment">//将tail加1，然后再判断是否和头指针索引相同，若相同则扩容</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>tail <span class="token operator">=</span> <span class="token punctuation">(</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> head<span class="token punctuation">)</span>
            <span class="token function">doubleCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有的添加元素方法都进行了 null 判断，不允许添加 null。。。</p><blockquote><p><span style="color:red;"><strong>ArrayDeque 是不允许添加 null 的</strong></span></p></blockquote><p>然后接着讲内部实现方式，先看看下面两个计算公式，它们的作用其实就是 <code>head减一</code> 和 <code>tail加一</code> 。</p><blockquote><p><strong>head = (head - 1) &amp; (elements.length - 1)</strong></p><p><strong>tail = (tail + 1) &amp; (elements.length - 1)</strong></p></blockquote><p>上面已经解释过 <strong>elements.length 必定是 2的幂</strong> 。所以 elements.length-1 的值就是 <code>... 0000 1111 .... 1111</code> 低位全是 1。</p><ol><li>head 初始值为 0，head - 1 = -1 ，就是 <code>0xffffffff</code> ，进行与计算结果 <code>elements.length-1</code> 的值。</li><li>然后 head 为正整数，减一后进行与计算还是本身。</li></ol><p>tail 和 head 相同，所以实际上这两个索引是相互靠近的</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/StackAndQueue5.png" alt="StackAndQueue5"></p><p>比如 <strong>addLast、addFirst</strong> 各调用2次就是上图这样的索引。</p><p>所以其实，<strong>ArrayDeque 相当于一个环形数组</strong> 。</p><br><p><strong>二. 双倍扩容的实现方式</strong></p><p>上面的添加方法中就有扩容方法 <strong>doubleCapacity()</strong> ，看名字就知道，这是一个双倍扩容。</p><p>而且这个方法的触发条件是： <strong>head == tail</strong> ，相当于数组填满的时候才进行扩容</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//双倍扩容，仅在数组填充满的时候扩容</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doubleCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//断言：数组已经填满了</span>
        <span class="token keyword">assert</span> head <span class="token operator">==</span> tail<span class="token punctuation">;</span>
        <span class="token comment">//记录队列头索引</span>
        <span class="token keyword">int</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token comment">//记录队列长度</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token comment">//队列头到数组结尾的元素个数，0---队列尾---null---队列头---数组尾</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> n <span class="token operator">-</span> p<span class="token punctuation">;</span>
        <span class="token comment">//左移1位相当于乘以2，双倍长度</span>
        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">//若超度超出int最大值，抛出异常，所以最大长度 2^30</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Sorry, deque too big&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//新建数组</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//将p开始往右的元素赋值到新数组</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> p<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将0到p（因为原数组已填满）的元素复制到新数组</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> r<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        elements <span class="token operator">=</span> a<span class="token punctuation">;</span>
        <span class="token comment">//重新定义新head和tail</span>
        head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        tail <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据扩容的实际情况可以得到：</p><blockquote><p><span style="color:red;"><strong>ArrayDeque 的最大长度为 2^30</strong> 。</span></p></blockquote><p>扩容前后的数组如下图：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/StackAndQueue6.png" alt="StackAndQueue6"></p><p><strong>若新数组又在队列头加元素，就和初始化数组相同，head 指向数组尾。</strong></p><br><h3 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="te">参考文章</span></h3><p><a href="https://www.pdai.tech/md/java/collection/java-collection-Queue&amp;Stack.html" target="_blank">https://www.pdai.tech/md/java/collection/java-collection-Queue&amp;Stack.html</a></p><p><a href="https://www.cnblogs.com/cosmos-wong/p/11845934.html" target="_blank">https://www.cnblogs.com/cosmos-wong/p/11845934.html</a></p><p><a href="https://blog.csdn.net/shida_csdn/article/details/81413052" target="_blank">https://blog.csdn.net/shida_csdn/article/details/81413052</a></p>`,96),o=[p];function l(c,i){return s(),a("div",null,o)}const u=n(e,[["render",l],["__file","StackAndQueue.html.vue"]]);export{u as default};
