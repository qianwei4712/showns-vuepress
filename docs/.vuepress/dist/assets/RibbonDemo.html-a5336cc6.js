import{_ as p,r as o,o as i,c,b as n,d as a,a as e,f as t}from"./app-c1e62972.js";const l={},u=t('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p><em>2021.10.23，spring cloud 以前只零碎用过几个组件，这次系统学一遍</em></p><p>环境：<code>SpringBoot 2.4.2</code> 、<code>SpringCloud 2020.0.1</code> 、<code>SpringCloud Alibaba 2021.1</code>、<code>JDK 8</code>、<code>MYSQL 5.7</code></p><p>这个系列只讲实现，基本不会深入原理。</p><hr>',5),r=n("strong",null,"代码仓库 ribbon-demo 分支",-1),d={href:"https://gitee.com/learning-use-cases/spring-cloud-demo/tree/ribbon-demo/",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>本文介绍 spring cloud 负载均衡工具 Ribbon ，提供客户端负载均衡算法和服务调用。Ribbon 提供了：连接超时、重试、负载均衡规则配置等一系列完善配置。</p><p>Ribbon 也半死不活，不更新了只维护，但还是要了解下。</p><br><h2 id="负载均衡差异" tabindex="-1"><a class="header-anchor" href="#负载均衡差异" aria-hidden="true">#</a> 负载均衡差异</h2><p>公司目前项目负载均衡仍然使用的是 nginx。两者的差别是：</p><ul><li>Nginx 是服务器负载均衡，所有请求都由 Nginx 转发实现。</li></ul><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211023010004866.png" alt="image-20211023010004866"></p><ul><li>Ribbon 是本地负载均衡，在调用服务的时候会从注册中心下载注册服务列表到JVM（消费者方的），从本地调用 RPC 实现。</li></ul><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211023005809138.png" alt="image-20211023005809138"></p><br><h2 id="ribbon-使用" tabindex="-1"><a class="header-anchor" href="#ribbon-使用" aria-hidden="true">#</a> Ribbon 使用</h2><p>一句话概括 Ribbon 其实就是： <strong>负载均衡 + RestTemplate</strong> ，它同时实现了负载均衡算法实现 和 服务调用。</p><p>客户端 POM 引入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Application 加上服务发现的注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableDiscoveryClient</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>加入 restTemplate 配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// 让这个RestTemplate在请求时拥有客户端负载均衡的能力</span>
    <span class="token annotation punctuation">@LoadBalanced</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>

 <span class="token doc-comment comment">/**
   * 从订单服务调用支付服务数据
   */</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;getPaymentFromOrderServer&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPaymentFromOrderServer</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> uri <span class="token operator">=</span> <span class="token string">&quot;http://payment-service&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;/payment/getById?id=&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>
    <span class="token comment">//调用支付服务</span>
    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span> responseEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token class-name">CodeEnum</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">&quot;查询成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>responseEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务注册情况：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211023100543467.png" alt="image-20211023100543467"></p><p>调用结果，轮询调用两个服务：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211023100713551.png" alt="image-20211023100713551"></p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211023100732140.png" alt="image-20211023100732140"></p><br><h2 id="负载均衡算法" tabindex="-1"><a class="header-anchor" href="#负载均衡算法" aria-hidden="true">#</a> 负载均衡算法</h2><p>需要自定义负载均衡算法、或者 Ribbon 其他配置，可以通过外部的属性<code>.ribbon.*</code>来配置一些Ribbon Client。</p><p>Spring Cloud Netflix为ribbon提供了如下的Beans(BeanType beanName: ClassName):</p><ul><li>IClientConfig ribbonClientConfig: DefaultClientConfigImpl</li><li>IRule ribbonRule: ZoneAvoidanceRule</li><li>IPing ribbonPing: NoOpPing</li><li>ServerList ribbonServerList: ConfigurationBasedServerList</li><li>ServerListFilter ribbonServerListFilter: ZonePreferenceServerListFilter</li><li>ILoadBalancer ribbonLoadBalancer: ZoneAwareLoadBalancer</li></ul><blockquote><p>警告：配置 不能被 @ComponentScan 在 main application context。</p><p>这样的话，它将被所有 @RibbonClients 共享。如果你使用 @ComponentScan (or @SpringBootApplication) ，你需要避免它被包括其中。(例如：放它到一个独立的，无重叠的包里，或者指明不被@ComponentScan扫描)。</p></blockquote><p><strong>简单来说，就是别放在 Application 所在的包下面。</strong></p><hr><p>Ribbon 的算法策略有以下几种，不过 Ribbon已经不更新了，而且 OpenFegin 也默认实现了，到时候再说。这里就不测试了。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211023120833720.png" alt="image-20211023120833720"></p><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,37),m={href:"https://www.bilibili.com/video/BV18E411x7eT?p=36",target:"_blank",rel:"noopener noreferrer"},g={href:"http://docs.springcloud.cn/user-guide/ribbon/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.jianshu.com/p/1bd66db5dc46",target:"_blank",rel:"noopener noreferrer"};function v(h,f){const s=o("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[r,a(" ："),n("a",d,[a("Learning Use Cases/Spring Cloud Demo - Gitee.com"),e(s)])]),k,n("p",null,[n("a",m,[a("尚硅谷SpringCloud框架开发教程(SpringCloudAlibaba微服务分布式架构丨Spring Cloud)_哔哩哔哩_bilibili"),e(s)])]),n("p",null,[n("a",g,[a("Spring Cloud ribbon - Spring Cloud中国社区"),e(s)])]),n("p",null,[n("a",b,[a("Ribbon详解 - 简书 (jianshu.com)"),e(s)])])])}const C=p(l,[["render",v],["__file","RibbonDemo.html.vue"]]);export{C as default};
