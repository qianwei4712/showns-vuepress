import{_ as n,o as a,c as s,f as t}from"./app-c1e62972.js";const e={},o=t(`<div class="catalog"><ul><li><a href="#t0">Bean 概念</a></li><li><a href="#t1">元数据 BeanDefinition</a></li><li><a href="#t2">IoC 容器创建 Bean</a><ul><li><a href="#t21">XML 配置文件方式</a></li><li><a href="#t22">注解配置方式</a></li><li><a href="#t23">Java 类配置方式</a></li></ul></li><li><a href="#t3">Bean 注入方式</a><ul><li><a href="#t31">注解注入</a></li><li><a href="#t32">Bean 自动装配</a></li></ul></li><li><a href="#t4">参考文章</a></li></ul></div><h2 id="bean-概念" tabindex="-1"><a class="header-anchor" href="#bean-概念" aria-hidden="true">#</a> <span id="t0">Bean 概念</span></h2><blockquote><p>Spring Framework 阅读版本为 5.2.x</p></blockquote><p><strong>由 IoC 容器管理的那些组成你应用程序的对象我们就叫它 Bean。</strong></p><p>其实意思就是，每个我们加上注解交给 Spring 的类，都叫做 Bean。</p><p>Bean 由 Spring容器初始化、装配及管理的对象，除此之外，bean 就与应用程序中的其他对象没有什么区别了。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/BeanConfigoure0.png" alt="BeanConfigoure0"></p><br><h2 id="元数据-beandefinition" tabindex="-1"><a class="header-anchor" href="#元数据-beandefinition" aria-hidden="true">#</a> <span id="t1">元数据 BeanDefinition</span></h2><p><strong>Bean 是由用容器提供的配置元数据 BeanDefinition 创建的。</strong></p><p>BeanDefinition 继承了 <code>BeanMetadataElement</code> 和 <code>AttributeAccessor</code> 接口，对于他们的作用嘛，我也是看别人说的，就贴一下过去略过：</p><ul><li><code>BeanMetadataElement</code> ：bean 元数据，读取配置资源的能力。</li><li><code>AttributeAccessor</code> ：Spring 定义的属性访问器，对 Bean 的属性进行操作的 API；例如设置属性、获取属性、判断是否存在该属性，返回 bean 所有的属性名称等。</li></ul><p>对于 IoC 容器而言，它需要完全掌握 bean ，首先需要了解：</p><ul><li>如何创建一个 bean</li><li>bean 的生命周期的详细信息</li><li>bean 的依赖关系</li></ul><p>而这些具体的信息，都由元数据来定义。</p><p><strong>BeanDefinition</strong> 只是一个接口，实际产生作用的实现类有很多，比如下面的继承关系图：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/BeanConfigoure1.png" alt="BeanConfigoure1"></p><p>首先，先介绍下 <strong>BeanDefinition</strong> ，源码是看不懂的，这辈子都不可能了；只能大致介绍下它的功能，这个接口的设计包含了一个 Bean 最基础的特征，<strong>AbstractBeanDefinition</strong> 包含以下字段，以下列了一些个人认为重要的；</p><p>具体可以参考：<a href="https://www.cnblogs.com/warehouse/p/9380375.html" target="_blank">https://www.cnblogs.com/warehouse/p/9380375.html</a></p><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">beanClass</td><td style="text-align:center;">这个属性是强制性的，并且指定用来创建 bean 的 bean 类。</td></tr><tr><td style="text-align:center;">name</td><td style="text-align:center;">类名，这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，你可以使用 ID 和/或 name 属性来指定 bean 标识符。</td></tr><tr><td style="text-align:center;">scope</td><td style="text-align:center;">这个属性指定由特定的 bean 定义创建的对象的作用域</td></tr><tr><td style="text-align:center;">lazyInit</td><td style="text-align:center;">是否延迟加载，对应 bean 属性lazy-init;<br>延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。</td></tr><tr><td style="text-align:center;">autowiring mode</td><td style="text-align:center;">自动注入模式，它是用来注入依赖关系的</td></tr><tr><td style="text-align:center;">dependsOn</td><td style="text-align:center;">用来表示一个 bean 的实例化依赖另一个 bean 先实例化，对应 bean 属性 depend-on</td></tr><tr><td style="text-align:center;">primary</td><td style="text-align:center;">自动装配时出现多个bean候选者时，将作为首选者，对应bean属性primary</td></tr><tr><td style="text-align:center;">constructorArgumentValues</td><td style="text-align:center;">记录构造函数注入属性，对应bean属性constructor-arg</td></tr><tr><td style="text-align:center;">propertyValues</td><td style="text-align:center;">普通属性集合</td></tr><tr><td style="text-align:center;">initMethodName</td><td style="text-align:center;">初始化方法，对应 bean 属性 init-method</td></tr><tr><td style="text-align:center;">destroyMethodName</td><td style="text-align:center;">销毁方法，对应bean属性destroy-method</td></tr></tbody></table><p><strong>所以只需要拿到 BeanDefinition， Spring IoC 容器就可以根据这些信息反射创建对象。</strong></p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/BeanConfigoure2.png" alt="BeanConfigoure2"></p><p>然后它的几个实现类分别具有不同的分工：</p><ol><li><strong>AbstractBeanDefinition</strong> ：它是基础抽象类，实现了 <strong>BeanDefinition</strong> 的基本功能，使得其他实现类不需要从头实现</li><li><strong>GenericBeanDefinition</strong> ：通用的bean实现，自2.5以后新加入的bean文件配置属性定义类，是<code>ChildBeanDefinition</code> 和 <code>RootBeanDefinition</code> 更好的替代者</li><li><strong>ScannedGenericBeanDefinition</strong> : 被包扫描到的 bean 定义，<code>@Component</code> 注解生成</li><li><strong>AnnotatedGenericBeanDefinition</strong> ： 查找类注解初始化的定义，<code>@Configuration</code> 注解生成</li><li><strong>RootBeanDefinition</strong> ：代表一个从配置源（ <code>XML</code> ，<code>Java Config</code> 等）中生成的 <code>BeanDefinition</code></li><li><strong>ChildBeanDefinition</strong> ：可以从父 <code>BeanDefinition</code> 中集成构造方法，属性等</li></ol><p>它们发挥作用的位置是在 IoC 容器中，使用 Map 存储 Bean 时，例如 <code>DefaultListableBeanFactory</code> ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/** bean 的名字为键，BeanDefinition为值，初始容量为256 */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">&gt;</span></span> beanDefinitionMap <span class="token operator">=</span> 
        <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>至于更详细的工作原理，以后有兴趣了再去研究，先往下学重要的。这里简单提几个关键词：</p><ol><li><strong>BeanDefinitionRegistryPostProcessor</strong> 接口</li><li><strong>DefaultListableBeanFactory</strong></li><li><strong>PostProcessorRegistrationDelegate</strong> 类的 <strong>invokeBeanFactoryPostProcessors</strong> 方法</li></ol></blockquote><br><h2 id="ioc-容器创建-bean" tabindex="-1"><a class="header-anchor" href="#ioc-容器创建-bean" aria-hidden="true">#</a> <span id="t2">IoC 容器创建 Bean</span></h2><p>上面图片中已经画出来了，Bean 配置信息的三种方式：</p><ul><li>XML 配置文件方式</li><li>注解配置方式</li><li>Java 类配置方式</li></ul><p>下面来主要讲这三个方式。</p><br><h3 id="xml-配置文件方式" tabindex="-1"><a class="header-anchor" href="#xml-配置文件方式" aria-hidden="true">#</a> <span id="t21">XML 配置文件方式</span></h3><p>XML 配置方式现在已经不推荐使用了，不过可能一些老项目维护还需要，把使用方式介绍下。</p><p><strong>在 Spring 配置文件中，使用 bean 标签，标签里添加对应属性，就可以实现对象创建。</strong></p><p>bean 中有很多属性，基本都是和上面 <strong>AbstractBeanDefinition</strong> 列的对应，稍微列几个常用的：</p><ul><li><strong>id</strong> ：唯一标识，<code>ApplicationContext.getBean</code> 获取时的 bean 参数</li><li><strong>class</strong> ：创建对象类的全路径</li><li><strong>name</strong> ：名称属性，和 id 属性类似，不过 id 不能加特殊符号，name 可以；比较早期的属性，基本没人用了</li><li><strong>property</strong> ：属性参数注入，name 中加属性名</li><li><strong>scope</strong> ：作用域，常用的有两种：singleton 表示单例，prototype 表示多实例，默认为单例 singleton 。用的比较少的，并且只支付 WebApplicationContext 环境的： <code>request</code> （每次HTTP请求都会创建一个新的Bean）、<code>session</code> （同一个HTTP Session共享一个Bean，不同Session使用不同的Bean）、<code>global-session</code> （一般用于Portlet应用环境）</li></ul><p>下面继续。。。。</p><br><ol><li>在绝大部分情况下，我们使用最基本的配置就可以满足需求，如下：</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.shiva.demo1.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>这个方式使用的是无参构造器进行 Bean 的实例化，如果该类不存在无参构造器，则会发生异常。</strong></p><p>然后是有参构造的话，假设有个 <code>String s</code> 参数，一定要先创建构造方法：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 构造器方式 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.shiva.demo1.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>s<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bean property s属性<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就是通过 set 方式注入：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 属性注入方式 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.shiva.demo1.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>s<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bean property s属性<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><ol start="2"><li>使用工厂模式配合 XML 配置</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserFactory</span> <span class="token punctuation">{</span>
　　    <span class="token comment">// 静态方法，返回User对象</span>
　　    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 　　       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
　　    <span class="token punctuation">}</span>
　　<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 xml 配置文件 bean 属性：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.shiva.demo1.UserFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getUser<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后注入的其他类型，外联对象、数组、Map、List 什么的都差不多。</p><br><h3 id="注解配置方式" tabindex="-1"><a class="header-anchor" href="#注解配置方式" aria-hidden="true">#</a> <span id="t22">注解配置方式</span></h3><p>注解配置可以简化 xml 配置。</p><p>Spring 针对 Bean 创建对象提供了以下几种注解：</p><ul><li><strong>@Component</strong> ：表示是一个普通的 Bean 组件</li><li><strong>@Service</strong> ：作用于业务逻辑层</li><li><strong>@Controller</strong> ：作用于控制层，spring-mvc 的注解，进行前端请求的处理，转发，重定向</li><li><strong>@Repository</strong> ：作用于持久层，作为DAO对象（数据访问对象，Data Access Objects），这些类可以直接对数据库进行操作</li></ul><p>四个注解都用来创建 Bean 实例，<code>Component</code> 是基础注解，其他三个都是继承自它，然后再扩展功能。</p><br><h3 id="java-类配置方式" tabindex="-1"><a class="header-anchor" href="#java-类配置方式" aria-hidden="true">#</a> <span id="t23">Java 类配置方式</span></h3><p>最后就是使用 <strong>@Configuration</strong> 的 Java 配置方式了，</p><p>通过 @Configuration 注解来表明该类是一个 Spring 的配置;</p><p>其实就是一个简化的 xml 配置文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;cn.shiva.demo3&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过@Bean注解来表明是一个Bean对象，相当于xml中的&lt;bean&gt;</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDAO</span> <span class="token function">getUserDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接new对象做演示</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="bean-注入方式" tabindex="-1"><a class="header-anchor" href="#bean-注入方式" aria-hidden="true">#</a> <span id="t3">Bean 注入方式</span></h2><p>Bean 注入方式其实和创建方式类似。</p><p>XML 注入方式也有构造函数注入、setter 方法注入、工厂注入；这些就不讲了，现在 SpringBoot 已经没见过这种玩意儿了。</p><br><h3 id="注解注入" tabindex="-1"><a class="header-anchor" href="#注解注入" aria-hidden="true">#</a> <span id="t31">注解注入</span></h3><p>这几种注解，我估计所有人都已经熟得不能再熟了：</p><ul><li><strong>@AutoWired</strong> ：根据属性的类型 <code>byType</code> 自动注入，基础用法；</li><li><strong>@Qualifier</strong> ：根据属性的名称 <code>byName</code> 自动注入；</li></ul><p>使用这个注解的时候，需要和 <code>AutoWired</code> 一起使用。</p><p>如果一个 <code>UserService</code> ，存在两个实现类 <code>UserServiceImpl1</code> 和 <code>UserServiceImpl2</code> ，就需要根据名称来进行选择注入;</p><p>使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoWired</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userServiceImpl2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>@Resource</strong> ：可以根据类型注入，也可以根据名称注入；默认使用属性的名称</li></ul><p><code>Resource</code> 是 Javax 的注解，Spring 官方肯定建议我们使用它自己的注解，但是功能是可以实现的；用法相同。</p><ul><li><strong>@Value</strong> ：注入普通类型属性，我个人用得比较多的是在 SpringBoot 中读取配置文件的自定义配置</li></ul><br><h3 id="bean-自动装配" tabindex="-1"><a class="header-anchor" href="#bean-自动装配" aria-hidden="true">#</a> <span id="t32">Bean 自动装配</span></h3><p>Spring 提供了四种自动装配的类型，在接口 <code>AutowireCapableBeanFactory</code> 进行了列举：</p><ul><li>no： 显式指明不使用 Spring 的自动装配功能</li><li>byName：根据属性和组件的名称匹配关系来实现bean的自动装配</li><li>byType：根据属性和组件的类型匹配关系来实现bean的自动装配，有多个适合类型的对象时装配失败</li><li>constructor：与 byType 类似是根据类型进行自动装配，但是要求待装配的 bean 有相应的构造函数</li></ul><p>一般来说，我们接触到的就 <code>byName</code> 根据属性的名称 和 <code>byType</code> 根据属性的类型两种装配方式。</p><p>自动装配的原理以后再讲，Spring 的源码实在是。。。看不懂。</p><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="t4">参考文章</span></h2><p><a target="_blank" href="https://blog.csdn.net/prestigeding/article/details/80490206">https://blog.csdn.net/prestigeding/article/details/80490206</a></p><p><a target="_blank" href="https://www.cnblogs.com/warehouse/p/9380375.html">https://www.cnblogs.com/warehouse/p/9380375.html</a></p><p><a target="_blank" href="https://www.jianshu.com/p/bcad005b6d8a">https://www.jianshu.com/p/bcad005b6d8a</a></p><p><a target="_blank" href="https://baijiahao.baidu.com/s?id=1641004110489963465">https://baijiahao.baidu.com/s?id=1641004110489963465</a></p><p><a target="_blank" href="https://www.cnblogs.com/xb1223/p/10154895.html">https://www.cnblogs.com/xb1223/p/10154895.html</a></p><p><a target="_blank" href="http://www.cicoding.cn/spring/whats-the-difference-between-component-repository-service-controller-annotations-in/">http://www.cicoding.cn/spring/whats-the-difference-between-component-repository-service-controller-annotations-in/</a></p><p><a target="_blank" href="https://www.cnblogs.com/linjiqin/p/9655649.html">https://www.cnblogs.com/linjiqin/p/9655649.html</a></p><p><a target="_blank" href="https://blog.csdn.net/zhuchencn/article/details/103823867">https://blog.csdn.net/zhuchencn/article/details/103823867</a></p><p><a target="_blank" href="https://blog.csdn.net/qq_20398345/article/details/82767896">https://blog.csdn.net/qq_20398345/article/details/82767896</a></p><p><a target="_blank" href="https://blog.csdn.net/a909301740/article/details/78379720">https://blog.csdn.net/a909301740/article/details/78379720</a></p><p><a target="_blank" href="https://www.jianshu.com/p/2f1c9fad1d2d">https://www.jianshu.com/p/2f1c9fad1d2d</a></p>`,99),p=[o];function i(l,c){return a(),s("div",null,p)}const u=n(e,[["render",i],["__file","BeanConfigoure.html.vue"]]);export{u as default};
