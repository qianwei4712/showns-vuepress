import{_ as n,o as a,c as s,f as e}from"./app-c14a8d33.js";const p={},t=e(`<div class="catalog"><ul><li><a href="#t1">Nginx负载均衡配置</a></li><li><a href="#t2">Nginx负载均衡算法</a><ul><li><a href="#t21">轮询法（默认）</a></li><li><a href="#t22">加权轮询法</a></li><li><a href="#t23">ip-hash</a></li><li><a href="#t24">其他算法使用方式</a></li></ul></li><li><a href="#t3">Nginx+keepalived双机部署</a></li><li><a href="#t4">Nginx负载均衡使用说明</a></li><li><a href="#te">参考文章</a></li></ul></div><blockquote><p>负载均衡的解释：将请求分摊到多个操作单元上进行执行。就是我们需要一个调度者，保证所有后端服务器都将性能充分发挥，从而保持服务器集群的整体性能最优，这就是负载均衡。</p></blockquote><h3 id="nginx负载均衡配置" tabindex="-1"><a class="header-anchor" href="#nginx负载均衡配置" aria-hidden="true">#</a> <span id="t1">Nginx负载均衡配置</span></h3><p><code>nginx</code> 中的 <code>upstream模块</code> 是来实现 <code>nginx</code> 跨越单机的限制，完成网络数据的接收、处理和转发。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># 定义负载均衡设备的 <span class="token class-name">Ip</span>及设备状态 
upstream app <span class="token punctuation">{</span>
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57800</span> down<span class="token punctuation">;</span>
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57700</span> weight<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57600</span><span class="token punctuation">;</span>
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57500</span> backup<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>upstream server参数解释如下：</p><ul><li><strong>down</strong>：表示当前的 server 暂时不参与负载。</li><li><strong>weight</strong>：默认为 1 weight （范围0-100）越大，负载的权重就越大。</li><li><strong>max_fails</strong>：允许请求失败的次数默认为 1 当超过最大次数时，返回 proxy_next_upstream 模块定义的错误。</li><li><strong>fail_timeout</strong>: max_fails 次失败后，暂停的时间。例如：<code>server 127.0.0.1:57600 max_fails=3 fail_timeout=30s</code> 。</li><li><strong>backup</strong>：其它所有的非 backup 机器 down 或者忙的时候，请求 backup 机器,作为备用机。</li></ul><br><h3 id="nginx负载均衡算法" tabindex="-1"><a class="header-anchor" href="#nginx负载均衡算法" aria-hidden="true">#</a> <span id="t2">Nginx负载均衡算法</span></h3><p>首先介绍nginx支持的主要策略</p><ul><li><p><strong>轮询法（默认）</strong>：将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载。</p></li><li><p><strong>加权轮询法</strong>：不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。给配置高、负载低的机器配置更高的权重，让其处理更多的请；而配置低、负载高的机器，给其分配较低的权重，降低其系统负载，加权轮询能很好地处理这一问题，并将请求顺序且按照权重分配到后端。</p></li><li><p><strong>ip-hash</strong>：根据获取客户端的IP地址，通过哈希函数计算得到一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是客服端要访问服务器的序号。采用源地址哈希法进行负载均衡，同一IP地址的客户端，当后端服务器列表不变时，它每次都会映射到同一台后端服务器进行访问。</p></li><li><p><strong>最小连接数法</strong>：由于后端服务器的配置不尽相同，对于请求的处理有快有慢，最小连接数法根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器。</p></li><li><p><strong>fair（第三方）</strong>：按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p></li><li><p><strong>consistent_hash &amp; url_hash（第三方）</strong>：按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</p></li></ul><h4 id="轮询法-默认" tabindex="-1"><a class="header-anchor" href="#轮询法-默认" aria-hidden="true">#</a> <span id="t21">轮询法（默认）</span></h4><p>这是nginx默认的方法，不需要额外配置，直接加两个server就可以。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>upstream app <span class="token punctuation">{</span>
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57800</span><span class="token punctuation">;</span>
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57700</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为轮询法分派太过简单粗暴，若具体应用没有设计统一的文件服务、权限、缓存体系，那么在具体使用中将存在较大问题。</p><h4 id="加权轮询法" tabindex="-1"><a class="header-anchor" href="#加权轮询法" aria-hidden="true">#</a> <span id="t22">加权轮询法</span></h4><p>与轮询法相同，只不过为分发对象加上权重，控制比率。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>upstream app <span class="token punctuation">{</span>
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57800</span> weight<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57700</span> weight<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ip-hash" tabindex="-1"><a class="header-anchor" href="#ip-hash" aria-hidden="true">#</a> <span id="t23">ip-hash</span></h4><p>此算法会根据 IP 的 hash 值，将请求分配到固定的一个后台服务器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>upstream app <span class="token punctuation">{</span>
    ip_hash<span class="token punctuation">;</span> 
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57800</span><span class="token punctuation">;</span>
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57700</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此算法可以解决用户session问题。</p><p>但是 ip-hash 也存在缺陷，如下：</p><ol><li><p>nginx不是最前端的服务器。ip_hash要求nginx一定是最前端的服务器，否则nginx得不到正确ip，就不能根据ip作hash。 比如使用的是squid为最前端，那么nginx取ip时只能得到squid的服务器ip地址，用这个地址来作分流是肯定错乱的。</p></li><li><p>nginx的后端还有其它方式的负载均衡。假如nginx后端又有其它负载均衡，将请求又通过另外的方式分流了，那么某个客户端的请求肯定不能定位到同一台session应用服务器上。 这么算起来，nginx后端只能直接指向应用服务器，或者再搭一个squid，然后指向应用服务器。最好的办法是用location作一次分流，将需要session的部分请求通过ip_hash分流，剩下的走其它后端去。</p></li></ol><blockquote><p>使用 ip-hash 模式，若其中一个服务挂了，nginx 不会将其标定为 down ,还会继续往这个服务分发请求。</p><p>一般的方式装载插件进行检测，例如 heath check。</p></blockquote><h4 id="其他算法使用方式" tabindex="-1"><a class="header-anchor" href="#其他算法使用方式" aria-hidden="true">#</a> <span id="t24">其他算法使用方式</span></h4><p><strong>最小连接数法</strong></p><p>Web请求会被转发到连接数最少的服务器上，可以被使用在连接较长的情况下。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>upstream app <span class="token punctuation">{</span>
    least_conn<span class="token punctuation">;</span> 
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57800</span><span class="token punctuation">;</span>
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57700</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>fair策略</strong></p><p>第三方策略需要安装额外依赖模块 <code>nginx-upstream-fair-master</code></p><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>upstream app <span class="token punctuation">{</span>
    fair<span class="token punctuation">;</span> 
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57800</span><span class="token punctuation">;</span>
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57700</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>consistent_hash &amp; url_hash策略</strong></p><p>第三方策略需要安装额外依赖模块 <code>ngx_http_consistent_hash-master</code></p><p>按访问url的hash结果来分配请求</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>upstream app <span class="token punctuation">{</span>
    hash $request_uri<span class="token punctuation">;</span>
    hash_method crc32<span class="token punctuation">;</span>
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57800</span><span class="token punctuation">;</span>
    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">57700</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="nginx-keepalived双机主从模式、互为主从模式" tabindex="-1"><a class="header-anchor" href="#nginx-keepalived双机主从模式、互为主从模式" aria-hidden="true">#</a> <span id="t3">Nginx+keepalived双机主从模式、互为主从模式</span></h3><p>搞IT的应该都懂，只有一台 nginx 服务意味这高风险，实现 nginx 高可用的方案之一，就是使用 <strong>nginx + keepalived</strong> 模式。</p><p><strong>nginx + keepalived</strong> 分为主从模式以及互为主从模式。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/NginxLoadBalancing1.png" alt="NginxLoadBalancing1"></p><p><strong>环境基础：</strong></p><ul><li>使用 <code>docker</code> 创建了2个容器，两个容器分别安装了 <code>nginx</code> ， 我的安装步骤请参考 <strong>服务器 - 常用软件安装</strong>。</li><li>简单为方便使用，只在一台 docker 容器中安装了 jdk，并启动2个服务。</li><li>测试直接用 <code>curl</code> 命令进行。</li></ul><ol><li>安装keepalived</li></ol><p>因为 nginx 用的比较多，都是按以前的流程装上的，现在还需要安装 keepalived 服务，主从两个节点都需要安装，操作如下：</p><blockquote><p>TODO keepalived死活装不上，以后再弄，先搞别的去了。。。MMP</p></blockquote><br><h3 id="nginx负载均衡使用说明" tabindex="-1"><a class="header-anchor" href="#nginx负载均衡使用说明" aria-hidden="true">#</a> <span id="t4">Nginx负载均衡使用说明</span></h3><blockquote><p>nginx的所有负载均衡策略，实际上只是对 <strong>HTTP请求进行重定向</strong> ，在将请求分配到后台服务器后，无法检测到实际服务器压力。</p></blockquote><p>例如：A请求需要进行10次计算，B请求需要进行100万次计算，而对于nginx而言，它们都只属于一次请求。</p><blockquote><p>因此，使用nginx进行服务器调度，无法真正意义上实现负载均衡，只不过把请求次数进行了合理分配，一点程度上使用集群缓解单个应用的压力，从而达到更高的并发总量。</p></blockquote><br><h3 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="te">参考文章</span></h3><p><a href="https://blog.csdn.net/gu_wen_jie/article/details/82149003" target="_blank">https://blog.csdn.net/gu_wen_jie/article/details/82149003</a></p><p><a href="https://blog.csdn.net/qq_44758028/article/details/96486609" target="_blank">https://blog.csdn.net/qq_44758028/article/details/96486609</a></p><p><a href="https://blog.csdn.net/qq_28602957/article/details/61615876" target="_blank">https://blog.csdn.net/qq_28602957/article/details/61615876</a></p><p><a href="https://blog.csdn.net/qq_37936542/article/details/82800605" target="_blank">https://blog.csdn.net/qq_37936542/article/details/82800605</a></p><p><a href="https://blog.csdn.net/ycc297876771/article/details/83240561" target="_blank">https://blog.csdn.net/ycc297876771/article/details/83240561</a></p><p><a href="https://www.cnblogs.com/chimeiwangliang/p/7768438.html" target="_blank">https://www.cnblogs.com/chimeiwangliang/p/7768438.html</a></p><p><a href="https://blog.csdn.net/l1028386804/article/details/80098334" target="_blank">https://blog.csdn.net/l1028386804/article/details/80098334</a></p>`,61),i=[t];function l(r,o){return a(),s("div",null,i)}const u=n(p,[["render",l],["__file","NginxLoadBalancing.html.vue"]]);export{u as default};
