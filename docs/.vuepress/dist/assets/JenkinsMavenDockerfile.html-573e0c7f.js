import{_ as o,r as l,o as i,c as p,b as n,d as s,a as e,f as t}from"./app-7e2007b0.js";const r={},c=t(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>想着在公司弄一套自动部署测试流程，jenkins + gitee 自动 build 已经测试成功了。</p><p>下一步就是 docker + maven + jenkins + git 打包发布了。</p><br><h2 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile" aria-hidden="true">#</a> dockerfile</h2><p>dockerfile 可以根据命令定制镜像，用来构建 docker 容器。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><p><strong>注意：dockerfile 命令都必须用大写</strong></p><ul><li><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</li><li><strong>MAINTAINER</strong>：维护者，国际惯例：姓名+邮箱。</li><li><strong>ADD/COPY</strong>：两者相似、官方推荐 COPY，将文件复制到容器中。不过 <strong>ADD 会自动解压</strong>，也蛮不错。</li><li><strong>RUN</strong>：用于执行后面跟着的命令行命令。RUN是构件容器时就运行的命令以及提交运行结果。</li><li><strong>VOLUME</strong>：定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。避免数据丢失、避免容器膨胀。</li><li><strong>EXPOSE</strong>：声明端口。① 帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。② 在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li><li><strong>ENV</strong>：设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</li><li><strong>WORKDIR</strong>：指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。<span style="color:Red;">只有通过 WORKDIR 创建的目录才会一直存在</span>。</li><li><strong>CMD</strong>：CMD是容器启动时执行的命令，在构件时并不运行，构件时紧紧指定了这个命令到底是个什么样子。<strong><span style="color:Red;">如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效</span></strong></li><li><strong>ENTRYPOINT</strong> ：类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</li></ul><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token comment"># 基础镜像，在此基础上开始构建</span>
<span class="token keyword">FROM</span> centos

<span class="token comment"># 维护者信息</span>
MAINTAINER shiva

<span class="token comment"># 将jar包复制到容器指定目录下</span>
<span class="token function">COPY</span> <span class="token operator">/</span>opt/shiva-test<span class="token punctuation">.</span>jar <span class="token operator">/</span>opt/
ADD <span class="token operator">/</span>usr/local/java/jdk-8u261-linux-x64<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">/</span>opt/

<span class="token comment"># 运行命令</span>
RUN yum install wget
RUN tar <span class="token operator">-</span>xzvf redis<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz

<span class="token comment"># 虚拟映射，用于持久化存储数据。和挂载 -v 一样。映射地址可以通过 docker inspect ID 查看</span>
VOLUME <span class="token punctuation">[</span><span class="token string">&quot;/data&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/var&quot;</span><span class="token punctuation">]</span>

<span class="token comment"># 暴露 8080、6379 两个端口，创建时按顺序映射端口 docker run -p 12345 -p 54321 image</span>
<span class="token comment"># 12345:8080，54321:6379</span>
EXPOSE 8080 6379

<span class="token comment"># 后续就可以用 NODE_VERSION 代替 7.2.0</span>
ENV NODE_VERSION 7<span class="token punctuation">.</span>2<span class="token punctuation">.</span>0

<span class="token comment"># 指定工作目录，对RUN,CMD,ENTRYPOINT,COPY,ADD生效。如果不存在则会创建，也可以设置多次</span>
WORKDIR <span class="token operator">/</span>opt/software
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。命令越少越好。</p><br><h3 id="编写-dockerfile" tabindex="-1"><a class="header-anchor" href="#编写-dockerfile" aria-hidden="true">#</a> 编写 dockerfile</h3><p>按需要进行构建，我按自己的需求搞一个，思路大约是：</p><ol><li>基础镜像、维护者信息、设置变量、复制需要的压缩包到容器</li><li>在容器内执行命令，完成环境配置，暴露端口</li><li>构建运行</li></ol><p>先准备一个 jar 包，就一个接口，以后 jar 包也会自动生成。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;服务正在运行......&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 dockerfile 文件：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token keyword">FROM</span> openjdk:8-jdk-alpine
MAINTAINER shiva&lt;qianwei4712@163<span class="token punctuation">.</span>com&gt;
<span class="token function">COPY</span> demo<span class="token punctuation">.</span>jar <span class="token operator">/</span>opt/
EXPOSE 8080
WORKDIR <span class="token operator">/</span>opt
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;-jar&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/opt/demo.jar&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="构建运行" tabindex="-1"><a class="header-anchor" href="#构建运行" aria-hidden="true">#</a> 构建运行</h3><p>当前目录下文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@kwnswba51515gqdqpz software]# ll
total 16720
-rw-r--r-- 1 root root 17102555 Aug 30 09:45 demo.jar
-rw-r--r-- 1 root root      156 Aug 30 13:34 dockerfile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建镜像：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>docker build <span class="token operator">-</span>f dockerfile <span class="token operator">-</span>t test/demo:1<span class="token punctuation">.</span>0 <span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以在镜像列表中查看 <code>test/demo</code> : <code>1.0</code> 的镜像，然后启动：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>docker run <span class="token operator">-</span>itd <span class="token operator">--</span>name=testDemo <span class="token operator">-</span>p 8081:8080 test/demo:1<span class="token punctuation">.</span>0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试访问，链接正常运行。</p><p>build 常用参数如下：</p><ul><li><strong>--build-arg=[] :</strong> 设置镜像创建时的变量；</li><li><strong>-f :</strong> 指定要使用的Dockerfile路径；</li><li><strong>--tag, -t:</strong> 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li><li><strong>--rm :</strong> 设置镜像成功后删除中间容器；</li></ul><br><h2 id="jenkins-maven-插件" tabindex="-1"><a class="header-anchor" href="#jenkins-maven-插件" aria-hidden="true">#</a> jenkins maven 插件</h2>`,32),d={href:"https://plugins.jenkins.io/maven-plugin",target:"_blank",rel:"noopener noreferrer"},u=t(`<p>首先，在全局安全配置中：</p><ul><li>取消勾选 Agent → Controller Security，可以防止以下问题。这个问题在生成 Gitee WebHook 密码会出错。</li></ul><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>HTTP ERROR 403 No valid crumb was included in the request
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>JDK 和 maven 配本地的，把自动安装取消，应该就知道填什么地址了</li></ul><br><p>构建 maven项目，其他都不写了，和 jenkins npm build 一样，看以前的文章。</p><p>Goals and options可以填写下面命令。</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>clean compile package <span class="token operator">-</span>Dmaven<span class="token punctuation">.</span>test<span class="token punctuation">.</span>skip=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>清理、编译、打包，不执行测试用例，也不编译测试用例类。</p><p>然后执行构建，测试下。</p><p>在我的工程目录 <code>/root/.jenkins/workspace/maven test/</code> 下，已经生成了 target 文件夹。</p><br><h2 id="全套构建测试" tabindex="-1"><a class="header-anchor" href="#全套构建测试" aria-hidden="true">#</a> 全套构建测试</h2><p>上面两步合在一起就行了。</p><ol><li>在本地编写 dockerfile，和代码一起上传 git</li><li>jenkins 拉代码，maven 自动打包</li><li>Post Steps 中写构建后 shell 命令，执行 docker 构建、启动运行</li></ol><p>dockerfile 要根据实际路径和版本修改：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token keyword">FROM</span> openjdk:8-jdk-alpine
MAINTAINER shiva&lt;qianwei4712@163<span class="token punctuation">.</span>com&gt;
<span class="token function">COPY</span> target/demo-0<span class="token punctuation">.</span>1<span class="token punctuation">.</span>jar <span class="token operator">/</span>opt/
EXPOSE 8080
WORKDIR <span class="token operator">/</span>opt
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;-jar&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/opt/demo-0.1.jar&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建后 shell 命令也根据实际情况写：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>docker build <span class="token operator">-</span>f dockerfile <span class="token operator">-</span>t test/demo:1<span class="token punctuation">.</span>0 <span class="token punctuation">.</span>
docker run <span class="token operator">-</span>itd <span class="token operator">--</span>name=testDemo <span class="token operator">-</span>p 8081:8080 test/demo:1<span class="token punctuation">.</span>0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑到会多次构建，重复生成镜像，重复创建容器。对命令进行改进：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>
<span class="token comment"># 先定义镜像和版本信息</span>
DOCKERNAME=<span class="token string">&#39;demoTest&#39;</span>
REPOSITORIES=<span class="token string">&#39;demo/test&#39;</span>
TAG=\`date <span class="token operator">+</span><span class="token operator">%</span>Y%m%d-<span class="token operator">%</span>H%M%S\`

<span class="token comment"># 删除原来的容器</span>
CONTAINER_ID=\`docker <span class="token function">ps</span> <span class="token punctuation">|</span> grep <span class="token string">&quot;\${DOCKERNAME}&quot;</span> <span class="token punctuation">|</span> awk <span class="token string">&#39;{print $1}&#39;</span>\`
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">-</span>n <span class="token string">&quot;<span class="token variable">$CONTAINER_ID</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> then
    docker stop <span class="token variable">$CONTAINER_ID</span>
    docker <span class="token function">rm</span> <span class="token variable">$CONTAINER_ID</span>
<span class="token keyword">else</span> <span class="token comment">#如果容器启动时失败了，就需要docker ps -a才能找到那个容器</span>
    CONTAINER_ID=\`docker <span class="token function">ps</span> <span class="token operator">-</span>a <span class="token punctuation">|</span> grep <span class="token string">&quot;\${DOCKERNAME}&quot;</span> <span class="token punctuation">|</span> awk <span class="token string">&#39;{print $1}&#39;</span>\`
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">-</span>n <span class="token string">&quot;<span class="token variable">$CONTAINER_ID</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> then  <span class="token comment"># 如果是第一次在这台机器上拉取运行容器，那么docker ps -a也是找不到这个容器的</span>
        docker <span class="token function">rm</span> <span class="token variable">$CONTAINER_ID</span>
    fi
fi

<span class="token comment"># 删除原来的镜像</span>
IMAGE_ID=\`sudo docker images <span class="token punctuation">|</span> grep $<span class="token punctuation">{</span>REPOSITORIES<span class="token punctuation">}</span> <span class="token punctuation">|</span> awk <span class="token string">&#39;{print $3}&#39;</span>\`
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">-</span>n <span class="token string">&quot;\${IMAGE_ID}&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>then
    docker rmi $<span class="token punctuation">{</span>IMAGE_ID<span class="token punctuation">}</span>
fi

docker build <span class="token operator">-</span>f dockerfile <span class="token operator">-</span>t $<span class="token punctuation">{</span>REPOSITORIES<span class="token punctuation">}</span>:$<span class="token punctuation">{</span>TAG<span class="token punctuation">}</span> <span class="token punctuation">.</span>
docker run <span class="token operator">-</span>itd <span class="token operator">--</span>name=$<span class="token punctuation">{</span>DOCKERNAME<span class="token punctuation">}</span> <span class="token operator">-</span>p 8081:8080 $<span class="token punctuation">{</span>REPOSITORIES<span class="token punctuation">}</span>:$<span class="token punctuation">{</span>TAG<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后测试，一切顺利。</p><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,24),k={href:"https://www.bilibili.com/video/BV1og4y1q7M4?p=24",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.cnblogs.com/dazhoushuoceshi/p/7066041.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.csdn.net/u013887008/article/details/109008586",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.cnblogs.com/lansetuerqi/p/12551690.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.cnblogs.com/jack-jin/articles/12291190.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://blog.csdn.net/u010900754/article/details/78526401",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/fishinhouse/article/details/90299375",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.cnblogs.com/likaileek/p/9295878.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.cnblogs.com/wangcp-2014/p/6211439.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://blog.csdn.net/artaganan8/article/details/93386196",target:"_blank",rel:"noopener noreferrer"};function D(E,N){const a=l("ExternalLinkIcon");return i(),p("div",null,[c,n("p",null,[s("jenkins 先安装插件："),n("a",d,[s(" Maven Integration"),e(a)])]),u,n("p",null,[n("a",k,[s("【狂神说Java】Docker最新超详细版教程通俗易懂_哔哩哔哩_bilibili"),e(a)])]),n("p",null,[n("a",v,[s("Dockerfile命令详解（超全版本） - 大周说测试 - 博客园 (cnblogs.com)"),e(a)])]),n("p",null,[n("a",m,[s("docker构建jdk1.8镜像_面朝大海，春暖花开-CSDN博客"),e(a)])]),n("p",null,[n("a",b,[s("Docker 构建jdk8 镜像 - 蓝色土耳其 - 博客园 (cnblogs.com)"),e(a)])]),n("p",null,[n("a",g,[s("自动化部署（一）jenkins+github+maven+docker(通过Dockerfile脚本部署项目) - jack-jin - 博客园 (cnblogs.com)"),e(a)])]),n("p",null,[n("a",h,[s("【docker】docker build :镜像_u010900754的专栏-CSDN博客"),e(a)])]),n("p",null,[n("a",f,[s("Dockerfile部署jar_fishinhouse的专栏-CSDN博客_dockerfile jar"),e(a)])]),n("p",null,[n("a",_,[s("jenkins实现maven项目自动化部署tomcat - 夜枫林 - 博客园 (cnblogs.com)"),e(a)])]),n("p",null,[n("a",w,[s("Maven中-DskipTests和-Dmaven.test.skip=true的区别 - 飘飘雪 - 博客园 (cnblogs.com)"),e(a)])]),n("p",null,[n("a",R,[s("Jenkins+Docker持续集成_artaganan8的博客-CSDN博客"),e(a)])])])}const O=o(r,[["render",D],["__file","JenkinsMavenDockerfile.html.vue"]]);export{O as default};
