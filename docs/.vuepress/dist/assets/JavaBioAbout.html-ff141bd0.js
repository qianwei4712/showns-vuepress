import{_ as p,r as e,o as c,c as o,b as n,d as a,a as t,f as l}from"./app-c14a8d33.js";const i={},u=l(`<div class="catalog"><ul><li><a href="#%E5%BC%80%E5%9C%BA%E5%BA%9F%E8%AF%9D">开场废话</a></li><li><a href="#%E4%BC%A0%E7%BB%9F%E7%9A%84BIO%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F">传统的BIO通信方式</a><ul><li><a href="#BIO%E7%9A%84%E9%97%AE%E9%A2%98">BIO的问题</a></li><li><a href="#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%8C%96">多线程优化-伪异步</a></li></ul></li><li><a href="#BIO%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%8B%9F">BIO 代码模拟</a><ul><li><a href="#%E4%B8%80Client%E3%80%81%E4%B8%80Server">一Client、一Server</a></li><li><a href="#%E5%A4%9AClient%E3%80%81%E4%B8%80Server">多Client、一Server</a></li><li><a href="#%E4%BC%AA%E5%BC%82%E6%AD%A5%E5%AE%9E%E7%8E%B0">伪异步实现</a></li></ul></li><li><a href="#BIO%E9%97%AE%E9%A2%98%E6%A0%B9%E6%BA%90">BIO 问题根源</a></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></div><h2 id="开场废话" tabindex="-1"><a class="header-anchor" href="#开场废话" aria-hidden="true">#</a> <span id="开场废话">开场废话</span></h2><p><code>2022.04.03</code></p><p>BIO 就是 blocking IO，同步并阻塞（传统阻塞型），它是最简单的IO工作方式，服务器实现模式为<strong>一个连接一个线程</strong>。</p><blockquote><p>应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；</p><p>操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态。</p></blockquote><p>类似就是这样：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/image-20220403094819434.png" alt=""></p><br><h2 id="传统的bio通信方式" tabindex="-1"><a class="header-anchor" href="#传统的bio通信方式" aria-hidden="true">#</a> <span id="传统的BIO通信方式">传统的BIO通信方式</span></h2><p>以前大多数网络通信方式都是阻塞模式的，即:</p><ul><li>客户端向服务器端发出请求后，客户端会一直等待(不会再做其他事情)，直到服务器端返回结果或者网络出现问题。</li><li>服务器端同样的，当在处理某个客户端A发来的请求时，另一个客户端B发来的请求会等待，直到服务器端的这个处理线程完成上一个处理。</li></ul><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/java-io-bio-1.png" style="zoom:80%;"><br><h3 id="bio-的问题" tabindex="-1"><a class="header-anchor" href="#bio-的问题" aria-hidden="true">#</a> <span id="BIO的问题">BIO 的问题</span></h3><p>这里可能需要着重解释。</p><p>对我们这些习惯使用 Spring 全家桶的初级玩家，虽然能看懂这在说什么，但是却无法理解到位。因为我们习惯使用的都是 JDK 8。</p><blockquote><p><strong>正在的传统 BIO 模式下，应该说阻塞的其实是主线程</strong></p></blockquote><p>举个例子：</p><ul><li><strong>我们写了一个服务端，监听 8090 端口</strong></li><li><strong>那么在BIO的限制下，这个 8090 端口一次只能连接一个请求</strong></li><li><strong>这时候如果有多个客户端请求，同时只能处理一个请求</strong></li></ul><p>这显然是有问题的。</p><br><h3 id="多线程优化-伪异步" tabindex="-1"><a class="header-anchor" href="#多线程优化-伪异步" aria-hidden="true">#</a> <span id="多线程优化">多线程优化-伪异步</span></h3><p>这么严重的问题，大佬们肯定是会想办法解决的，所以就有了多线程处理，伪异步方式。</p><p>这个方式可以在 BIO 下实现多客户端连接，实际上是</p><ul><li><strong>主线程 8090 不负责处理实际业务，只负责接收连接请求</strong></li><li><strong>主线程接收到连接请求后，再创建一个新线程，新线程负责和请求建立长连接</strong></li><li><strong>这样就达到了异步的实现</strong></li></ul><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/java-io-bio-2.png" style="zoom:80%;"><p>当然，应用层面的解决方案都不能实际解决问题，只能延迟问题暴露的时间。</p><p>这种方式的问题在于：</p><ol><li><strong>服务器虽然是多线程处理业务，但是操作系统通知accept()的方式还是单个的</strong> ， 所以操作系统接收数据依然是一个一个来的。</li><li>长链接会占用线程资源，操作系统的线程是有限的，但是 <strong>线程开的越多，CPU切换线程花费的时间就越长</strong> 。</li><li>JVM 创建线程是需要分配空间的，也是很费性能的</li></ol><blockquote><p><strong>所以，BIO真正的问题其实不是阻塞等待，而是操作系统层面，对 accept()、read() 的操作点都是被阻塞</strong></p></blockquote><br><h2 id="bio-代码模拟" tabindex="-1"><a class="header-anchor" href="#bio-代码模拟" aria-hidden="true">#</a> <span id="BIO代码模拟">BIO 代码模拟</span></h2><h3 id="一client、一server" tabindex="-1"><a class="header-anchor" href="#一client、一server" aria-hidden="true">#</a> <span id="一Client、一Server">一Client、一Server</span></h3><p>传统基础一对一 socket：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===服务端启动===&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//1.定义一个ServerSocket对象进行服务端的端口注册</span>
    <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 监听客户端的Socket连接请求</span>
    <span class="token class-name">Socket</span> socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3.从socket管道中得到一个字节输入流对象</span>
    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//4.把字节输入流包装成一个缓存字符输入流</span>
    <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> msg<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务端接收到：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//1.创建Socket对象请求服务端的连接</span>
    <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2.从Socket对象中获取一个字节输出流</span>
    <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3.把字节输出流包装成一个打印流</span>
    <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//控制台数据</span>
    <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ps<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="多client、一server" tabindex="-1"><a class="header-anchor" href="#多client、一server" aria-hidden="true">#</a> <span id="多Client、一Server">多Client、一Server</span></h3><p>两个线程来发起请求，但是服务端只有一个接受线程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">instanceSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">instanceSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">instanceSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.创建Socket对象请求服务端的连接</span>
        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.从Socket对象中获取一个字节输出流</span>
        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.把字节输出流包装成一个打印流</span>
        <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//控制台数据,发5条数据</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ps<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端只有一个线程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===服务端启动===&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//1.定义一个ServerSocket对象进行服务端的端口注册</span>
    <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//循环监听</span>
        <span class="token comment">//2. 监听客户端的Socket连接请求</span>
        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.从socket管道中得到一个字节输入流对象</span>
        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//拿到请求方的端口</span>
        <span class="token keyword">int</span> sourcePort <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//4.把字节输入流包装成一个缓存字符输入流</span>
        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> msg<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;接收来自端口:&quot;</span> <span class="token operator">+</span> sourcePort <span class="token operator">+</span> <span class="token string">&quot;，的消息，内容：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以只有第一个线程结束后，才能接收第二个请求的连接：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>===服务端启动===
接收来自端口:13246，的消息，内容：0.5565519439232993
接收来自端口:13246，的消息，内容：0.9260834025244232
接收来自端口:13246，的消息，内容：0.5878731082829873
接收来自端口:13246，的消息，内容：0.8354214340809363
接收来自端口:13246，的消息，内容：0.8136386830166947
接收来自端口:13247，的消息，内容：0.5332692450686916
接收来自端口:13247，的消息，内容：0.6679386892347156
接收来自端口:13247，的消息，内容：0.2991566117277602
接收来自端口:13247，的消息，内容：0.13682948827391217
接收来自端口:13247，的消息，内容：0.5830977040433732
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="伪异步实现" tabindex="-1"><a class="header-anchor" href="#伪异步实现" aria-hidden="true">#</a> <span id="伪异步实现">伪异步实现</span></h3><p>上面已经说过了，弄个线程池来接收请求链接。</p><p>客户端代码不变，服务端修改为线程池进行业务处理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===服务端启动===&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">//1.定义一个ServerSocket对象进行服务端的端口注册</span>
     <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">ThreadPoolExecutor</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">//2. 监听客户端的Socket连接请求</span>
         <span class="token class-name">Socket</span> socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token function">instanceSocket</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Runnable</span> <span class="token function">instanceSocket</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//3.从socket管道中得到一个字节输入流对象</span>
            <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//拿到请求方的端口</span>
            <span class="token keyword">int</span> sourcePort <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//4.把字节输入流包装成一个缓存字符输入流</span>
            <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> msg<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;接收来自端口:&quot;</span> <span class="token operator">+</span> sourcePort <span class="token operator">+</span> <span class="token string">&quot;，的消息，内容：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>===服务端启动===
接收来自端口:14094，的消息，内容：0.0784982639146562
接收来自端口:14093，的消息，内容：0.41119231709991066
接收来自端口:14094，的消息，内容：0.6091203361403802
接收来自端口:14093，的消息，内容：0.9141225888543466
接收来自端口:14093，的消息，内容：0.9052556254115217
接收来自端口:14094，的消息，内容：0.6466857483862705
接收来自端口:14093，的消息，内容：0.7838232857236332
接收来自端口:14094，的消息，内容：0.3363937180511376
接收来自端口:14094，的消息，内容：0.8810532858771326
接收来自端口:14093，的消息，内容：0.24303075043130606
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="bio-问题根源" tabindex="-1"><a class="header-anchor" href="#bio-问题根源" aria-hidden="true">#</a> <span id="BIO问题根源">BIO 问题根源</span></h2><p>可以看到，打印出来的输出数据，端口已经是随机的了。</p><p>到这里也可以看到：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">//2. 监听客户端的Socket连接请求</span>
 <span class="token class-name">Socket</span> socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这一步是在主线程内的，不同线程间的切换要向CPU抢资源</p><p><strong>所以还没有建立连接的新请求，都必须排队进行 accept</strong></p><hr><p>下面开始复制大佬的文章：</p><p>API文档中对于 serverSocket.accept() 方法的使用描述:</p><blockquote><p>Listens for a connection to be made to this socket and accepts it. The method blocks until a connection is made.</p></blockquote><p>serverSocket.accept()会被阻塞? 这里涉及到阻塞式同步IO的工作原理:</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/java-io-bio-4.png" alt=""></p><ul><li>注意，是询问操作系统。也就是说socket套接字的IO模式支持是基于操作系统的，那么自然同步IO/异步IO的支持就是需要操作系统级别的了。如下图:</li></ul><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/java-io-bio-5.png" alt=""></p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/java-io-bio-6.png" alt=""></p><p>如果操作系统没有发现有套接字从指定的端口X来，那么操作系统就会等待。</p><p>这样serverSocket.accept()方法就会一直等待。</p><p>这就是为什么accept()方法为什么会阻塞: 它内部的实现是使用的操作系统级别的同步IO</p><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="参考文章">参考文章</span></h2>`,72),k={href:"https://www.pdai.tech/md/java/io/java-io-bio.html",target:"_blank",rel:"noopener noreferrer"},r={href:"https://www.bilibili.com/video/BV1gz4y1C7RK?p=2&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"};function d(v,m){const s=e("ExternalLinkIcon");return c(),o("div",null,[u,n("ul",null,[n("li",null,[n("a",k,[a("Java IO - BIO 详解 | Java 全栈知识体系 (pdai.tech)"),t(s)])]),n("li",null,[n("a",r,[a("黑马Java-IO模式精讲(AIO&BIO&NIO)，Java-IO基础+高级+实战全套教程，黑马程序员行业大牛深度精讲_哔哩哔哩_bilibili"),t(s)])])])])}const h=p(i,[["render",d],["__file","JavaBioAbout.html.vue"]]);export{h as default};
