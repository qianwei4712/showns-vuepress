import{_ as o,r as l,o as c,c as i,b as s,d as n,a as p,w as t,f as a}from"./app-c14a8d33.js";const r={},u=a('<div class="catalog"><ul><li><a href="#t0">运行时数据区概述</a></li><li><a href="#t1">线程与内存模型</a></li><li><a href="#t2">PC 寄存器</a><ul><li><a href="#t21">PC 寄存器常见问题</a></li></ul></li><li><a href="#t3">虚拟机栈</a><ul><li><a href="#t31">虚拟机栈运行原理</a></li><li><a href="#t32">虚拟机栈两种异常</a></li></ul></li><li><a href="#t4">本地方法栈</a></li><li><a href="#t5">堆 Heap</a><ul><li><a href="#t51">堆空间设置</a></li><li><a href="#t52">年轻代和老年代</a></li><li><a href="#t53">对象在堆中的生命周期</a></li><li><a href="#t54">TLAB - 线程本地分配缓存区</a></li></ul></li><li><a href="#t6">方法区</a><ul><li><a href="#t61">方法区参数设置</a></li><li><a href="#t62">方法区内部结构</a></li></ul></li><li><a href="#te">参考文章</a></li></ul></div><h2 id="运行时数据区概述" tabindex="-1"><a class="header-anchor" href="#运行时数据区概述" aria-hidden="true">#</a> <span id="t0">运行时数据区概述</span></h2><blockquote><p>本文所有代码和介绍，基于 JDK 1.8.0.25</p></blockquote><p>放上这个总结性的图，这个针对 <code>hotspot</code> 虚拟机运行时数据区所绘制的简图：</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/运行时数据区基本结构总览.png" alt="运行时数据区基本结构总览"></p><p>本文要介绍的就是这个图中的 <strong>运行时数据区</strong> ，也就是常说的内存模型。</p><p>对于 java 程序员来说，在虚拟机自动内存管理机制的帮助下，不容易出现内存泄漏和内存溢出。</p><p>有虚拟机管理内存，这一切看起来都很美好。但是，也正因为 java 把内存控制的权力给了 java 虚拟机，一旦出现内存泄漏和溢出方面的问题。</p><p><strong>如果不了解虚拟机是怎么样使用内存的，那么排查错误将会成为一项异常艰难的工作</strong>。</p><p>先把几个重要概念放上：</p><ul><li>堆和栈算是 Java 内存模型中最重要的两部分，<strong>栈是运行时单位（解决程序执行问题），堆是存储单位（数据存储问题）</strong> 。</li><li>PC 寄存器是用来存储指向下一条指令的地址，也就是即将要执行的指令代码。</li><li>虚拟机栈和本地方法栈分别管理 Java 方法和本地方法。 <strong>虚拟机每调用一个方法将会在栈中压入一个对应方法的栈帧</strong> ，内部包含局部变量表、操作数栈、动态链接和方法返回地址。</li><li>虚拟机栈存在两种常见异常 StackOverflowError 和 OutOfMemoryError 。</li><li>堆分为年轻代（Eden 区、Survivor 0/1 区），老年代。对象在 GC 发生时，在堆内各个区上分配空间和移动。</li></ul><br><p>JVM 配置参数如下：</p>',13),k=a("<li><code>-Xss</code> 用于设置虚拟机栈空间大小，例如：<code>java -Xss512M</code> ，默认大小是 1M</li><li><code>-Xms</code> 用于表示堆区（年轻代+老年代）的起始内存大小，等价于 <code>-XX:InitialHeapSize</code> 。默认值为电脑物理内存大小 / 64 。</li><li><code>-Xmx</code> 用于表示堆区（年轻代+老年代）的最大内存，等价于 <code>-XX:MaxHeapSize</code> 。默认值为电脑物理内存大小 / 4 。</li>",3),d=s("code",null,"-XX:NewRatio=2",-1),m=s("li",null,[s("code",null,"-XX:SurvivorRatio=8"),n(" 表示年轻代中 "),s("code",null,"Eden 区/一个Survivor区"),n(" ，默认占比为 "),s("strong",null,"8 : 1 : 1"),n(" 。")],-1),v=s("li",null,[s("code",null,"-XX :MaxTenuringThreshold=<N>"),n(" 表示对象从 Survivor 区晋升至老年代的 age 阈值。")],-1),b=a('<br><h2 id="线程与内存模型" tabindex="-1"><a class="header-anchor" href="#线程与内存模型" aria-hidden="true">#</a> <span id="t1">线程与内存模型</span></h2><p>在 <code>Hotspot JVM</code> 里，每个线程都与操作系统的本地线程直接映射。</p><ul><li>当一个 Java 线程准备好执行以后，此时一个操作系统的本地线程也同时创建。</li><li>Java 线程执行终止后，本地线程也会回收。</li><li>可以看看这篇，Java 线程和操作系统线程的关系：<a target="_blank" href="https://blog.csdn.net/m0_46144826/article/details/107583259">Java Thread 线程基础机制，源码解读</a></li></ul><p>在运行时数据区区分了线程共享和线程私有。</p><p>至于原因嘛，后面会写到，到这先明确 <strong>虚拟机栈、本地方法栈、程序计数器</strong> 是线程私有的，所以生命周期和线程相同。</p><br><h2 id="pc-寄存器" tabindex="-1"><a class="header-anchor" href="#pc-寄存器" aria-hidden="true">#</a> <span id="t2">PC 寄存器</span></h2><p>PC 寄存器（Program Counter Register），也就是上图中的程序计数器。</p><p>这个叫法更顺口，因为 Register 的命名源自 CPU 的寄存器，它存储指令相关的现场信息。</p>',10),h=a(`<p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/PC寄存器作用示意图.png" alt="PC寄存器作用示意图"></p><ul><li>PC 寄存器是一块很小的内存空间，几乎可以忽略不记，也是运行速度最快的存储区域。</li><li>在 JVM 规范中，每个线程都有它自己的 PC 寄存器，是线程私有的，生命周期与线程的生命周期保持一致。</li><li>任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。 PC 寄存器会存储当前线程正在执行的 Java 方法的 JVM 指令地址：或者，如果是在执行 native 方法，则是未指定值（ undefined）。</li></ul><p>比如在字节码反编译文件中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0009</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_STATIC</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
         <span class="token number">0</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>    <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
         <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>    <span class="token comment">// String Hello World!</span>
         <span class="token number">5</span><span class="token operator">:</span> invokevirtual #<span class="token number">4</span>    <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
         <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span>
      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
        line <span class="token number">8</span><span class="token operator">:</span> <span class="token number">0</span>
        line <span class="token number">9</span><span class="token operator">:</span> <span class="token number">8</span>
      <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>
        <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>
            <span class="token number">0</span>       <span class="token number">9</span>     <span class="token number">0</span>  args   <span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>上述中左侧序号 <code>0、3、5、8</code> 就是指令地址，这些就是 PC 寄存器中存储的结构。</strong></p><p>右侧则是虚拟机栈内的指令，这个以后再说。。。</p><br><h3 id="pc-寄存器常见问题" tabindex="-1"><a class="header-anchor" href="#pc-寄存器常见问题" aria-hidden="true">#</a> <span id="t21">PC 寄存器常见问题</span></h3><ol><li><strong>PC 寄存器没有 GC 和 OOM</strong></li></ol><p>PC 寄存器是唯一没有 OOM 的内存区域，没有 GC 的除了它还有虚拟机栈和本地方法栈。</p><br><ol start="2"><li><strong>使用 PC 寄存器存储字节码指令地址有什么用呢？为什么使用 PC 寄存器记录当前线程的执行地址呢？</strong></li></ol><p>因为 CPU 需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。</p><p>JVM 的字节码解释器就需要通过改变 PC 寄存器 的值来明确下一条应该执行什么样的字节码指令。</p><br><ol start="3"><li><strong>PC 寄存器为什么会被设定为线程私有？</strong></li></ol><p>由于 CPU 时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</p><p>每个线程在创建后，都会产生自己的程序计数器和栈帧；这样的话，在线程中断或恢复中，程序计数器在各个线程之间可以互不影响。</p><br><h2 id="虚拟机栈" tabindex="-1"><a class="header-anchor" href="#虚拟机栈" aria-hidden="true">#</a> <span id="t3">虚拟机栈</span></h2><p>首先看下总体性的概念：</p><ul><li>虚拟机栈是什么 ： <strong>栈是线程私有的，每个线程在创建的时候都会创建一个虚拟机栈，其内部保存着一个个栈帧（Stack Frame），对应着一次次的 Java 方法调用。</strong></li><li>虚拟机栈的作用 ：<strong>主要管理 Java 程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。</strong></li><li>栈帧的创建时间 ：当方法被执行的时候，虚拟机将会创建栈帧。</li><li>JVM 对虚拟机栈的操作只有入栈（方法执行）和出栈（执行结束）。所以，栈也不存在垃圾回收。</li></ul><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/虚拟机栈简图.png" alt="虚拟机栈简图"></p><br><h3 id="虚拟机栈运行原理" tabindex="-1"><a class="header-anchor" href="#虚拟机栈运行原理" aria-hidden="true">#</a> <span id="t31">虚拟机栈运行原理</span></h3><p>在一条活动的线程中，一个时间点上，只会有一个活动的栈帧。</p><p>其实从上面那个图中很容易可以理解。</p><p><strong>Java 方法有两种返回函数的方式（正常函数返回，使用 return 指令；抛出异常），不管那种方式，都会导致栈帧将执行结果返回上一个栈帧，并且当前栈帧被弹出。</strong></p><p>下面开始分别讲解栈帧的内部结果。</p><br><h4 id="局部变量表" tabindex="-1"><a class="header-anchor" href="#局部变量表" aria-hidden="true">#</a> 局部变量表</h4><p>局部变量表（local variables）也叫做局部变量数据、本地变量表。</p><p><strong>它是一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量</strong>；这些数据类型包括各类基本数据类型、对象引用（reference），以及 retuenAddress 类型。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/emo/TIM图片20200603100725.jpg" alt=""></p><p>到这里，就可以解释以前在多线程部分的一个提问：<strong>为什么局部变量不会存在线程安全问题？</strong></p><p>太详细的就不解释了，写几个关键词示意一下：</p><blockquote><p><strong>虚拟机栈是线程私有、一个方法对应一个栈帧、方法内局部变量保存在虚拟机栈的局部变量表中、不同线程的栈不允许相互通信。</strong></p></blockquote><p>好嘞，然后把需要记的内容列一下，全是概念性的东西：</p>`,38),g=s("li",null,"局部变量表所需的容量大小是在编译期就确定下来的，在运行期间是不会改变的。",-1),f=s("li",null,"方法嵌套调用的次数由栈的大小决定。栈越大，方法嵌套调用最大次数越多。",-1),j=s("li",null,"对一个方法而言，参数和局部变量越多，使得局部变量表膨胀，栈帧就越大；一个栈帧将占更多的栈空间，导致嵌套调用次数减少。",-1),y=s("li",null,"局部变量在使用前必须显示赋值。类变量会在加载过程的链接阶段经历准备阶段，这个阶段将会置为默认值，所以就算没有在初始化阶段进行复制，也不有问题。但是局部变量是在方法调用时创建，并没有默认赋值。",-1),C=s("br",null,null,-1),S=s("h4",{id:"操作数栈",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#操作数栈","aria-hidden":"true"},"#"),n(" 操作数栈")],-1),_=s("p",null,"操作数栈（Operand Stack，其实就是一个数组），在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈和出栈。",-1),w=a('<p>关于操作数栈的知识要点：</p><ul><li>方法调用，创建栈帧的时候将会生成操作数栈（也就是一个数组）；数组一旦创建长度就不可更改了，所以栈的深度在编译器就确定了。</li><li>如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，并更新 PC 寄存器中下一条需要执行的字节码指令。</li></ul><br><h4 id="动态链接" tabindex="-1"><a class="header-anchor" href="#动态链接" aria-hidden="true">#</a> 动态链接</h4><p>动态链接（Dynamic Linking）是指：每一个栈帧内部都包含一个指向 <code>运行时常量池</code> 中 <code>该栈帧所属方法的引用</code> 。比如：invokedynamic 指令。</p>',5),T=a(`<p>写个测试代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicLinkingTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DynamicLinkingTest</span> dy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicLinkingTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dy<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">dyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后使用 <code>javap -v DynamicLinkingTest.class</code> 命令，显示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Classfile</span> <span class="token operator">/</span><span class="token class-name">E</span><span class="token operator">:</span><span class="token operator">/</span>test<span class="token operator">-</span>demos<span class="token operator">/</span>target<span class="token operator">/</span>classes<span class="token operator">/</span>jvm<span class="token operator">/</span><span class="token class-name">DynamicLinkingTest</span><span class="token punctuation">.</span><span class="token keyword">class</span>
  <span class="token class-name">Last</span> modified <span class="token number">2020</span>年<span class="token number">10</span>月<span class="token number">17</span>日<span class="token punctuation">;</span> size <span class="token number">645</span> bytes
  <span class="token constant">MD5</span> checksum a4548dfdcf2a9d748f4e603d3bc7676a
  <span class="token class-name">Compiled</span> from <span class="token string">&quot;DynamicLinkingTest.java&quot;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">jvm<span class="token punctuation">.</span></span>DynamicLinkingTest</span>
  minor version<span class="token operator">:</span> <span class="token number">0</span>
  major version<span class="token operator">:</span> <span class="token number">52</span>
  flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0021</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_SUPER</span>
  this_class<span class="token operator">:</span> #<span class="token number">2</span>                          <span class="token comment">// jvm/DynamicLinkingTest</span>
  super_class<span class="token operator">:</span> #<span class="token number">7</span>                         <span class="token comment">// java/lang/Object</span>
  interfaces<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> fields<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> methods<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> attributes<span class="token operator">:</span> <span class="token number">1</span>
<span class="token class-name">Constant</span> pool<span class="token operator">:</span>
   #<span class="token number">1</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">7.</span>#<span class="token number">26</span>         <span class="token comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
   #<span class="token number">2</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">27</span>            <span class="token comment">// jvm/DynamicLinkingTest</span>
   #<span class="token number">3</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">2.</span>#<span class="token number">26</span>         <span class="token comment">// jvm/DynamicLinkingTest.&quot;&lt;init&gt;&quot;:()V</span>
   #<span class="token number">4</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">2.</span>#<span class="token number">28</span>         <span class="token comment">// jvm/DynamicLinkingTest.test:()V</span>
   #<span class="token number">5</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">2.</span>#<span class="token number">29</span>         <span class="token comment">// jvm/DynamicLinkingTest.dyTest:()V</span>
   #<span class="token number">6</span> <span class="token operator">=</span> <span class="token class-name">Fieldref</span>           #<span class="token number">2.</span>#<span class="token number">30</span>         <span class="token comment">// jvm/DynamicLinkingTest.num:I</span>
   #<span class="token number">7</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">31</span>            <span class="token comment">// java/lang/Object</span>
   #<span class="token number">8</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               num
   #<span class="token number">9</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">I</span>
  #<span class="token number">10</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span>
  #<span class="token number">11</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
  #<span class="token number">12</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Code</span>
  #<span class="token number">13</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">LineNumberTable</span>
  #<span class="token number">14</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">LocalVariableTable</span>
  #<span class="token number">15</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token keyword">this</span>
  #<span class="token number">16</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Ljvm</span><span class="token operator">/</span><span class="token class-name">DynamicLinkingTest</span><span class="token punctuation">;</span>
  #<span class="token number">17</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               main
  #<span class="token number">18</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>
  #<span class="token number">19</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               args
  #<span class="token number">20</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span>
  #<span class="token number">21</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               dy
  #<span class="token number">22</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               test
  #<span class="token number">23</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               dyTest
  #<span class="token number">24</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">SourceFile</span>
  #<span class="token number">25</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">DynamicLinkingTest</span><span class="token punctuation">.</span>java
  #<span class="token number">26</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">10</span><span class="token operator">:</span>#<span class="token number">11</span>        <span class="token comment">// &quot;&lt;init&gt;&quot;:()V</span>
  #<span class="token number">27</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               jvm<span class="token operator">/</span><span class="token class-name">DynamicLinkingTest</span>
  #<span class="token number">28</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">22</span><span class="token operator">:</span>#<span class="token number">11</span>        <span class="token comment">// test:()V</span>
  #<span class="token number">29</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">23</span><span class="token operator">:</span>#<span class="token number">11</span>        <span class="token comment">// dyTest:()V</span>
  #<span class="token number">30</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">8</span><span class="token operator">:</span>#<span class="token number">9</span>          <span class="token comment">// num:I</span>
  #<span class="token number">31</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token class-name">I</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0000</span><span class="token punctuation">)</span>

  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">jvm<span class="token punctuation">.</span></span>DynamicLinkingTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0001</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
      stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
         <span class="token number">0</span><span class="token operator">:</span> aload_0
         <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
         <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>
      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
        line <span class="token number">6</span><span class="token operator">:</span> <span class="token number">0</span>
      <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>
        <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>
            <span class="token number">0</span>       <span class="token number">5</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   <span class="token class-name">Ljvm</span><span class="token operator">/</span><span class="token class-name">DynamicLinkingTest</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0009</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_STATIC</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
         <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">2</span>                  <span class="token comment">// class jvm/DynamicLinkingTest</span>
         <span class="token number">3</span><span class="token operator">:</span> dup
         <span class="token number">4</span><span class="token operator">:</span> invokespecial #<span class="token number">3</span>                  <span class="token comment">// Method &quot;&lt;init&gt;&quot;:()V</span>
         <span class="token number">7</span><span class="token operator">:</span> astore_1
         <span class="token number">8</span><span class="token operator">:</span> aload_1
         <span class="token number">9</span><span class="token operator">:</span> invokevirtual #<span class="token number">4</span>                  <span class="token comment">// Method test:()V</span>
        <span class="token number">12</span><span class="token operator">:</span> <span class="token keyword">return</span>
      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
        line <span class="token number">11</span><span class="token operator">:</span> <span class="token number">0</span>
        line <span class="token number">12</span><span class="token operator">:</span> <span class="token number">8</span>
        line <span class="token number">13</span><span class="token operator">:</span> <span class="token number">12</span>
      <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>
        <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>
            <span class="token number">0</span>      <span class="token number">13</span>     <span class="token number">0</span>  args   <span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span>
            <span class="token number">8</span>       <span class="token number">5</span>     <span class="token number">1</span>    dy   <span class="token class-name">Ljvm</span><span class="token operator">/</span><span class="token class-name">DynamicLinkingTest</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0001</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
      stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
         <span class="token number">0</span><span class="token operator">:</span> aload_0
         <span class="token number">1</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment">// Method dyTest:()V</span>
         <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>
      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
        line <span class="token number">16</span><span class="token operator">:</span> <span class="token number">0</span>
        line <span class="token number">17</span><span class="token operator">:</span> <span class="token number">4</span>
      <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>
        <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>
            <span class="token number">0</span>       <span class="token number">5</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   <span class="token class-name">Ljvm</span><span class="token operator">/</span><span class="token class-name">DynamicLinkingTest</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0001</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
      stack<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
         <span class="token number">0</span><span class="token operator">:</span> aload_0
         <span class="token number">1</span><span class="token operator">:</span> dup
         <span class="token number">2</span><span class="token operator">:</span> getfield      #<span class="token number">6</span>                  <span class="token comment">// Field num:I</span>
         <span class="token number">5</span><span class="token operator">:</span> iconst_1
         <span class="token number">6</span><span class="token operator">:</span> iadd
         <span class="token number">7</span><span class="token operator">:</span> putfield      #<span class="token number">6</span>                  <span class="token comment">// Field num:I</span>
        <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span>
      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
        line <span class="token number">20</span><span class="token operator">:</span> <span class="token number">0</span>
        line <span class="token number">21</span><span class="token operator">:</span> <span class="token number">10</span>
      <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>
        <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>
            <span class="token number">0</span>      <span class="token number">11</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   <span class="token class-name">Ljvm</span><span class="token operator">/</span><span class="token class-name">DynamicLinkingTest</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">SourceFile</span><span class="token operator">:</span> <span class="token string">&quot;DynamicLinkingTest.java&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Constant pool</strong> 部分就是常量池，在加载时会放在方法区，也叫做运行时常量池，调用的目标就在这里。</li><li><strong>invokespecial</strong> 命令后面加了地址，比如：<code>invokevirtual #4</code> ，后面的 <code>#4</code> 就是常量池中的地址。</li><li>这样做的目的也是节省资源，重复调用不必在线程独有的栈中创建，而是在线程共享的方法区。</li></ul><br><h4 id="方法返回值" tabindex="-1"><a class="header-anchor" href="#方法返回值" aria-hidden="true">#</a> 方法返回值</h4><p>方法返回值实际并不是一个值，而是这个方法返回地址，指向存放调用该方法的 PC 寄存器的值。</p><p>它的作用就是回到调用方法位置，继续往下执行。</p><blockquote><p>异常退出时，不会给他的上层调用者产生任何的返回值。</p></blockquote><br><h3 id="虚拟机栈两种异常" tabindex="-1"><a class="header-anchor" href="#虚拟机栈两种异常" aria-hidden="true">#</a> <span id="t32">虚拟机栈两种异常</span></h3><p><strong>Java 虚拟机规范允许虚拟机栈的大小是动态的或者固定不变的。</strong></p><p>所以，这分别将导致以下两种常见异常：</p><ol><li><strong>采用固定大小的虚拟机栈</strong> ：每一条线程的虚拟机栈容量在线程创建的时候独立选定。<strong>如果线程请求分配的容量超过虚拟机栈允许的最大容量，将会抛出 StackOverflowError 异常。</strong></li></ol>`,15),L=a(`<p>使用递归方法的时候，如果出现问题将进入死循环，每一次调用将会进行压栈，最后就会出现这个异常。</p><p>测试代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackOverflowTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">recursion</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抛出异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>StackOverflowError</span>
	at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>ext<span class="token punctuation">.</span></span>DoubleByte</span>$<span class="token class-name">Encoder</span><span class="token punctuation">.</span><span class="token function">encodeLoop</span><span class="token punctuation">(</span><span class="token class-name">DoubleByte</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">617</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span>CharsetEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">CharsetEncoder</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">579</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>cs<span class="token punctuation">.</span></span>StreamEncoder</span><span class="token punctuation">.</span><span class="token function">implWrite</span><span class="token punctuation">(</span><span class="token class-name">StreamEncoder</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">271</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>cs<span class="token punctuation">.</span></span>StreamEncoder</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">StreamEncoder</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">125</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>OutputStreamWriter</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">OutputStreamWriter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">207</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedWriter</span><span class="token punctuation">.</span><span class="token function">flushBuffer</span><span class="token punctuation">(</span><span class="token class-name">BufferedWriter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">129</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>PrintStream</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">PrintStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">526</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>PrintStream</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">PrintStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">597</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>PrintStream</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">PrintStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">736</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">jvm<span class="token punctuation">.</span></span>StackOverflowTest</span><span class="token punctuation">.</span><span class="token function">recursion</span><span class="token punctuation">(</span><span class="token class-name">StackOverflowTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以根据修改 <code>-Xss</code> 来对比输出值的大小。</p><br><ol start="2"><li><strong>采用动态扩展的虚拟机栈</strong> ：<strong>在尝试扩展的时候无法申请到足够的内存，或者在创建新线程的时候没有足够的内存去创建对应的虚拟机栈，那么将会抛出 OutOfMemoryError 异常。</strong></li></ol><br><h2 id="本地方法栈" tabindex="-1"><a class="header-anchor" href="#本地方法栈" aria-hidden="true">#</a> <span id="t4">本地方法栈</span></h2><p>在将本地方法栈之前，先简单介绍下几个概念：</p>`,11),M=s("li",null,[s("strong",null,"Java 本地方法"),n(" ：由非 Java 语言实现的方法（主要为 C/C++），例如 "),s("code",null,"Thread.start0()"),n(" 。")],-1),x=s("strong",null,"本地方法接口",-1),J=a('<p>简单来说，就是为了和 JVM 所在操作系统交互，或者和硬件交互。</p><p><strong>本地方法栈（Native Method Stack）是管理本地方法的调用；</strong> 和管理 Java 方法的虚拟机栈相似。</p><p>本地方法栈的异常和虚拟机栈相同，工作原理也相同，就略过了。</p><p>执行过程：</p><ol><li>在调用本地方法是，在本地方法栈压入本地方法；</li><li>由动态链接指向本地方法库；</li><li>由执行引擎进行调用执行。</li></ol><br><h2 id="堆-heap" tabindex="-1"><a class="header-anchor" href="#堆-heap" aria-hidden="true">#</a> <span id="t5">堆 Heap</span></h2><p>堆是 Java 内存结构中最重要的部分，也是知识点最多的一部分。</p><p>这里涉及到垃圾回收将会讲的比较简要（因为还没有学到），以后开专题再详细讲。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/emo/8ed4f6854ba34a31287114549aa671c8.jpeg" alt=""></p><p>还是一样，关于 JVM 部分都是先放概念：</p><ul><li>Java 堆区在 JVM 启动的时候就已经创建了，也确定了其空间的大小；</li><li>堆和方法区存在垃圾回收，堆是垃圾回收重点区域。GC 在大内存和频繁 GC 的情况下，将会影响性能；</li><li>JDK7 之前堆内存在逻辑上分为：新生代（Young）、老年代（Old）、永久代（Perm）；</li><li>JDK8 后对堆空间逻辑上分为：新生代、老年代、元空间（Meta）；</li><li>新生代又被分为伊甸园区（Eden）和幸存者 0 和 1 区（Survivor）；永久代和方法区其实并不在堆内，而是方法区。</li></ul><br><h3 id="堆空间设置" tabindex="-1"><a class="header-anchor" href="#堆空间设置" aria-hidden="true">#</a> <span id="t51">堆空间设置</span></h3><p>Java 堆在 JVM 启动时就已经创建了，可以通过相关指令设置其大小：</p><ul><li><code>-Xms</code> 用于表示堆区（年轻代+老年代）的起始内存大小，等价于 <code>-XX:InitialHeapSize</code> 。默认值为电脑物理内存大小 / 64 。</li><li><code>-Xmx</code> 用于表示堆区（年轻代+老年代）的最大内存，等价于 <code>-XX:MaxHeapSize</code> 。默认值为电脑物理内存大小 / 4 。</li><li><strong>开发中建议将初始堆内存和最大堆内存设置成一个值；因为堆内存的扩容和释放将加大系统额外的压力。</strong></li></ul><br><h3 id="年轻代和老年代" tabindex="-1"><a class="header-anchor" href="#年轻代和老年代" aria-hidden="true">#</a> <span id="t52">年轻代和老年代</span></h3><p>堆区的进一步划分可以分为如下结构：</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/堆空间结构划分.png" alt="堆空间结构划分"></p>',20),P=s("code",null,"-XX:NewRatio=2",-1),V=a('<p>一般情况下是不会修改这个比例的，只有我们明确知道对象的生命周期，才会针对进行更改。</p><br><p><strong>而在年轻代中，Eden 和两个 Survivor 区的默认占比为 8 : 1 : 1</strong> 。</p><p>Survivor 0 和 1 区的因为需要相互复制，所以它们的空间大小是相同的。</p><p>修改年轻代和老年代空间占比的指令为 <code>-XX:SurvivorRatio=8</code> ，相当于 <code>Eden 区/一个Survivor区</code></p><br><h3 id="对象在堆中的生命周期" tabindex="-1"><a class="header-anchor" href="#对象在堆中的生命周期" aria-hidden="true">#</a> <span id="t53">对象在堆中的生命周期</span></h3><p>对象在堆中的流程大致分为如下几个步骤：</p><ol><li><p>new 的对象先放 Eden 区。此区有大小限制。</p></li><li><p>当 Eden 区的空间填满时，程序又需要创建对象，JVM 的垃圾回收器将对 Eden 区进行垃圾回收(Minor GC)，将 Eden 区中的不再被其他对象所引用的对象进行销毁，再加载新的对象放到 Eden 区。</p></li><li><p>然后将 Eden 区中的剩余对象移动到 Survivor 0 区。</p></li><li><p>如果再次触发垃圾回收，此时上次幸存下来的放到 Survivor 0 区的，如果没有回收，就会 放到 Survivor 1 区。</p></li><li><p>如果再次经历垃圾回收，此时会重新放回 Survivor 0 区，接着再去 Survivor 1 区。</p><blockquote><p><strong>每一次在 Survivor 0 和 1 区转移，都会为该对象的标志位 age 加一。</strong></p><p><strong>到达默认次数 15 后，下一次就可以晋升到老年代。</strong></p><p><strong>最大转移次数可以通过 <code>-XX :MaxTenuringThreshold=&lt;N&gt;</code> 进行设置。</strong></p></blockquote></li><li><p>在老年代，相对悠闲。当老年代内存不足时，再次触发 GC: Major GC， 进行老年代的内存清理。</p></li><li><p>若老年代执行了 Major GC 之后发现依然无法进行对象的保存，就会产生 OOM 异常</p></li></ol><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/emo/SJ4S5W1CAW511CS5.jpg" alt=""></p><p>可得记住了，这是最正常的流程，后面还有其他特殊情况。。。再给你们放个示意图</p><p>不同颜色对应的区域参考上面的区域划分</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/堆内对象分配和回收流程示意图.png" alt="堆内对象分配和回收流程示意图"></p><br><p>以上步骤是正常情况下，当然不可能所有包含所有情况，也存在一些特殊情况。</p><ul><li>当 Survivor 区满了，但是 Survivor 区内对象没有达到阈值，新对象也可以直接被晋升到老年代的。</li><li>遇到超大对象，新生代空间不够，则直接分配到老年代。</li></ul><p>最后看下这个流程图，里面涉及的判断应该可以理解了。</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/堆内对象分配和回收流程图.png" alt="堆内对象分配和回收流程图"></p><p>最后提两句，各个 GC 之间的差别，详细的以后再讲：</p><ul><li><p><strong>Minor GC</strong> ：又叫做 YGC / Young GC，对新生代进行 GC。频率比较高，因为大部分对象的存活寿命较短，在新生代里被回收，性能耗费较小。</p><ul><li>Eden 区满时才触发，Survivor 区满时不会触发。</li><li>Minor GC 会触发 STW（Stop the World，全局停顿，所有 Java 代码停止，native 代码可以执行，但不能与 JVM 交互）。虽然 Minor GC 频率高，但是执行速度快，所以影响不大。</li></ul></li><li><p><strong>Major GC</strong> ：又可以成为 Old GC ，只收集老年代，频率很低。</p><ul><li>老年代空间不足时，会先尝试触发 Minor GC，之后空间还是不足，则会触发 Major GC。</li><li>Major GC 的速度比 Minor GC 慢 10 倍以上，STW 时间相当长，所以要调优减少发生次数。</li></ul></li><li><p><strong>Mixed GC</strong> ：收集整个新生代和老年代，目前就只有 <strong>G1 GC</strong>。</p></li><li><p><strong>Full GC</strong> ：又叫做 FGC ，收集整个堆和方法区的 GC。触发情况包括：</p><ul><li>调用 <code>System.gc()</code> 时，系统建议执行 Full GC ，但不一定执行。</li><li>老年代空间不足、方法区空间不足。</li><li>通过 Minor GC 后进入老年代的平均大小大于老年代的可用内存。</li><li>由 Eden 区、Survivor 区复制时，对象大小大于 Survivor To 区可用内存，则把该对象晋升到老年代，且老年代的可用内存小于该对象大小。</li></ul></li></ul><p><strong>所谓的调优，就是让 GC 触发的次数尽量少，避免占用用户线程的资源。</strong></p><br><h3 id="tlab-线程本地分配缓存区" tabindex="-1"><a class="header-anchor" href="#tlab-线程本地分配缓存区" aria-hidden="true">#</a> <span id="t54">TLAB - 线程本地分配缓存区</span></h3><p>首先要弄明白的是，什么是 TLAB（ Thread Local Allocation Buffer ）？为什么要有 TLAB ?</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/emo/640.png" alt=""></p><p>这玩意儿就是 JVM 自带的，它设计了我们学就是了嘛。。。。</p><p>基本的原因和情况如下：</p><ol><li>堆区是线程共享区域，并发环境下从堆区中划分内存空间是线程不安全的。</li><li>为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。</li><li>JVM 为每个线程分配了一个私有缓存区域，它包含在 Eden 区。</li><li>多线程同时分配内存时，使用 TLAB 可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为 <strong>快速分配策略</strong> 。</li></ol><p>然后把 TLAB 的流程图放上：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/TLAB 工作原理流程图.png" alt="TLAB 工作原理流程图"></p><p>关于 TLAB 的其他知识点如下：</p><ul><li><p>JVM 会将 TLAB 作为内存空间分配的首选，但并不一定能分配到 TLAB 内。</p></li><li><p><code>-XX:UseTLAB</code> 可以用来设置是否开启 TLAB 空间。</p></li><li><p>默认情况下，TLAB 空间的内存非常小，仅占有整个 Eden 空间的 1%</p><blockquote><p>可以通过选项 <code>-XX:TLABWasteTargetPercent</code> 设置 TLAB 空间所占用 Eden 空间的百分比大小。</p></blockquote></li><li><p>一旦对象在 TLAB 空间分配内存失败时，JVM 就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在 Eden 空间中分配内存。</p></li></ul><br><h2 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区" aria-hidden="true">#</a> <span id="t6">方法区</span></h2><p>先看一眼栈、堆、方法区的关系：</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/栈、堆、方法区的关系.png" alt="栈、堆、方法区的关系"></p><p>方法区的概念性知识和堆差不多：</p><ul><li>方法区和 Java 堆一样，是线程共享的；在 JVM 启动时被创建，空间大小可以设置为固定也可以扩展。</li><li>方法区在逻辑上是堆的一部分，但一些简单的实现可能不会选择去进行垃圾回收或进行压缩。</li><li>方法区的大小决定了应用可以保存多少个类。如果应用定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误： <ul><li>JDK7 之前： <code>java.lang.OutOfMemoryError:PermGen space</code></li><li>JDK8 之后： <code>java.lang.OutOfMemoryError:Metaspace</code></li><li>加载太多第三方 jar 包、Tomcat 部署太多应用、大量动态的生成反射类；都将导致方法区 OOM 异常</li></ul></li></ul><br>',39),X=a('<p>啥是本地内存呢？</p><p>就是我们口语上的 8G、16G，这要是还能溢出我也是懵了。</p><blockquote><p>所以对比元空间，永久代将更容易使 Java 应用产生 OOM 异常，即超过 <code>-XX:MaxPermSize</code> 的上限。</p></blockquote><br><h3 id="方法区参数设置" tabindex="-1"><a class="header-anchor" href="#方法区参数设置" aria-hidden="true">#</a> <span id="t61">方法区参数设置</span></h3><h4 id="jdk7-及以前" tabindex="-1"><a class="header-anchor" href="#jdk7-及以前" aria-hidden="true">#</a> JDK7 及以前</h4><ul><li>通过 <code>-XX:PermSize</code> 来设置永久代初始分配空间大小，默认值 <code>20.75M</code> 。</li><li>通过 <code>-XX:MaxPerSize</code> 来设置永久代最大可分配空间，32 位机器默认 <code>64M</code> ，64 位机器默认 <code>82M</code> 。</li><li>JVM 加载类信息容量超过了最大值，报 <code>java.lang.OutOfMemoryError:PermGen space</code></li></ul><br><h4 id="jdk8-及以后" tabindex="-1"><a class="header-anchor" href="#jdk8-及以后" aria-hidden="true">#</a> JDK8 及以后</h4><ul><li>永久代的两个配置参数改为： <code>-XX:MetaspaceSize</code> 和 <code>-XX:MaxMetaspaceSize</code> ，默认值分别为 21M 和 -1（没有限制）。</li><li>为了避免频繁地 GC ，建议将 <code>-XX:MetaspaceSize</code> 设置为一个较大的值。</li></ul><br><h3 id="方法区内部结构" tabindex="-1"><a class="header-anchor" href="#方法区内部结构" aria-hidden="true">#</a> <span id="t62">方法区内部结构</span></h3><p>方法区内部结构包括：类型信息、域（字段）信息、方法信息、常量、静态变量、即时编译器编译后的代码缓存等。</p><p>方法区内还有一个非常重要的结构：<strong>运行时常量池</strong> 。</p><p>在 class 文件中，就有一个常量池表，包含了类名、方法名、参数类型、字面量等类型的符号引用。</p><p>字节码中直接调用常量池的信息，避免相同信息重复创建。</p><br><p>还有就是关于 StringTable 的位置：</p><ul><li>JDK7 中将 StringTable 放到了堆空间中。因为永久代的回收效率很低，在 Full GC 的时候才会触发。而 Full GC 是老年代的空间不足、永久代不足时才会触发。这就导致 StringTable 回收效率不高。</li><li>我们开发中会有大量的字符串被创建，回收效率低，会导致永久代内存不足，放到堆里能及时回收内存。</li></ul><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="te">参考文章</span></h2><p><a target="_blank" href="https://www.jianshu.com/p/997e1e956e0a">https://www.jianshu.com/p/997e1e956e0a</a></p><p><a target="_blank" href="https://www.bilibili.com/video/BV1PJ411n7xZ">https://www.bilibili.com/video/BV1PJ411n7xZ</a></p><p><a target="_blank" href="https://www.pdai.tech/md/java/jvm/java-jvm-struct.html">https://www.pdai.tech/md/java/jvm/java-jvm-struct.html</a></p><p><a target="_blank" href="https://www.jianshu.com/p/80fa4232f326">https://www.jianshu.com/p/80fa4232f326</a></p><p><a target="_blank" href="https://www.cnblogs.com/williamjie/p/9222839.html">https://www.cnblogs.com/williamjie/p/9222839.html</a></p>',26);function G(E,O){const e=l("font");return c(),i("div",null,[u,s("ul",null,[k,s("li",null,[d,n(" 表示年轻代和老年代占比分配为 "),s("strong",null,[p(e,{color:"red"},{default:t(()=>[n("1 : 2")]),_:1})]),n(" ，这是默认配置比例。若修改为 3，则表示 老年代/年轻代 = 3。")]),m,v]),b,s("blockquote",null,[s("p",null,[s("strong",null,[p(e,{color:"red"},{default:t(()=>[n("PC 寄存器的作用：用来存储指向下一条指令的地址，也就是即将要执行的指令代码。由执行引擎读取吓一跳指令。")]),_:1})])])]),h,s("ul",null,[g,f,j,y,s("li",null,[s("strong",null,[p(e,{color:"red"},{default:t(()=>[n("局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收。")]),_:1})])])]),C,S,_,s("p",null,[s("strong",null,[p(e,{color:"red"},{default:t(()=>[n("操作数栈主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。")]),_:1})])]),w,s("p",null,[n("在 Java 源文件编译到字节码文件中，所有变量和方法引用都将作为符号引用（Symbolic Reference）保存在 class 文件的常量池里。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的， "),s("strong",null,[p(e,{color:"red"},{default:t(()=>[n("动态链接的作用就是为了将这些符号转换为调用方法的直接引用")]),_:1})]),n(" 。")]),T,s("ul",null,[s("li",null,[p(e,{color:"red"},{default:t(()=>[n("**栈大小设置使用 `-Xss` 进行配置，例如：`java -Xss512M` ，默认大小是 1M**")]),_:1})])]),L,s("ul",null,[M,s("li",null,[x,n(" ："),s("strong",null,[p(e,{color:"red"},{default:t(()=>[n("也叫做 JNI")]),_:1})]),n(" ，作用是融合不同的编程语言为 Java 所用，它的初衷是融合 C/C++ 程序。")])]),J,s("p",null,[n("年轻代和老年代默认占比分配为 "),s("strong",null,[p(e,{color:"red"},{default:t(()=>[n("1 : 2")]),_:1})]),n(" ，默认配置为 "),P,n(" 。若修改为 3，则表示 老年代/年轻代 = 3.")]),V,s("p",null,[n("永久代和元空间的本质区别是： "),s("strong",null,[p(e,{color:"red"},{default:t(()=>[n("元空间不在虚拟机设置的内存中，而是使用本地内存。")]),_:1})])]),X])}const D=o(r,[["render",G],["__file","RuntimeStruc.html.vue"]]);export{D as default};
