import{_ as p,r as e,o,c,d as s,b as n,a as l,w as i,f as a}from"./app-7e2007b0.js";const u={},k=a('<div class="catalog"><ul><li><a href="#jiangjie">注解讲解()</a><ul><li>三种标准注解</li><li>四大元注解</li></ul></li><li><a href="#duqu">注解读取尝试()</a><ul><li>利用反射读取注解</li></ul></li><li><a href="#qiantao">注解嵌套使用()</a><ul><li>模拟实体与数据库关系表映射</li></ul></li></ul></div><blockquote><p>注解（也被称为元数据）为我们在代码中添加信息提供一种形式化的方法，使我们在稍后某个时刻非常简便地使用这些数据。</p></blockquote><blockquote><p>注解开发是现在流行的快速开发不可缺少的部分，然而，天天用注解写代码，我却根本不知道注解是怎么工作的。</p></blockquote><h2 id="注解讲解" tabindex="-1"><a class="header-anchor" href="#注解讲解" aria-hidden="true">#</a> <span id="jiangjie">注解讲解</span></h2><p>注解的主要作用（个人理解）: <strong>生成文档，跟踪用例，编译检查</strong></p><p>注解语法和Java基本相同，就是多了一个@。注解是真正语言级的概念，享有编译期的类型保护检查。</p><p>注解有三种标准注解，四种元注解。</p><table><tr><td>@Override，覆盖父类方法</td></tr><tr><td>@Deprecated，过时方法，编译器会发出警告</td></tr><tr><td>@SuppressWarnnings，关闭编译器的警告信息</td></tr></table>',8),d=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@interface</span> <span class="token class-name">UseCase</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;no description&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>四种元注解的作用则是构建其他注解,在上述例子中自定义了一个简单注解，下面介绍四个元注解的作用</p>`,2),r=n("li",null,[s("@Target 表示注解将要用于什么地方，这个比较好理解，就不多解释了。选择"),n("strong",null,"ElementType"),s("参数 "),n("ul",null,[n("li",null,"METHOD方法，TYPE类或接口，FIELD字段，CONSTRUCTOR构造器，LOCAL_VARIABLE局部变量，PACKAGE包，PARAMETER参数，TYPE_PARAMETER类参数，TYPE_USE任意类类型")])],-1),v=n("strong",null,"RetentionPolicy",-1),m=n("li",null,"SOURCE 注解将被编译器丢弃",-1),b=n("li",null,"CLASS 注解在Class文件中可用，但会被VM丢弃",-1),g=n("li",null,[s("@Documented 代表此注解会被javadoc工具提取成文档（感觉用不太到）"),n("a",{href:"https://www.cnblogs.com/uoar/p/8036642.html",target:"_blank"},"转到大神的测试博客:传送门")],-1),w=n("li",null,[s("@Inherited 允许子类继承父类注解，"),n("a",{href:"https://blog.csdn.net/snow_crazy/article/details/39381695",target:"_blank"},"转到大神的测试博客:传送门")],-1),f=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>@Target</code>声明的作用域可以是多个，以逗号隔开，若缺省声明，则表示在所有域都可以使用。 <br></p><h2 id="注解读取尝试" tabindex="-1"><a class="header-anchor" href="#注解读取尝试" aria-hidden="true">#</a> <span id="duqu">注解读取尝试</span></h2><p>下面是基于上面的注解写得测试代码，可以清楚看到注解的使用方式，简单的键值对。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">PasswordUtils</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@UseCase</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">47</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;密码必须包含一个英文&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validatePassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> password<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\w*\\\\d\\\\w*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token annotation punctuation">@UseCase</span><span class="token punctuation">(</span>id<span class="token operator">=</span> <span class="token number">48</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">encryptPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//字符串反序</span>
				<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token annotation punctuation">@UseCase</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token number">49</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">&quot;判断新密码是否已经存在&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkNewPsw</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> prePsw<span class="token punctuation">,</span> <span class="token class-name">String</span> psw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token operator">!</span>prePsw<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>psw<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有用来读取注解的工具，注解和注释并没有什么区别，反而更加繁琐。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">trackUseCase</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> useCases<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//反射对象的所有方法（不包括继承），遍历获取每个方法的UseCase注解</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">UseCase</span> uc <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">UseCase</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>uc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发现UseCase,id:&quot;</span><span class="token operator">+</span>uc<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot; 描述：&quot;</span><span class="token operator">+</span>uc<span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				useCases<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>uc<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> integer <span class="token operator">:</span> useCases<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;未发现UseCase,id:&quot;</span><span class="token operator">+</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据<code>UseCase</code>注解，编写对应注解提取器，然后测试观察输出</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> useCases <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>useCases<span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token function">trackUseCase</span><span class="token punctuation">(</span>useCases<span class="token punctuation">,</span> <span class="token class-name">PasswordUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token punctuation">}</span>
输出结果：
发现<span class="token class-name">UseCase</span><span class="token punctuation">,</span>id<span class="token operator">:</span><span class="token number">49</span> 描述：判断新密码是否已经存在
发现<span class="token class-name">UseCase</span><span class="token punctuation">,</span>id<span class="token operator">:</span><span class="token number">48</span> 描述：no description
发现<span class="token class-name">UseCase</span><span class="token punctuation">,</span>id<span class="token operator">:</span><span class="token number">47</span> 描述：密码必须包含一个英文
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这只是简单测试，就不过多赘述，只是观察到三个id并不是按照方法声明顺序，原因是<code>getDeclaredMethods()</code>方法，返回的方法数组是无序的。</p><hr><br><h2 id="注解嵌套使用" tabindex="-1"><a class="header-anchor" href="#注解嵌套使用" aria-hidden="true">#</a> <span id="qiantao">注解嵌套使用</span></h2><p>在注解中，可以使用其他注解作用一个域。下面是一个模拟实体与数据库关系表映射的示例。<br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//表名</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@interface</span> <span class="token class-name">DBTable</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//字段基础属性</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@interface</span> <span class="token class-name">Constraints</span> <span class="token punctuation">{</span>
	<span class="token comment">//主键</span>
	<span class="token keyword">boolean</span> <span class="token function">primaryKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token comment">//是否允许为空</span>
	<span class="token keyword">boolean</span> <span class="token function">allowNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token comment">//是否唯一</span>
	<span class="token keyword">boolean</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//字符型字段</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@interface</span> <span class="token class-name">SQLString</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
	<span class="token class-name">Constraints</span> <span class="token function">constraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token annotation punctuation">@Constraints</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//整型字段</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@interface</span> <span class="token class-name">SQLInteger</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
	<span class="token class-name">Constraints</span> <span class="token function">constraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token annotation punctuation">@Constraints</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>因为注解不支持继承</strong>，虽然不知道为啥。。所以要用嵌套模拟集成<br> 对于嵌套注解的使用很好理解，若想对嵌套注解的默认值进行修改，可以在声明时直接进行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Constraints</span> <span class="token function">constraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token annotation punctuation">@Constraints</span><span class="token punctuation">(</span>unique<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后将上述的注解应用到实体类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DBTable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;member&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Member</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@SQLString</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
	<span class="token annotation punctuation">@SQLString</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
	<span class="token annotation punctuation">@SQLInteger</span>
	<span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
	<span class="token annotation punctuation">@SQLString</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>constraints <span class="token operator">=</span> <span class="token annotation punctuation">@Constraints</span><span class="token punctuation">(</span>unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> handle<span class="token punctuation">;</span>
    <span class="token comment">//这里省略get set方法	</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，<code>@SQLString(50)</code>没有声明属性名，这里解释下：</p><blockquote><p><strong>如果注解中，存在value()元素，并且在使用注解的时候，该元素是唯一值，则可以省略value声明。</strong></p></blockquote><p><code>@SQLString(value = 30,constraints = @Constraints(unique = true))</code></p><p>这段注解就显得不是那么易于阅读，对于这种注解，推荐拆分。因为编译器允许对同一表使用多个注解（不能重复使用同一注解）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@SQLString(30)
@Constraints(unique= true)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,27);function y(h,C){const t=e("font");return o(),c("div",null,[k,s(" 以上三类为Java三种标准注解，也是比较常用的。 "),d,n("ul",null,[r,n("li",null,[s("@Retention 表示需要在什么级别保存该注解信息。可选"),v,s("参数 "),n("ul",null,[m,b,n("li",null,[s("RUNTIME "),n("strong",null,[l(t,{color:"#A52A2A"},{default:i(()=>[s("VM将在运行时保留注解，因此可以通过反射机制读取注解信息")]),_:1})])])])]),g,w]),f])}const _=p(u,[["render",y],["__file","JavaAnnotation.html.vue"]]);export{_ as default};
