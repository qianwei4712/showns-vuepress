import{_ as i,r as s,o,c as d,b as t,a,w as r,d as e,f as n}from"./app-c14a8d33.js";const p={},c=n('<div class="catalog"><ul><li><a href="#t0">垃圾回收器的性能指标</a><ul><li><a href="#t01">吞吐量与暂停时间</a></li></ul></li><li><a href="#t1">不同垃圾回收器概述</a></li><li><a href="#t2">不同垃圾回收器介绍</a><ul><li><a href="#t21">Serial GC</a></li><li><a href="#t22">ParNew GC</a></li><li><a href="#t23">Parallel Scavenge GC</a></li><li><a href="#t24">CMS GC</a></li><li><a href="#t25">G1 GC</a></li></ul></li><li><a href="#t3">JDK 9 之后的垃圾回收器</a></li></ul></div><h2 id="垃圾回收器的性能指标" tabindex="-1"><a class="header-anchor" href="#垃圾回收器的性能指标" aria-hidden="true">#</a> <span id="t0">垃圾回收器的性能指标</span></h2><p>垃圾回收的基本性能指标如下：</p>',3),g=t("li",null,"垃圾收集开销：吞吐量的补数，垃圾收集所用时间与总运行时间的比例。",-1),h=t("li",null,"收集频率：相对于应用程序的执行，收集操作发生的频率。",-1),u=t("li",null,"快速：一个对象从诞生到被回收所经历的时间。",-1),C=n('<p>其中比较重要的三个指标是 <code>吞吐量</code> 、 <code>暂停时间</code> 和 <code>内存占用</code> ，而且 <code>吞吐量</code> 和 <code>暂停时间</code> 是矛盾的，只能根据场景进行分辨选择。</p><br><h3 id="吞吐量与暂停时间" tabindex="-1"><a class="header-anchor" href="#吞吐量与暂停时间" aria-hidden="true">#</a> <span id="t01">吞吐量与暂停时间</span></h3><h4 id="吞吐量-throughput" tabindex="-1"><a class="header-anchor" href="#吞吐量-throughput" aria-hidden="true">#</a> 吞吐量（throughput）</h4><p>吞吐量就是 CPU 用于 <strong>运行用户代码的时间</strong> 与 CPU 总消耗时间的 <strong>百分比</strong>：</p><p>$$ 吞吐量 = 运行用户代码时间/（运行用户代码时间 + 垃圾收集时间） $$</p><blockquote><p>这种情况下，应用程序能容忍较高的暂停时间</p><p>因此，高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的。</p></blockquote><p><strong>吞吐量有限意味着单位时间内 STW 时间最短。</strong></p><br><h4 id="暂停时间-parse-time" tabindex="-1"><a class="header-anchor" href="#暂停时间-parse-time" aria-hidden="true">#</a> 暂停时间（parse time）</h4><p>暂停时间是指一个时间段内应用程序线程暂停，让 GC 线程执行的时间。</p><p><strong>暂停时间优先，意味着尽可能让单次 STW 的时间最短。</strong></p><p>所以低暂停时间也可以视为低延迟。</p><br><h4 id="简单对比" tabindex="-1"><a class="header-anchor" href="#简单对比" aria-hidden="true">#</a> 简单对比</h4><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/吞吐量VS暂停时间示意图.png" alt="吞吐量VS暂停时间示意图"></p><p>对于两个指标的对比，需要了解：</p><ul><li>高吞吐量较好因为这会让应用程序的最终用户感觉只有应用程序线程在做“生产性”工作。直觉上，吞吐量越高程序运行越快。</li><li>对于一个交互式应用程序而言，低暂停时间(低延迟)较好因为从最终用户的角度来看，不管是 GC 还是其他原因导致一个应用被挂起始终是不好的。</li><li>不幸的是”高吞吐量”和”低暂停时间”是一对相互竞争的目标(矛盾)。 <ul><li>因为如果选择以吞吐量优先，那么必然需要降低内存回收的执行频率，但是这样会导致 GC 需要更长的暂停时间来执行内存回收。</li><li>相反的，如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也只能频繁地执行内存回收，但这又引起了年轻代内存的缩减和导致程序吞吐量的下降。</li></ul></li></ul><p>这两个指标相互矛盾，所以现行的标准是：</p><blockquote><p><strong>在最大吞吐量优先的情况下，降低停顿时间。</strong></p></blockquote><br><h2 id="不同垃圾回收器概述" tabindex="-1"><a class="header-anchor" href="#不同垃圾回收器概述" aria-hidden="true">#</a> <span id="t1">不同垃圾回收器概述</span></h2><p>先区分下不同垃圾回收器的类型：</p><ul><li>串行回收器：Serial、 Serial Old</li><li>并行回收器：ParNew、 Parallel Scavenge、 Parallel Old</li><li>并发回收器：CMS、G1</li></ul><p>有的 GC 只能回收年轻代，有的只能老年代；所以在看下这个搭配图：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/垃圾收集器组合关系.png" alt="垃圾收集器组合关系"></p><p>根据这个图的搭配关系，了解下以下内容：</p><ol><li><strong>红色虚线</strong> ：由于维护和兼容性测试的成本，在 JDK 8 时将 Serial+CMS、ParNew+Serial Old 这两个组合声明为废弃 ，并在 JDK 9 中完全取消了这些组合的支持，即:移除。</li><li><strong>绿色虚线</strong> ：JDK 14 中，弃用 Parallel Scavenge 和 Serial Old GC 组合。</li><li><strong>青色虚线</strong> ：JDK 14 中，删除了 CMS 垃圾回收器。</li><li>JDK 9 开始，G1 成为默认的垃圾回收器，以替换 CMS ；JDK 11 加入 ZGC。</li></ol><br><h2 id="不同垃圾回收器介绍" tabindex="-1"><a class="header-anchor" href="#不同垃圾回收器介绍" aria-hidden="true">#</a> <span id="t2">不同垃圾回收器介绍</span></h2><p>不同的垃圾回收器有不同的优势。当然在日常工作中一般也就用 2-3 种：</p><table><thead><tr><th style="text-align:center;">垃圾收集器</th><th style="text-align:center;">分类</th><th style="text-align:center;">作用位置</th><th style="text-align:center;">使用算法</th><th style="text-align:center;">特点</th><th>适用场景</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>Serial</strong></td><td style="text-align:center;">串行运行</td><td style="text-align:center;">年轻代</td><td style="text-align:center;">复制算法</td><td style="text-align:center;">响应速度优先</td><td>适用于单 CPU 环境下的 client 模式</td></tr><tr><td style="text-align:center;"><strong>ParNew</strong></td><td style="text-align:center;">并行运行</td><td style="text-align:center;">年轻代</td><td style="text-align:center;">复制算法</td><td style="text-align:center;">响应速度优先</td><td>多 CPU 环境 Server 模式下与 CMS 配合使用</td></tr><tr><td style="text-align:center;"><strong>Parallel</strong></td><td style="text-align:center;">并行运行</td><td style="text-align:center;">年轻代</td><td style="text-align:center;">复制算法</td><td style="text-align:center;">吞吐量优先</td><td>适用于后台运算而不需要太多交互的场景</td></tr><tr><td style="text-align:center;"><strong>Serial Old</strong></td><td style="text-align:center;">串行运行</td><td style="text-align:center;">老年代</td><td style="text-align:center;">标记-压缩</td><td style="text-align:center;">响应速度优先</td><td>适用于单 CPU 环境下的 Client 模式</td></tr><tr><td style="text-align:center;"><strong>Parallel Old</strong></td><td style="text-align:center;">并行运行</td><td style="text-align:center;">老年代</td><td style="text-align:center;">标记-压缩</td><td style="text-align:center;">吞吐量优先</td><td>适用于后台运算而不需要太多交互的场景</td></tr><tr><td style="text-align:center;"><strong>CMS</strong></td><td style="text-align:center;">并发运行</td><td style="text-align:center;">老年代</td><td style="text-align:center;">标记-压缩</td><td style="text-align:center;">响应速度优先</td><td>适用于互联网或 B/S 业务</td></tr><tr><td style="text-align:center;"><strong>G1</strong></td><td style="text-align:center;">并行、并发运行</td><td style="text-align:center;">年轻代和老年代</td><td style="text-align:center;">标记-压缩、复制</td><td style="text-align:center;">响应速度优先</td><td>面向服务端应用</td></tr></tbody></table><br><h3 id="serial-gc" tabindex="-1"><a class="header-anchor" href="#serial-gc" aria-hidden="true">#</a> <span id="t21">Serial GC</span></h3><p>Serial 收集器是最基本、历史最悠久的垃圾收集器了。JDK1. 3 之 前回收新生代唯一的选择。</p><blockquote><p>Serial 收集器采用 <strong>复制算法</strong> 、 <strong>串行回收</strong> 和 &quot;Stop-the-World&quot; 机制的方式执行内存回收。</p></blockquote><p>除了年轻代之外，Serial 收集器还提供用于执行老年代垃圾收集的 Serial Old 收集器。</p><ul><li>Serial Old 收集器同样也采用了串行回收和&quot;Stop the World&quot;机制，只不过内存回收算法使用的是 <strong>标记-压缩算法。</strong></li><li>Serial Old 在 Server 模式下主要有两个用途: <ul><li>与新生代的 Parallel Scavenge 配合使用。</li><li>作为老年代 CMS 收集器的后备垃圾收集方案。</li></ul></li></ul><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/Serial GC工作示意图.png" alt="Serial GC工作示意图"></p><p>因为这是串行回收，只能使用一个 CPU 进行工作，目前已经很少存在单核 CPU 的服务器了。</p><p>所以只要做下了解就好了。</p><p>使用方法为 ：<code>-XX:+UseSerialGC</code> ，使用该参数将会同时启用 Serial 和 Serial Old 。</p><br><h3 id="parnew-gc" tabindex="-1"><a class="header-anchor" href="#parnew-gc" aria-hidden="true">#</a> <span id="t22">ParNew GC</span></h3><p>如果说 Serial GC 是年轻代中的单线程垃圾收集器，那么 ParNew 收集器则 是 Serial 收集器的多线程版本。</p><p>ParNew 收集器除了采用并行回收的方式执行内存回收外，和 Serial GC 之间几乎没有任何区别，同样也是采用复制算法、&quot;Stop-the-World&quot;机制。</p><p>ParNew 只能收集年轻代，并且没有提供对应的老年代。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/ParNew GC工作示意图.png" alt="ParNew GC工作示意图"></p><p>开发中，使用 <code>-XX:+UseParNewGC</code> 手动指定使用 ParNew 收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。</p><p><code>XX:ParallelGCThreads</code> 限制线程数量，默认开启和 CPU 数据相同的线程数（例如 4 CPU，默认开启 4 线程；如果设置超过 CPU 核数，争抢资源切换会产生额外开销）。</p><br><h3 id="parallel-scavenge-gc" tabindex="-1"><a class="header-anchor" href="#parallel-scavenge-gc" aria-hidden="true">#</a> <span id="t23">Parallel Scavenge GC</span></h3><p>注意注意，个人认为这应该是第一个重头戏。。。。。因为它是 JDK8 的默认 GC。</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/SS25S1SAS5X1F5DSW4.png" alt=""></p><p>Parallel Scavenge GC 同样也采用了复制算法、并行回收和 &quot;Stop the World&quot; 机制。</p><p>和 ParNew GC 不同，Parallel Scavenge GC 的目标则是达到一个可控制的吞吐量(Throughput)，它也被称为吞吐量优先的垃圾收集器，并且它提供了自适应调节策略。</p><blockquote><p>高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</p><p>因此，常见在服务器环境中使用。例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序。</p></blockquote><p>JDK 6 时，Parallel 收集器在提供了用于执行老年代垃圾收集的 Parallel Old GC，用来代替老年代的 Serial Old GC。Parallel Old 收集器采用了标记-压缩算法，但同样也是基于并行回收和 STW 机制。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/Parallel Scavenge GC工作示意图.png" alt="Parallel Scavenge GC工作示意图"></p><p><strong>在 JDK 8 中，Parallel Scavenge GC 被采用为默认垃圾收集器。</strong></p><p>Parallel Scavenge GC 的配置参数较多，具体如下：</p>',61),G=n("<li><p><strong>-XX:+UseParallelGC</strong> ：开启 Parallel GC 进行年轻代垃圾回收，JDK 8 默认开启。只要开启默认激活老年代 Parallel Old GC .</p></li><li><p><strong>-XX:+UseParallelOldGC</strong> ：开启 Parallel Old GC 进行老年代垃圾回收，JDK 8 默认开启。只要开启默认激活年轻代 Parallel GC .</p></li><li><p><strong>-XX:ParallelGCThreads</strong> ：设置年轻代并行收集器的线程数。一般地，最好与 CPU 数量相等，以避免过多的线程数影响垃圾收集性能。</p><ul><li>在默认情况下，当 CPU 数量小于 8 个， ParallelGCThreads 的值等于 CPU 数量。</li><li>当 CPU 数量大于 8 个，ParallelGCThreads 的值等于 <strong>3+ [5*CPU_Count]/8</strong></li></ul></li><li><p><strong>-XX:MaxGCPauseMillis</strong> ：设置垃圾收集器最大停顿时间(即 STW 的时间)。单位是毫秒。</p><ul><li>为了尽可能地把停顿时间控制在 MaxGCPauseMills 以内，收集器在工作时会调整 Java 堆大小或者其他一些参数。</li><li>对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量。</li><li>该参数使用需谨慎。</li></ul></li><li><p><strong>-XX:GCTimeRatio</strong> ：垃圾收集时间占总时间的比例。用于衡量吞吐量的大小。</p><ul><li>取值范围(0,100)。默认值 99，也就是垃圾回收时间不超过 1%</li><li>与前一个 <code>-XX:MaxGCPauseMillis</code> 参数有一定矛盾性。暂停时间越长，Radio 参数就容易超过设定的比例。</li></ul></li>",5),S=t("ul",null,[t("li",null,"在这种模式下，年轻代的大小、Eden 和 Survivor 的比例、晋升老年代的对象年龄等参数会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点。"),t("li",null,"在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量(GCTimeRatio)和停顿时间(MaxGCPauseMills)，让虚拟机自己完成调优工作。")],-1),x=n('<br><h3 id="cms-gc" tabindex="-1"><a class="header-anchor" href="#cms-gc" aria-hidden="true">#</a> <span id="t24">CMS GC</span></h3><p>CMS GC 曾经作为跨时代的 GC，但是在 JDK 9 被 G1 替换，所以这里只是简单介绍。</p><p>JDK 1.5 时期，HotSpot 推出了一款在 <strong>强交互应用</strong> 中几乎可认为有划时代意义的垃圾收集器: CMS (Concurrent -Mark- Sweep) 收集器。</p><p>这款收集器是 HotSpot 虚拟机中第一款真正意义上的 <strong>并发收集器</strong> ，它第一次实现了让 <strong>垃圾收集线程与用户线程同时工作</strong> 。CMS 的垃圾收集算法采用标记-清除算法，并且也会 STW .</p><p>CMS 收集器的关注点是尽可能 <strong>缩短垃圾收集时用户线程的停顿时间</strong> 。停顿时间越短(低延迟)就越适合与用户交互的程序，良好的响应速度能提升用户体验。</p><p>目前很大一部分的 Java 应用集中在互联网站或者 B/S 系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/CMS GC工作示意图.png" alt="CMS GC工作示意图"></p><p>简单描述下 CMS GC 的四个步骤：</p><ol><li>初始阶段：短暂 STW，标记 GC Roots 能关联的对象</li><li>并发标记：从 GC Roots 的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</li><li>重新标记：修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。</li><li>并发清除：清除已死亡的对象，释放内存。由于不需要移动存活对象，所以可以并发进行。</li></ol><p><strong>由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的。</strong></p><br><h3 id="g1-gc" tabindex="-1"><a class="header-anchor" href="#g1-gc" aria-hidden="true">#</a> <span id="t25">G1 GC</span></h3><p>讲到垃圾收集器的第二个重头戏了。。。。</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/SJ4S5W1CAW511CS5.jpg" alt=""></p><p>G1（Garbage First）是一个面向局部收集和基于 Region 的内存布局形式的垃圾收集器， 在 JDK 7 时期发布，<strong>JDK 9 之后成为默认垃圾收集器</strong> 。</p><br><h4 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h4><p>先看这些优点：</p><ul><li>G1 同时具备 <strong>并发性和并行功能</strong> 。</li><li>G1 使用不同的 Region 来表示 Eden 区、Survivor 区、Old 区。和其他 GC 只负责一块不同，它同时兼顾年轻代和老年代。</li><li>G1 避免在整个 Java 堆中进行全区域的垃圾收集，而是跟踪各个 Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region，<strong>并且缩小了回收范围</strong> 。</li><li><strong>Region 为内存回收的基本单元，Region 之间使用复制算法，但是整体可以看作标记-压缩算法。</strong> 两种算法都可以避免碎片。</li></ul><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/IMG_008820200818150557.JPG" alt=""></p><p>再来看看 G1 的不足：</p><ul><li><strong>G1 需要在大内存环境才能发挥优势。至少 6-8 GB。</strong></li><li>在 GC 过程中，内存占用和额外消耗比 CMS 要高。</li></ul><br><h4 id="参数设置" tabindex="-1"><a class="header-anchor" href="#参数设置" aria-hidden="true">#</a> 参数设置</h4><ul><li>JDK 8 中，需要使用 <strong>-XX:UseG1GC</strong> 来开启 G1 GC。</li><li><strong>-XX:G1HeapRegionSize</strong> ：设置每个 Region 的大小，值必须为 2 的幂，范围在 1MB - 32MB 间。目标是根据最小的 Java 堆大小划分出约 2048 个区域。默认是堆内存的 1 /2000。</li><li><strong>-XX:MaxGCPauseMillis</strong> ：设置期望达到的最大 GC 停顿时间指标，默认值是 200ms。（JVM 会尽力实现，但不保证达到）</li><li><strong>-XX:ParallelGCThread</strong> ：设置 STW 工作线程数的值。最多设置为 8 。</li><li><strong>-XX:ConcGCThreads</strong> ：设置并发标记的线程数。将 n 设置为并行垃圾回收线程数（ParallelGCThreads）的 1/4 左右。</li><li><strong>-XX:InitiatingHeapOccupancyPercent</strong> ：设置触发并发 GC 周期的 Java 堆占用率阈值。超过此值，就触发 GC 。默认值是 45。</li></ul><p>G1 在最大限度上简化了配置，只需要开启 G1、设置堆最大内存、设置最大停顿空间三步即可完成全部配置。</p><br><h4 id="humongous-区" tabindex="-1"><a class="header-anchor" href="#humongous-区" aria-hidden="true">#</a> Humongous 区</h4><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/G1 Region分区示意图.png" alt="G1 Region分区示意图"></p><p><strong>G1 垃圾收集器还增加了一种新的内存区域，叫做 Humongous 内存区域，用于存储大对象，如果超过 1 .5 个 region，就放到 H 区。</strong></p><p>如果一个 H 区无法容纳这个大对象，就会寻找连续空闲空间，并设定为 H 区，若没有则会进行 GC。一般把 H 区视为老年代的一部分。</p><br><h4 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h4><p>主要步骤为：</p><ol><li>当年轻代 Eden 区要用尽时，G1 启动并行独占式垃圾收集。从 Eden 区移动到 Survivor 区或 Old 区。</li><li>当堆内存使用达到 45% 时，开始老年代并发标记过程。</li><li>标记完成后开始混合回收。G1 GC 会将老年代存活对象移动到空闲区；只会扫描和回收一小部分老年代 Region 区域。</li></ol><br><h2 id="jdk-9-之后的垃圾回收器" tabindex="-1"><a class="header-anchor" href="#jdk-9-之后的垃圾回收器" aria-hidden="true">#</a> <span id="t3">JDK 9 之后的垃圾回收器</span></h2><p>因为我目前使用的依然只是 JDK8，所以只对后续的垃圾回收器进行了解。</p><p>只要是后续比较重要的 ZGC。</p><p>ZGC 的目标是：在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停顿时间限制在十毫秒以内的低延迟。</p><p>《深入理解 Java 虚拟机》一书中这样定义 ZGC:</p><blockquote><p>ZGC 收集器是一款基于 Region 内存布局的，( 暂时)不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-压缩算法的，以低延迟为首要目标的一款垃圾收集器。</p></blockquote><p>ZGC 的工作过程可以分为 4 个阶段：<strong>并发标记 - 并发预备重分配 - 并发重分配 - 并发重映射等</strong> 。</p><p>ZGC 几乎在所有地方并发执行的，除了初始标记的是 STW 的。所以停顿时间几乎就耗费在初始标记上，这部分的实际时间是非常少的。</p><p>当然，目前还是实验阶段，什么时候正式发布再说。</p>',46);function P(y,v){const l=s("font");return o(),d("div",null,[c,t("ul",null,[t("li",null,[t("strong",null,[a(l,{color:"red"},{default:r(()=>[e("吞吐量：运行用户代码的时间占总运行时间的比例。总运行时间 = 程序的运行时间 + 内存回收的时间")]),_:1})])]),t("li",null,[t("strong",null,[a(l,{color:"red"},{default:r(()=>[e("暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间。")]),_:1})])]),t("li",null,[t("strong",null,[a(l,{color:"red"},{default:r(()=>[e("内存占用：Java 堆区所占的内存大小。")]),_:1})])]),g,h,u]),C,t("ul",null,[G,t("li",null,[t("p",null,[t("strong",null,[a(l,{color:"red"},{default:r(()=>[e("-XX:+UseAdaptiveSizePolicy")]),_:1})]),e(" ：设置 Parallel Scavenge 收集器具有自适应调节策略")]),S])]),x])}const m=i(p,[["render",P],["__file","GarbageCollection.html.vue"]]);export{m as default};
