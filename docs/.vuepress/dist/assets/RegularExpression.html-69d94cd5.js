import{_ as t,o as a,c as n,f as e}from"./app-0869a5be.js";const s={},o=e(`<div class="catalog"><ul><li><a href="#t0">本文概述</a></li><li><a href="#t1">正则表达式语法</a><ul><li><a href="#t11">匹配规则</a></li></ul></li><li><a href="#t2">使用方式以及代码示例</a></li><li><a href="#t3">在线测试网站</a></li><li><a href="#t4">常用表达式列举</a><ul><li><a href="#t41">纯数字、文本</a></li><li><a href="#t42">特殊需求</a></li></ul></li><li><a href="#te">参考文章</a></li></ul></div><h2 id="本文概述" tabindex="-1"><a class="header-anchor" href="#本文概述" aria-hidden="true">#</a> <span id="t0">本文概述</span></h2><p>以前用到正则，都是百度复制粘贴。这次准备弄点高级的，把复制粘贴的东西先准备好，以后找起来容易点。</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/XIKOEQKFKLOO3UE00.jpg" alt=""></p><p>基本包括下面几个：</p><blockquote><p>正则表达式语法、使用方式以及代码示例、在线测试网站、常用表达式列举</p></blockquote><br><h2 id="正则表达式语法" tabindex="-1"><a class="header-anchor" href="#正则表达式语法" aria-hidden="true">#</a> <span id="t1">正则表达式语法</span></h2><p>正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符。</p><p>正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</p><br><h3 id="匹配规则" tabindex="-1"><a class="header-anchor" href="#匹配规则" aria-hidden="true">#</a> <span id="t11">匹配规则</span></h3><p>下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p><table><thead><tr><th style="text-align:left;">字符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">\\</td><td style="text-align:left;">例如，&#39;\\n&#39; 匹配一个换行符，&#39;\\a&#39; 匹配字符 &#39;a&#39; (字符编码 97)。</td></tr><tr><td style="text-align:left;">^</td><td style="text-align:left;">匹配输入字符串的开始位置。</td></tr><tr><td style="text-align:left;">$</td><td style="text-align:left;">匹配输入字符串的结束位置。</td></tr><tr><td style="text-align:left;">{n}</td><td style="text-align:left;">n 是一个非负整数。匹配确定的 n 次。例如，&#39;o{2}&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但是能匹配 &quot;food&quot; 中的两个 o。</td></tr><tr><td style="text-align:left;">{n,}</td><td style="text-align:left;">n 是一个非负整数。至少匹配n 次。例如，&#39;o{2,}&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但能匹配 &quot;foooood&quot; 中的所有 o。&#39;o{1,}&#39; 等价于 &#39;o+&#39;。&#39;o{0,}&#39; 则等价于 &#39;o*&#39;。</td></tr><tr><td style="text-align:left;">{n,m}</td><td style="text-align:left;">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，&quot;o{1,3}&quot; 将匹配 &quot;fooooood&quot; 中的前三个 o。&#39;o{0,1}&#39; 等价于 &#39;o?&#39;。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td style="text-align:left;">.</td><td style="text-align:left;">匹配除换行符（\\n、\\r）之外的任何单个字符。要匹配包括 &#39;\\n&#39; 在内的任何字符，请使用像&quot;<strong>(.|\\n)</strong>&quot;的模式。</td></tr><tr><td style="text-align:left;">x|y</td><td style="text-align:left;">匹配 x 或 y。例如，&#39;z|food&#39; 能匹配 &quot;z&quot; 或 &quot;food&quot;。&#39;(z|f)ood&#39; 则匹配 &quot;zood&quot; 或 &quot;food&quot;。</td></tr><tr><td style="text-align:left;">[ABC]</td><td style="text-align:left;"><span style="color:red;"><strong>匹配  [...] 中的所有字符，大小写敏感</strong></span>。例如 <strong>[shiva]</strong> 匹配字符串中所有的 s h i v a 字母。</td></tr><tr><td style="text-align:left;">[^ABC]</td><td style="text-align:left;"><span style="color:red;"><strong>匹配除了  [...] 中的所有字符，大小写敏感</strong></span>。例如 <strong>[shiva]</strong> 匹配字符串中除了的 s h i v a 字母。</td></tr><tr><td style="text-align:left;">[A-Z]</td><td style="text-align:left;">[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</td></tr><tr><td style="text-align:left;">[^a-z]</td><td style="text-align:left;">负值字符范围。匹配任何不在指定范围内的任意字符。例如，&#39;[^a-z]&#39; 可以匹配任何不在 &#39;a&#39; 到 &#39;z&#39; 范围内的任意字符。</td></tr></tbody></table><br><p><strong>匹配获取</strong></p><table><thead><tr><th style="text-align:left;">字符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">(pattern)</td><td style="text-align:left;">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>\\(</code>”或“<code>\\)</code>”。</td></tr><tr><td style="text-align:left;">(?:pattern)</td><td style="text-align:left;">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“\`(</td></tr><tr><td style="text-align:left;">(?=pattern)</td><td style="text-align:left;">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“\`Windows(?=95</td></tr><tr><td style="text-align:left;">(?!pattern)</td><td style="text-align:left;">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“\`Windows(?!95</td></tr><tr><td style="text-align:left;">(?&lt;=pattern)</td><td style="text-align:left;">反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“\`(?&lt;=95</td></tr><tr><td style="text-align:left;">(?&lt;!pattern)</td><td style="text-align:left;">反向否定预查，与正向否定预查类拟，只是方向相反。例如“<code>(?”能匹配“</code>3.1Windows<code>”中的“</code>Windows<code>”，但不能匹配“</code>2000Windows<code>”中的“</code>Windows\`”。</td></tr></tbody></table><br><p><strong>匹配特定的字符种类</strong></p><table><thead><tr><th>字符</th><th>描述</th><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\\d</td><td>匹配一个数字字符。等价于 [0-9]。</td><td>\\D</td><td>匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td>\\s</td><td><span style="color:red;"><strong>匹配任何空白字符</strong></span>，包括空格、制表符、换页符等等。等价于 [\\f\\n\\r\\t\\v]。</td><td>\\S</td><td><span style="color:red;"><strong>匹配任何非空白字符</strong></span>。等价于 [^\\f\\n\\r\\t\\v]。</td></tr><tr><td>\\w</td><td><strong>匹配字母、数字、下划线</strong> 。等价于 [A-Za-z0-9_]。</td><td>\\W</td><td><strong>匹配非字母、数字、下划线</strong> 。等价于 [^A-Za-z0-9_]。</td></tr><tr><td>\\f</td><td>匹配一个换页符。等价于 \\x0c 和 \\cL。</td><td>\\n</td><td>匹配一个换行符。等价于 \\x0a 和 \\cJ。</td></tr><tr><td>\\r</td><td>匹配一个回车符。等价于 \\x0d 和 \\cM。</td><td></td><td></td></tr><tr><td>\\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置。例如， &#39;er\\b&#39; 可以匹配&quot;never&quot; 中的 &#39;er&#39;，但不能匹配 &quot;verb&quot; 中的 &#39;er&#39;。</td><td>\\B</td><td>匹配非单词边界。&#39;er\\B&#39; 能匹配 &quot;verb&quot; 中的 &#39;er&#39;，但不能匹配 &quot;never&quot; 中的 &#39;er&#39;。</td></tr></tbody></table><br><p><strong>重复匹配</strong></p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，&#39;zo+&#39; 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 {1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，&quot;do(es)?&quot; 可以匹配 &quot;do&quot; 或 &quot;does&quot; 。? 等价于 {0,1}。</td></tr></tbody></table><br><h2 id="使用方式以及代码示例" tabindex="-1"><a class="header-anchor" href="#使用方式以及代码示例" aria-hidden="true">#</a> <span id="t2">使用方式以及代码示例</span></h2><p><strong>JS</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
	str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><strong>Java</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> pattern <span class="token operator">=</span> <span class="token string">&quot;[a-z]&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">Pattern</span> r <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Matcher</span> m <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Matcher类的常用方法</strong> :</p><ul><li><code>matches()</code> : 返回整个目标字符串与Pattern是否匹配</li><li><code>find()</code> : 返回与Pattern匹配的下一个子串</li><li><code>group()</code> : 返回上一次与Pattern匹配的子串中的内容。group是针对()来说的，group(0)就是指的整个串，group(1) 指的是第一个括号里的东西，group(2)指的第二个括号里的东西</li><li><code>start()</code> : 返回上一次与Pattern匹配的子串在目标字符串中的开始位置。</li><li><code>end()</code> : 返回上一次与Pattern匹配的子串在目标字符串中的结束位置加1。</li></ul><br><h2 id="在线测试网站" tabindex="-1"><a class="header-anchor" href="#在线测试网站" aria-hidden="true">#</a> <span id="t3">在线测试网站</span></h2><p><a href="https://regexr-cn.com/" target="_blank">RegExr: 学习、构建 和 测试 正则表达式</a></p><p><a href="http://c.runoob.com/front-end/854" target="_blank">正则表达式在线测试 | 菜鸟工具</a></p><p><a href="https://www.bejson.com/othertools/regex_create/" target="_blank">正则表达式代码生成工具</a></p><p><a href="https://codejiaonang.com/#/" target="_blank">编程胶囊-打造学习编程的最好系统-正则题目练习</a></p><p><a href="https://jex.im/regulex/#!flags=&amp;re=^(a|b)*%3F%24" target="_blank">Regulex：JavaScript 正则表达式图形化表示</a></p><br><h2 id="常用表达式列举" tabindex="-1"><a class="header-anchor" href="#常用表达式列举" aria-hidden="true">#</a> <span id="t4">常用表达式列举</span></h2><h3 id="纯数字、文本" tabindex="-1"><a class="header-anchor" href="#纯数字、文本" aria-hidden="true">#</a> <span id="t41">纯数字、文本</span></h3><table><thead><tr><th>需求</th><th>表达式</th><th>需求</th><th>表达式</th></tr></thead><tbody><tr><td>数字</td><td>^[0-9]*$</td><td>n位的数字</td><td>^\\d{n}$</td></tr><tr><td>非负浮点数</td><td>^\\d+(.\\d+)?$</td><td>汉字</td><td>^[\\u4e00-\\u9fa5]{0,}$</td></tr><tr><td>英文和数字</td><td>^[A-Za-z0-9]+$</td><td>英文字符串</td><td>^[A-Za-z]+$</td></tr><tr><td>中文、英文、数字包括下划线</td><td>^[\\u4E00-\\u9FA5A-Za-z0-9_]+$</td><td></td><td></td></tr></tbody></table><br><h3 id="特殊需求" tabindex="-1"><a class="header-anchor" href="#特殊需求" aria-hidden="true">#</a> <span id="t42">特殊需求</span></h3><ul><li><p>Email地址：<code>^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</code></p></li><li><p>手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$</code></p></li><li><p>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：<code>(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)</code></p></li><li><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p></li><li><p>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：<code>^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code></p></li><li><p>腾讯QQ号：<code>[1-9][0-9]{4,}</code></p></li><li><p>IPv4地址：<code>((2(5[0-5]|[0-4]\\d))|[0-1]?\\d{1,2})(\\.((2(5[0-5]|[0-4]\\d))|[0-1]?\\d{1,2})){3}</code></p></li></ul><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="te">参考文章</span></h2><p><a href="https://www.pdai.tech/md/develop/regex/dev-regex-all.html" target="_blank">正则表达式 - 知识点学习 | Java 全栈知识体系 (pdai.tech)</a></p><p><a href="https://www.runoob.com/regexp/regexp-tutorial.html" target="_blank">正则表达式 – 教程 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html" target="_blank">正则表达式手册 (oschina.net)</a></p><p><a href="https://www.bilibili.com/video/BV19t4y1y7qP?from=search&amp;seid=14456686619580943767" target="_blank">正则表达式30分钟入门40分钟进阶（绝对能学会）_哔哩哔哩_bilibili</a></p>`,52),d=[o];function l(r,p){return a(),n("div",null,d)}const c=t(s,[["render",l],["__file","RegularExpression.html.vue"]]);export{c as default};
