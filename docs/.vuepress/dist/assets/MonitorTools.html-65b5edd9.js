import{_ as t,o as a,c as e,f as n}from"./app-28d4f173.js";const s={},l=n(`<div class="catalog"><ul><li><a href="#t0">本文概述</a></li><li><a href="#t1">故障处理命令</a><ul><li><a href="#t11">jps:虚拟机进程状况工具</a></li><li><a href="#t12">jstat:虚拟机统计信息监视工具</a></li><li><a href="#t13">jinfo:Java 配置信息工具</a></li><li><a href="#t14">jmap:Java 内存映像工具</a></li></ul></li><li><a href="#t2">可视化处理工具</a></li></ul></div><h2 id="本文概述" tabindex="-1"><a class="header-anchor" href="#本文概述" aria-hidden="true">#</a> <span id="t0">本文概述</span></h2><p>本文就不详细介绍了，也就列举一下常用的命令和工具。</p><br><h2 id="故障处理命令" tabindex="-1"><a class="header-anchor" href="#故障处理命令" aria-hidden="true">#</a> <span id="t1">故障处理命令</span></h2><h3 id="jps-虚拟机进程状况工具" tabindex="-1"><a class="header-anchor" href="#jps-虚拟机进程状况工具" aria-hidden="true">#</a> <span id="t11">jps:虚拟机进程状况工具</span></h3><p>jps（JVM Process Tool）虚拟机进程状况工具，它的功能和 Unix 的 ps 命令类似：</p><blockquote><p><strong>可以列出正在运行的虛拟机进程，并显示虚拟机执行主类名称（Main Class，main() 函数所在的类），以及这些进程的本地虛拟机唯一 ID ( LVMID， Local Virtual Machine Identifier) 。</strong></p><p>而对本地虚拟机而言，LVMID 和进程 ID 是一致的。</p></blockquote><p>就像 ps 一样，它绝对是高频使用的命令。</p><p>使用方式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jps <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>hostid<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可选参数如下：</p><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">-q</td><td style="text-align:left;">只输出 LVMID、缺省主类的名称</td></tr><tr><td style="text-align:center;">-m</td><td style="text-align:left;">输出虚拟机进程启动时传递给主类 main() 函数的参数</td></tr><tr><td style="text-align:center;">-l</td><td style="text-align:left;">输出主类的全名，如果进程执行的是 JAR 包，则输出 JAR 路径</td></tr><tr><td style="text-align:center;">-v</td><td style="text-align:left;">输出虚拟机进程启动时的 JVM 参数</td></tr></tbody></table><p>使用案例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>qw<span class="token operator">&gt;</span>jps
<span class="token number">1040</span> Launcher
<span class="token number">11424</span> Jps
<span class="token number">14496</span>
<span class="token number">14716</span> RemoteMavenServer
<span class="token number">4332</span> SyncTest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="jstat-虚拟机统计信息监视工具" tabindex="-1"><a class="header-anchor" href="#jstat-虚拟机统计信息监视工具" aria-hidden="true">#</a> <span id="t12">jstat:虚拟机统计信息监视工具</span></h3><blockquote><p><strong>jstat（ JVM Statistics Monitoring Tool ）是用于监视虚拟机各种运行状态信息的命令行工具。</strong></p></blockquote><p>它可以显示本地或者远程虚拟机进程中的类加载、内存、垃圾收集、即时编译等运行时数据。</p><p>在没有 GUI 图形界面、只提供了纯文本控制台环境的服务器上，它将是运行期定位虚拟机性能问题的常用工具。</p><p>参数如下：</p><table><thead><tr><th style="text-align:center;">选项</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:center;">-class</td><td>监视类加载、卸载数量、总空间以及类装载所耗费的时间</td></tr><tr><td style="text-align:center;">-gc</td><td>监视 Java 堆状况，包括 Eden 区、2 个 Survivor 区、老年代、永久代等的容量，已用空间，垃圾收集时间合计等信息</td></tr><tr><td style="text-align:center;">-gccapacity</td><td>监视内容与 -gc 基本相同，但输出主要关注 Java 堆各个区域使用到的最大、最小空间</td></tr><tr><td style="text-align:center;">-gcutil</td><td>监视内容与 -gc 基本相同，但输出主要关注已使用空间占总空间的百分比</td></tr><tr><td style="text-align:center;">-gccause</td><td>与 -gcutil 功能一样， 但是会额外输出导致上一次垃圾收集产生的原因</td></tr><tr><td style="text-align:center;">-gcnew</td><td>监视新生代垃圾收集状况</td></tr><tr><td style="text-align:center;">-gcnewcapacity</td><td>监视内容与 -gcnew 基本相同，输出主要关注使用到的最大、最小空间</td></tr><tr><td style="text-align:center;">-gcold</td><td>监视老年代垃圾收集状况</td></tr><tr><td style="text-align:center;">-gcoldcapacity</td><td>监视内容与 -gcold 基本相同，输出主要关注使用到的最大、最小空间</td></tr><tr><td style="text-align:center;">-compiler</td><td>输出即时编译器编译过的方法、耗时等信息</td></tr><tr><td style="text-align:center;">-printcompilation</td><td>输出已经被即时编译的方法</td></tr></tbody></table><p>详细的就不讲了，用到了再百度吧，，</p><br><h3 id="jinfo-java-配置信息工具" tabindex="-1"><a class="header-anchor" href="#jinfo-java-配置信息工具" aria-hidden="true">#</a> <span id="t13">jinfo:Java 配置信息工具</span></h3><blockquote><p>jinfo ( Configuration Info for Java) 的作用是实时查看和调整虚拟机各项参数。</p></blockquote><p>使用 jps 命令的 -v 参数可以查看虚拟机启动时显式指定的参数列表，但如果想知道未被显式指定的参数的系统默认值，除了去找资料外，就只能使用 jinfo 的 -flag 选项进行查询了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jinfo <span class="token parameter variable">-flag</span> 参数 pid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>qw<span class="token operator">&gt;</span>jinfo <span class="token parameter variable">-flag</span> ParallelGCThreads <span class="token number">16376</span>
<span class="token parameter variable">-XX:ParallelGCThreads</span><span class="token operator">=</span><span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="jmap-java-内存映像工具" tabindex="-1"><a class="header-anchor" href="#jmap-java-内存映像工具" aria-hidden="true">#</a> <span id="t14">jmap:Java 内存映像工具</span></h3><blockquote><p><strong>jmap ( Memory Map for Java)命令用于生成堆转储快照( 一般称为 heapdump 或 dump 文件 )。</strong></p></blockquote><p>jmap 的作用并不仅仅是为了获取堆转储快照，它还可以查询 finalize 执行队列、Java 堆和方法区的详细信息，如空间使用率、当前用的是哪种收集器等。</p><p>jmap 的主要选项：</p><table><thead><tr><th style="text-align:center;">选项</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:center;">-dump</td><td>生成 Java 堆转储快照。格式为 <code>-dump:[live,]format=b,file=&lt;filename&gt;</code>，其中 live 子参数说明是否只 dump 出存活的对象</td></tr><tr><td style="text-align:center;">-finalizerinfo</td><td>显示在 F-Queue 中等待 Finalizer 线程执行 finalize 方法的对象。只在 Linux/Solaris 平台下有效</td></tr><tr><td style="text-align:center;">-heap</td><td>显示 Java 堆详细信息，如使用哪种回收器、参数配置、分代状况等。只在 Linux/Solaris 平台下有效</td></tr><tr><td style="text-align:center;">-histo</td><td>显示堆中对象统计信息，包括类、实例数量、合计容量</td></tr><tr><td style="text-align:center;">-permstat</td><td>以 ClassLoader 为统计口径显示永久代内存状态。只在 Linux/Solaris 平台下有效</td></tr><tr><td style="text-align:center;">-F</td><td>当虚拟机进程对-dump 选项没有响应时，可使用这个选项强制生成 dump 快照。只在 Linux/Solaris 平台下有效</td></tr></tbody></table><p>使用示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>qw<span class="token operator">&gt;</span>jmap -dump:live,format<span class="token operator">=</span>b,file<span class="token operator">=</span>myjmapfile.out <span class="token number">15488</span>
Heap dump <span class="token function">file</span> created
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="可视化处理工具" tabindex="-1"><a class="header-anchor" href="#可视化处理工具" aria-hidden="true">#</a> <span id="t2">可视化处理工具</span></h2><ul><li>VisualVM:多合-故障处理工具</li><li>JHSDB：基于服务性代理的调试工具</li><li>JConsole: Java 监 视与管理控制台</li><li>Java Mission Control:可持续在线的监控工具</li></ul>`,41),i=[l];function r(d,p){return a(),e("div",null,i)}const c=t(s,[["render",r],["__file","MonitorTools.html.vue"]]);export{c as default};
