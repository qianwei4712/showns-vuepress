import{_ as t,r as c,o as l,c as o,a,w as e,d as p,f as n}from"./app-0869a5be.js";const i={},u=n('<div class="catalog"><ul><li><a href="#t0">前言</a></li><li><a href="#t1">使用场景</a></li><li><a href="#t2">WeakHashMap 特点</a><ul><li><a href="#t21">实现原理</a></li><li><a href="#t22">删除过期条目</a></li><li><a href="#t23">ReferenceQueue 的作用</a></li></ul></li><li><a href="#te">参考文章</a></li></ul></div><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> <span id="t0">前言</span></h2><p>阅读 Java 版本为 <strong>1.8.0.25</strong>。</p><p><em>WeakHashMap</em> 是一个很特殊的集合类。</p><p><strong>在不对 <em>WeakHashMap</em> 进行任何操作的情况下，它的键值对也会被 GC 回收，因为它的 key 是弱引用。</strong></p><p>这种奇葩 Map 有啥用呢，其实在缓存情况下，还真有点用。</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/NM29O3L8D9OFYYR5LSQ.jpg" alt=""></p><p>源码位置先放上，因为这个类和 HashMap 其实类似，所有我觉得没必要特别仔细，知道特性就可以了：</p><ul><li>WeakHashMap 源码：<a href="https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/WeakHashMap.java" target="_blank">https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/WeakHashMap.java</a></li></ul><p>关于什么是弱引用，特地去查了点资料，可以看看：<a href="https://blog.csdn.net/m0_46144826/article/details/108246718" target="_blank">弱引用是什么，和其他引用有啥区别？</a></p><p>内部实现的话，不会讲很细，和 HashMap 非常类似，可以看看： <a href="https://blog.csdn.net/m0_46144826/article/details/106300438" target="_blank">侃晕面试官的 HashMap 源码分析 - 这真不是我吹</a></p><br><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> <span id="t1">使用场景</span></h2><p><strong><em>WeekHashMap</em> 的这个特点特别适用于需要缓存的场景</strong>。</p><p>在缓存场景下，由于内存是有限的，不能缓存所有对象；对象缓存命中可以提高系统效率，但缓存 MISS 也不会造成错误，因为可以通过计算重新得到。</p><br><h2 id="weakhashmap-特点" tabindex="-1"><a class="header-anchor" href="#weakhashmap-特点" aria-hidden="true">#</a> <span id="t2">WeakHashMap 特点</span></h2><h3 id="弱引用实现原理" tabindex="-1"><a class="header-anchor" href="#弱引用实现原理" aria-hidden="true">#</a> <span id="t21">弱引用实现原理</span></h3><p>最基础的表象就是：</p><blockquote><p>即使在 WeakHashMap 实例上进行同步，也没有调用其变异器方法， size 方法可以随时间返回较小的值</p><p>isEmpty 方法可以先返回 false ，然后再返回 true</p><p>对于给定的键，containsKey 方法可能先返回 true ，再返回 false</p><p>对于 get 方法返回给定键的值，但后来返回 null</p></blockquote><p>因为垃圾收集器可能随时丢弃 key，所以 WeakHashMap 可能表现为未知线程静默地删除条目。</p><p>这只是表现出来的特点，原理其实就是弱引用。</p>',22),r=n(`<p>其实最底层的实现就这么一段：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>
        <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>
        <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token class-name">V</span> value<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>
        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>WeakHashMap 的 <code>Entry</code> 继承了 <strong>WeakReference</strong> ，而 <strong>WeakReference</strong> 看名字就知道是弱引用。</p><br><h3 id="删除过期条目" tabindex="-1"><a class="header-anchor" href="#删除过期条目" aria-hidden="true">#</a> <span id="t22">删除过期条目</span></h3><p><code> private void expungeStaleEntries()</code> 作用是删除过期条目。</p><p>在以下方法中进行了调用：</p><ul><li><code>private Entry&lt;K,V&gt;[] getTable()</code> 在删除旧条目后返回表，每次增删改查都会调用这个方法</li><li><code>public int size()</code> 查询集合大小</li><li><code>void resize(int newCapacity)</code> 扩容方法</li></ul><p>意思就是，基本 <strong>WeakHashMap</strong> 每次操作都会先删除过期条目。</p><p>先贴代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">expungeStaleEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> x<span class="token punctuation">;</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
                    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> x<span class="token punctuation">;</span>
                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> prev <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> prev<span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> e<span class="token punctuation">)</span>
                            table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">;</span>
                        <span class="token keyword">else</span>
                            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
                        <span class="token comment">// Must not null out e.next;</span>
                        <span class="token comment">// stale entries may be in use by a HashIterator</span>
                        e<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// Help GC</span>
                        size<span class="token operator">--</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    prev <span class="token operator">=</span> p<span class="token punctuation">;</span>
                    p <span class="token operator">=</span> next<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码就不一行一行解释了，这个方法的作用流程是：</p><ol><li>遍历 <code>queue（已清除的WeakEntries的参考队列）</code></li><li>如果存在相同 key，则删除该 key</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//queue 保存的是“已被GC清除的”“弱引用的键”。</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以这也是 WeakHashMap 的另一个特点：</p>`,15),k=n(`<br><h3 id="referencequeue-的作用" tabindex="-1"><a class="header-anchor" href="#referencequeue-的作用" aria-hidden="true">#</a> <span id="t23">ReferenceQueue 的作用</span></h3><p>当 gc（垃圾回收线程）准备回收一个对象时，如果发现它还仅有软引用(或弱引用，或虚引用)指向它</p><p>就会在回收该对象之前，把这个软引用（或弱引用，或虚引用）加入到与之关联的引用队列（ReferenceQueue）中。</p><p>如果一个软引用（或弱引用，或虚引用）对象本身在引用队列中，就说明该引用对象所指向的对象被回收了。</p><p><code>WeakHashMap Entry</code> 条目构造方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token doc-comment comment">/**
         * 创建新条目
         */</span>
        <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>hash  <span class="token operator">=</span> hash<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>next  <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用父类 WeakReference 构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Reference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 创建引用给定对象的新的弱引用。
     * 新引用未注册到任何队列。
     * <span class="token keyword">@param</span> <span class="token parameter">referent</span> 新的弱引用将引用
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">WeakReference</span><span class="token punctuation">(</span><span class="token class-name">T</span> referent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>referent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 创建引用给定对象并在给定队列中注册的新的弱引用。
     * <span class="token keyword">@param</span> <span class="token parameter">referent</span> 新的弱引用将引用
     * <span class="token keyword">@param</span> <span class="token parameter">q</span> 要注册参考的队列，如果不需要注册， 则为 null
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">WeakReference</span><span class="token punctuation">(</span><span class="token class-name">T</span> referent<span class="token punctuation">,</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>referent<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终方法的构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token class-name">T</span> referent<span class="token punctuation">,</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>referent <span class="token operator">=</span> referent<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">ReferenceQueue</span><span class="token punctuation">.</span><span class="token constant">NULL</span> <span class="token operator">:</span> queue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，在 GC 回收弱引用的时候，会将弱引用加入引用队列，这也是 WeakReference 可以删除过期条目的实现基础。</p><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="te">参考文章</span></h2><p><a href="https://www.pdai.tech/md/java/collection/java-map-WeakHashMap.html" target="_blank">https://www.pdai.tech/md/java/collection/java-map-WeakHashMap.html</a></p><p><a href="https://www.cnblogs.com/CarpenterLee/p/5544598.html" target="_blank">https://www.cnblogs.com/CarpenterLee/p/5544598.html</a></p><p><a href="https://blog.csdn.net/wangshihui512/article/details/51611191" target="_blank">https://blog.csdn.net/wangshihui512/article/details/51611191</a></p><p><a href="https://www.cnblogs.com/nullzx/p/7406151.html" target="_blank">https://www.cnblogs.com/nullzx/p/7406151.html</a></p>`,18);function d(v,m){const s=c("font");return l(),o("div",null,[u,a(s,{color:"red"},{default:e(()=>[p("当发生 GC 时，弱引用对象总会被回收，因此弱引用也可以用于缓存。")]),_:1}),r,a(s,{color:"red"},{default:e(()=>[p("一旦这样的 key 被丢弃，它就永远不会被重新创建，所以不可能在稍后的 WeakHashMap 中查找该 key。")]),_:1}),k])}const b=t(i,[["render",d],["__file","WeakHashMap.html.vue"]]);export{b as default};
