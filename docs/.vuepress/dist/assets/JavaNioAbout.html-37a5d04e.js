import{_ as p,r as e,o as c,c as o,b as n,d as a,a as t,f as l}from"./app-0869a5be.js";const i={},u=l(`<div class="catalog"><ul><li><a href="#%E5%BC%80%E5%9C%BA%E5%BA%9F%E8%AF%9D">开场废话</a></li><li><a href="#NIO%E4%BB%8B%E7%BB%8D">NIO 简单介绍</a><ul><li><a href="#NIO%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B">NIO 代码示例</a></li><li><a href="#%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E7%AE%80%E4%BB%8B">执行流程简介</a></li></ul></li><li><a href="#Buffer">Buffer 缓冲区详解</a></li><li><a href="#Channel">Channel 通道详解</a></li><li><a href="#Selector">Selector 选择器详解</a></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></div><h2 id="开场废话" tabindex="-1"><a class="header-anchor" href="#开场废话" aria-hidden="true">#</a> <span id="开场废话">开场废话</span></h2><p><code>2022.04.05</code></p><p>Java 为了解决 BIO 中，<code>serverSocket.accept()</code> 阻塞的问题，在 JDK1.4 推出了 NIO 弥补不足。</p><p>Java NlO (New lO）也有人称之为 java non-blocking IO。<strong>NIO 可以完美得替代原本的 IO API，但是实现方式完全不一样。</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NIO 可以理解为非阻塞IO，传统IO 的read和write只能阻塞执行，线程在读写期间不能干其他事倩，比如调用socket. read(）时，如果服务器一直没有数据传输过来，线程就一直阻塞;

而 NIO 中可以配置socket为非阻塞模式。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="nio-简单介绍" tabindex="-1"><a class="header-anchor" href="#nio-简单介绍" aria-hidden="true">#</a> <span id="NIO介绍">NIO 简单介绍</span></h2><p>标准IO 是对字节流的读写，在进行IO之前，首先创建一个流对象，流对象进行读写操作都是按字节 ，一个字节一个字节的来读或写。</p><p><strong>NIO 把IO抽象成块</strong> ，类似磁盘的读写，每次IO操作的单位都是一个块，块被读入内存之后就是一个byte[]，NIO一次可以读或写多个字节，效率也高很多。</p><p>NIO有三大核心部分：<code>Channel（通道）</code>,<code>Buffer(缓冲区）</code>,<code>Selector（选择器）</code></p><blockquote><p><strong>数据总是从 Channel(通道）读取到 Buffer(缓冲区）中，或者从缓冲区写入到通道中。</strong></p><p><strong>Selector(选择器）用于监听多个通道的事件（比如：连接请 求，数据到达等），因此使用单个线程就可以监听多个客户端通道</strong></p></blockquote><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/image-20220407234615866.png" alt=""></p><br><h4 id="buffer-缓冲区" tabindex="-1"><a class="header-anchor" href="#buffer-缓冲区" aria-hidden="true">#</a> Buffer 缓冲区</h4><p>发送给一个通道的所有数据都必须首先放到缓冲区中，同样地，从通道中读取的任何数据都要先读到缓冲区中。</p><p>也就是说，不会直接对通道进行读写数据，而是要先经过缓冲区。</p><p>缓冲区实质上是一个数组，但它不仅仅是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读/写进程。</p><br><h4 id="channel-通道" tabindex="-1"><a class="header-anchor" href="#channel-通道" aria-hidden="true">#</a> Channel 通道</h4><p>通道 Channel 是对原 I/O 包中的流的模拟，可以通过它读取和写入数据。</p><p>通道与流的不同之处在于，流只能在一个方向上移动(一个流必须是 InputStream 或者 OutputStream 的子类)，<strong>而通道是双向的，可以用于读、写或者同时用于读写。</strong></p><p>通道包括以下类型:</p><ul><li>FileChannel: 从文件中读写数据；</li><li>DatagramChannel: 通过 UDP 读写网络中数据；</li><li>SocketChannel: 通过 TCP 读写网络中数据；</li><li>ServerSocketChannel: 可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel。</li></ul><br><h4 id="selector-选择器" tabindex="-1"><a class="header-anchor" href="#selector-选择器" aria-hidden="true">#</a> Selector 选择器</h4><p>Selector 是一个 java NIO组件，可以能够检查一个或多个NIO通道，并确定哪些通道已经准备好进行读取或写入。</p><p>这样，一个单独的线程可以管理多个channel，从而管理多个网络连接，提高效率</p><br><h3 id="nio-代码示例" tabindex="-1"><a class="header-anchor" href="#nio-代码示例" aria-hidden="true">#</a> <span id="NIO代码示例">NIO 代码示例</span></h3><p>服务端代码如下，主线程，启动监听：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">//记录套接字通道事件</span>
    <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//定义一个异步socket对象</span>
    <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置异步</span>
    ssc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取socket对象</span>
    <span class="token class-name">ServerSocket</span> socket <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//绑定端口</span>
    <span class="token class-name">InetSocketAddress</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    socket<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将事件注册selector对象内</span>
    ssc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;端口注册完毕!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//查询事件如果一个事件都没有就阻塞</span>
        selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//定义一个byte缓冲区来存储收发的数据</span>
        <span class="token class-name">ByteBuffer</span> echoBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//处理数据</span>
        <span class="token function">accept</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> echoBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据处理方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//处理数据</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Selector</span> selector<span class="token punctuation">,</span> <span class="token class-name">ByteBuffer</span> echoBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SocketChannel</span> sc<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//此循环遍例所有产生的事件</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key <span class="token operator">:</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果产生的事件为接受客户端连接(当有客户端连接服务器的时候产生)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">readyOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//定义一个服务器socket通道</span>
                <span class="token class-name">ServerSocketChannel</span> subssc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//将临时socket对象实例化为接收到的客户端的socket</span>
                sc <span class="token operator">=</span> subssc<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//将客户端的socket设置为异步</span>
                sc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//将客户端的socket的读取事件注册到事件选择器中</span>
                sc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//将本此事件从迭带器中删除</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有新连接:&quot;</span> <span class="token operator">+</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//如果产生的事件为读取数据(当已连接的客户端向服务器发送数据的时候产生)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">readyOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//将本次事件删除</span>
                selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//临时socket对象实例化为产生本事件的socket</span>
                sc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//定义一个用于存储byte数据的流对象</span>
                <span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//先将客户端的数据清空</span>
                echoBuffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//a为读取到数据的长度</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">//循环读取所有客户端数据到byte缓冲区中,当有数据的时候read函数返回数据长度</span>
                    <span class="token comment">//NIO会自动的将缓冲区一次容纳不下的自动分段</span>
                    <span class="token keyword">int</span> readInt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readInt <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>echoBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">//如果获得数据长度比缓冲区大小小的话</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>readInt <span class="token operator">&lt;</span> echoBuffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">//建立一个临时byte数组,将齐长度设为获取的数据的长度</span>
                            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> readByte <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>readInt<span class="token punctuation">]</span><span class="token punctuation">;</span>
                            <span class="token comment">//循环向此临时数组中添加数据</span>
                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> readInt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                readByte<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> echoBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token comment">//将此数据存入byte流中</span>
                            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>readByte<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token comment">//将读取到的数据写入到byte流对象中</span>
                            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>echoBuffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token comment">//将缓冲区清空，以便进行下一次存储数据</span>
                        echoBuffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">//当循环结束时byte流中已经存储了客户端发送的所有byte数据</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;接收数据: &quot;</span> <span class="token operator">+</span> bos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//当客户端在读取数据操作执行之前断开连接会产生异常信息</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//将本socket的事件在选择器中删除</span>
                    key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//获取byte流对象的标准byte对象</span>
                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//建立这个byte对象的ByteBuffer,并将数据存入</span>
                <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                byteBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//向客户端写入收到的数据</span>
                <span class="token function">write</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">,</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//关闭客户端连接</span>
                sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//将本socket的事件在选择器中删除</span>
                key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;连接结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=============================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据回写方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//写数据</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> echoBuffer<span class="token punctuation">,</span> <span class="token class-name">SocketChannel</span> sc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//将缓冲区复位以便于进行其他读写操作</span>
    echoBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//向客户端写入数据,数据为接受到数据</span>
        sc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>echoBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;返回数据: &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>echoBuffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">NioClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;66666&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//启动连接</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> mssage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//定义一个记录套接字通道事件的对象</span>
        <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//定义一个服务器地址的对象</span>
        <span class="token class-name">SocketAddress</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//定义异步客户端</span>
        <span class="token class-name">SocketChannel</span> client <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将客户端设定为异步</span>
        client<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//在轮讯对象中注册此客户端的读取事件(就是当服务器向此客户端发送数据的时候)</span>
        client<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//定义用来存储发送数据的byte缓冲区</span>
        <span class="token class-name">ByteBuffer</span> sendbuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>mssage<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//定义用于接收服务器返回的数据的缓冲区</span>
        <span class="token class-name">ByteBuffer</span> readBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>mssage<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将数据put进缓冲区</span>
        sendbuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>mssage<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将缓冲区各标志复位,因为向里面put了数据标志被改变要想从中读取数据发向服务器,就要复位</span>
        sendbuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//向服务器发送数据</span>
        client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sendbuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送数据: &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>sendbuffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//利用循环来读取服务器发回的数据</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果客户端连接没有打开就退出循环</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>client<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//此方法为查询是否有事件发生如果没有就阻塞,有的话返回事件数量</span>
            <span class="token keyword">int</span> shijian <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//如果没有事件返回循环</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>shijian <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> readBuffer<span class="token punctuation">,</span> client<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际发送数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//发送数据</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Selector</span> selector<span class="token punctuation">,</span> <span class="token class-name">ByteBuffer</span> readBuffer<span class="token punctuation">,</span> <span class="token class-name">SocketChannel</span> client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//遍例所有的事件</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key <span class="token operator">:</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//删除本次事件</span>
            selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//如果本事件的类型为read时,表示服务器向本客户端发送了数据</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//将临时客户端对象实例为本事件的socket对象</span>
                <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//定义一个用于存储所有服务器发送过来的数据</span>
                <span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//将缓冲区清空以备下次读取</span>
                readBuffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//此循环从本事件的客户端对象读取服务器发送来的数据到缓冲区中</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>readBuffer<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//将本次读取的数据存到byte流中</span>
                    bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>readBuffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//将缓冲区清空以备下次读取</span>
                    readBuffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//如果byte流中存有数据</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//建立一个普通字节数组存取缓冲区的数据</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;接收数据: &quot;</span> <span class="token operator">+</span> bos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//关闭客户端连接,此时服务器在read读取客户端信息的时候会返回-1</span>
                    client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;连接关闭!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="执行流程简介" tabindex="-1"><a class="header-anchor" href="#执行流程简介" aria-hidden="true">#</a> <span id="执行流程简介">执行流程简介</span></h3><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/IO 分类及区别.png" alt=""></p><br><h2 id="buffer-缓冲区详解" tabindex="-1"><a class="header-anchor" href="#buffer-缓冲区详解" aria-hidden="true">#</a> <span id="Buffer">Buffer 缓冲区详解</span></h2><p>抽象类 <code>java.nio.Buffer</code> 是所有 NIO 缓冲区实现类的父类。</p><p>缓冲区包括以下类型： <code>ByteBuffer</code>、<code>CharBuffer</code>、<code>ShortBuffer</code>、<code>IntBuffer</code>、<code>LongBuffer</code>、<code>FloatBuffer</code>、<code>DoubleBuffer</code></p><p>下面以 <strong>ByteBuffer</strong> 为例，缓冲区的创建方法用的是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建一个容量为capacity的 ByteBuffer 对象</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ByteBuffer</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HeapByteBuffer</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后还是回到 <strong>ByteBuffer</strong> 的构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用给定的标记、位置、限制、容量、后备数组和数组偏移量创建一个新缓冲区</span>
<span class="token comment">// package-private</span>
<span class="token class-name">ByteBuffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> mark<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> lim<span class="token punctuation">,</span> <span class="token keyword">int</span> cap<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hb<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> lim<span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hb <span class="token operator">=</span> hb<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>offset <span class="token operator">=</span> offset<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Buffer中的重要概念和字段：</p><ul><li><p><strong>容量（capacity)</strong>：作为一个内存块，Buffer具有一定的固定大小，也称为”容量”，缓冲区容量不能为负，并且创建后不能更改（<strong>因为它是数组</strong>）。</p></li><li><p><strong>限制（limit)</strong>：表示缓冲区中可以操作数据的大小（limit后数据不能进行读写）。缓冲区的限制不能为负，并且不能大于其容量。</p><ul><li><strong>写入模式，限制等于buffer 的容量。读取模式下，limit 等于写入的数据量。</strong></li></ul></li><li><p><strong>位置(position)</strong>：下一个要读取或写入的数据的索引。缓冲区的位置不能为负，并且不能大于其限制</p></li><li><p><strong>标记（mark）与重置（reset)</strong>：标记是一个索弓l，通过Buffer中的mark(）方法指定Buffer中一个特定的 position，之后可以通过调用reset(）方法恢复到这个position。</p><ul><li><strong>标记、位置、限制、容量遵守以 T 不变式：<code>0&lt;=mark&lt;=position&lt;=limit&lt;=capacity</code></strong></li></ul></li></ul><h3 id="缓冲区流程图解" tabindex="-1"><a class="header-anchor" href="#缓冲区流程图解" aria-hidden="true">#</a> 缓冲区流程图解</h3><ul><li>capacity: 最大容量；</li><li>position: 当前已经读写的字节数；</li><li>limit: 还可以读写的字节数。</li></ul><p>状态变量的改变过程举例:</p><p>① 新建一个大小为 8 个字节的缓冲区，此时 position 为 0，而 limit = capacity = 8。capacity 变量不会改变，下面的讨论会忽略它。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/1bea398f-17a7-4f67-a90b-9e2d243eaa9a.png" alt=""></p><p>② 从输入通道中读取 5 个字节数据写入缓冲区中，此时 position 移动设置为 5，limit 保持不变。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/80804f52-8815-4096-b506-48eef3eed5c6.png" alt=""></p><p>③ 在将缓冲区的数据写到输出通道之前，需要先调用 flip() 方法，这个方法将 limit 设置为当前 position，并将 position 设置为 0。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/952e06bd-5a65-4cab-82e4-dd1536462f38.png" alt=""></p><p>④ 从缓冲区中取 4 个字节到输出缓冲中，此时 position 设为 4。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/b5bdcbe2-b958-4aef-9151-6ad963cb28b4.png" alt=""></p><p>⑤ 最后需要调用 clear() 方法来清空缓冲区，此时 position 和 limit 都被设置为最初位置。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/67bf5487-c45d-49b6-b9c0-a058d8c68902.png" alt=""></p><h3 id="buffer-常见方法" tabindex="-1"><a class="header-anchor" href="#buffer-常见方法" aria-hidden="true">#</a> buffer 常见方法</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>Buffer clear(）</td><td>清空缓冲区并返回对缓冲区的引用</td></tr><tr><td>Buffer flip(）</td><td>为将缓冲区的界限设置为当前位置，并将当前位置重置为0</td></tr><tr><td>int capacity(）</td><td>返回Buffer的capacity大小</td></tr><tr><td>boolean hasRemaining(）</td><td>判断缓冲区中是否还有元素</td></tr><tr><td>int limit(）</td><td>返回Buffer的界限（limit）的位置</td></tr><tr><td>Buffer limit(int n）</td><td>将设置缓冲区界限为n，并返回一个具有新limit的缓冲区对象</td></tr><tr><td>Buffer mark(）</td><td>对缓冲区设置标记</td></tr><tr><td>int position(）</td><td>返回缓冲区的当前位置position</td></tr><tr><td>Buffer position(int n）</td><td>将设置缓冲区的当前位置为n，并返回修改后的Buffer对象</td></tr><tr><td>int remaining()</td><td>返回position和limit之间的元素个数</td></tr><tr><td>Buffer reset(）</td><td>将位置position转到以前设置的mark所在的位置</td></tr><tr><td>Buffer rewind()</td><td>将位置设为为0．取消设置的mark</td></tr></tbody></table><h3 id="数据操作方法" tabindex="-1"><a class="header-anchor" href="#数据操作方法" aria-hidden="true">#</a> 数据操作方法</h3><p><strong>取获取Buffer中的数据</strong></p><ul><li>get()：读取单个字节</li><li>get (byte［〕dst)：批量读取多个字节到dst中</li><li>get(int index)：读取指定索引位置的字节（不会移动position)</li></ul><p><strong>放入数据到Buffer中</strong></p><ul><li>put(byte b):将给定单个字节写入缓冲区的当前位置</li><li>put (byte[] src):将src中的字节写入缓存区的当前位置</li><li>put(int index,byte b)L将指定字节写入缓存区的索引位置（不会移动position）</li></ul><br><h2 id="channel-通道详解" tabindex="-1"><a class="header-anchor" href="#channel-通道详解" aria-hidden="true">#</a> <span id="Channel">Channel 通道详解</span></h2><p>通道（Channel)：由 java.nio.channels 包定义的。Channel表示IO源与目标打开的连接。</p><p><strong>Channel 类似于传统的“流”。只不过Channel本身不能直接访问数据，Channel只能与Buffer进行交互。</strong></p><blockquote><p>BlO 中的 stream 是单向的，只能用来读或者写，而 NIO 的 Channel 是双向的。</p></blockquote><p><strong>常用的 Channel 实现类</strong></p><ul><li>FileChannel：用于读取、写入、映射和操作文件的通道</li><li>DatagramChannel：通过UDP读写网络中的数据通道</li><li>SocketChannel：通过TCP读写网络中额数据</li><li>ServerSocketChannel：可以监听新进来的TCP连接，对每一个新进来的连接都会创建一个 SocketChannel。 <ul><li>【ServerSocketChannel类似ServerSocket，SocketChannel类似Socket】</li></ul></li></ul><br><h3 id="通道使用" tabindex="-1"><a class="header-anchor" href="#通道使用" aria-hidden="true">#</a> 通道使用</h3><p>获取通道的一种方式是对支持通道的对象调用 <code>getChannel()</code> 方法，支持这个方法的类如下：</p><ul><li><p>本地io：<code>FileInputStreanm/FileOutputStream</code>、<code>RandomAccessFile</code></p></li><li><p>网络io：<code>Socket</code>、<code>ServerSocket</code>、<code>DatagramSocket</code></p></li></ul><h4 id="文件读写" tabindex="-1"><a class="header-anchor" href="#文件读写" aria-hidden="true">#</a> 文件读写</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeTxt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
     <span class="token comment">//1.字节输出流通向目标文件</span>
     <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\shiva\\\\Desktop\\\\1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">//2.得到字节输出流对应的通道 Channel</span>
     <span class="token class-name">FileChannel</span> channel <span class="token operator">=</span> fos<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">//3.分配缓存区</span>
     <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;缓冲区写入数据到txt！&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">//4.把缓存区切换为写模式</span>
     buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
     channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readTxt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">FileInputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\shiva\\\\Desktop\\\\1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileChannel</span> channel <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通道复制" tabindex="-1"><a class="header-anchor" href="#通道复制" aria-hidden="true">#</a> 通道复制</h4><p><code>transferForm</code> 、<code>transferTo</code> 两个方法，看代码就行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">//输入流</span>
    <span class="token class-name">FileInputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\shiva\\\\Desktop\\\\1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileChannel</span> isChannel <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//输出流</span>
    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\shiva\\\\Desktop\\\\2.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileChannel</span> fosChannel <span class="token operator">=</span> fos<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//从 XXX 复制</span>
    fosChannel<span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>isChannel<span class="token punctuation">,</span> isChannel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//复制到 XXX</span>
    <span class="token comment">//isChannel.transferTo(isChannel.position(), isChannel.size(), fosChannel);</span>
    isChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fosChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="selector-选择器详解" tabindex="-1"><a class="header-anchor" href="#selector-选择器详解" aria-hidden="true">#</a> <span id="Selector">Selector 选择器详解</span></h2><p>选择器（Selector）是SeIectabIe ChanneI对象的多路复用器，Selector可以同时监控多个 SelectableChannel 的IO状况，</p><p>也就是说，<strong>利用 Selector 可使一个单独的线程管理多个 Channel。</strong></p><blockquote><p>Selector 能够检测多个注册的通道上篡若有事件发生（注意：多个Channel以事件的方式可以注册到同一个 Selector)；</p><p>如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求。</p></blockquote><blockquote><p>只有在连接／通道真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程 避免了多线程之间的上下文切换导致的开销</p></blockquote><br><h3 id="selector-使用" tabindex="-1"><a class="header-anchor" href="#selector-使用" aria-hidden="true">#</a> Selector 使用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>向选择器注册通道：<code>SelectableChannel.register(Selector sel,int ops);</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServerSocketChannel</span> ssChannel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ssChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ssChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通道必须配置为非阻塞模式，否则使用选择器就没有任何意义了</strong>，</p><p>因为如果通道在某个事件上被阻塞，那么服务器就不能响应其它事件，必须等待这个事件处理完毕才能去处理其它事件，显然这和选择器的作用背道而驰。</p><p>ops指定，可以监听的事件类型（用可使用Selection Key的四个常量表示）:</p><ul><li>读：SelectionKey.OP_READ (1)</li><li>写：SelectionKey.OP_WRITE (4)</li><li>连接：SelectionKey.OP_CONNECT (8)</li><li>接收：SelectionKey.OP_ACCEPT (16)</li><li><strong>若注册时不止监听一个事件，则可以使用‘位或”操作符连接。</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> interestSet <span class="token operator">=</span> selectionKey<span class="token punctuation">.</span><span class="token constant">OP_READ</span> <span class="token operator">|</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_WERITE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="事件监听" tabindex="-1"><a class="header-anchor" href="#事件监听" aria-hidden="true">#</a> 事件监听</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> num <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 select() 来监听到达的事件，它会一直阻塞直到有至少一个事件到达。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>代码就不写了，上门的示例包含了全流程
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="参考文章">参考文章</span></h2>`,111),k={href:"https://www.bilibili.com/video/BV1gz4y1C7RK?p=2&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"},r={href:"https://www.pdai.tech/md/java/io/java-io-nio.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://blog.csdn.net/weixin_39327182/article/details/107252790",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.csdn.net/l18637220680/article/details/79360451",target:"_blank",rel:"noopener noreferrer"},v={href:"https://gitee.com/pic_bed_of_shiva/static-resources/raw/b6c87f51e22c327068bfbbb669bac48d7122a93f/showns/file/%E9%BB%91%E9%A9%ACio%E6%95%99%E6%9D%90.pdf",target:"_blank",rel:"noopener noreferrer"};function b(f,h){const s=e("ExternalLinkIcon");return c(),o("div",null,[u,n("ul",null,[n("li",null,[n("a",k,[a("黑马Java-IO模式精讲(AIO&BIO&NIO)，Java-IO基础+高级+实战全套教程，黑马程序员行业大牛深度精讲_哔哩哔哩_bilibili"),t(s)])]),n("li",null,[n("a",r,[a("Java NIO - 基础详解 | Java 全栈知识体系 (pdai.tech)"),t(s)])]),n("li",null,[n("a",d,[a("nio通信代码实例_一剑问九州的博客-CSDN博客_nio代码示例"),t(s)])]),n("li",null,[n("a",m,[a("NIO之Channel详解_我不是李大侠的博客-CSDN博客_nio的channel"),t(s)])]),n("li",null,[n("a",v,[a("黑马Java-IO模式精讲(AIO&BIO&NIO) - PDF 教材"),t(s)])])])])}const g=p(i,[["render",b],["__file","JavaNioAbout.html.vue"]]);export{g as default};
