import{_ as n,b as s,o as e,c as o,e as p,w as l,d as c,f as a}from"./app-36b09dbd.js";const r={},i=a(`<div class="catalog"><ul><li><a href="#t0">前言</a></li><li><a href="#t1">开启 manager-gui</a></li><li><a href="#t2">Tomcat 状态解读</a></li><li><a href="#t3">关闭 AJP 服务</a></li><li><a href="#t4">设置线程池</a></li><li><a href="#t5">NIO 还是 APR？Connector 配置</a></li><li><a href="#t6">JVM 参数调整</a></li><li><a href="#t7">其他方式</a></li><li><a href="#t8">参考文章</a></li></ul></div><h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> <span id="t0">前言</span></h3><p>整理这篇 Tomcat优化，是因为以前从来没特地研究过，都是直接用服务器上已经有的压缩包解压使用，最多就是加大下内存，这几天心血来潮学习学习。</p><p>我用的环境是：</p><ul><li>JDK 1.8</li><li>Tomcat 版本：<code>apache-tomcat-8.5.49</code> ，原版可在 <a href="http://www.apache.org/dist/tomcat/" target="_blank">http://www.apache.org/dist/tomcat/</a> 下载</li></ul><p>因为最后是要上线部署的，所以我下载了 Linux 版本，而且最后成品也是 Linux 版的。</p><p>最后的成品我也给放上，不过是直接本地压缩的 RAR 包：<a href="https://gitee.com/pic_bed_of_shiva/static-resources/blob/master/showns/software/apache-tomcat-8.5.49.rar" target="_blank">https://gitee.com/pic_bed_of_shiva/static-resources/blob/master/showns/software/apache-tomcat-8.5.49.rar</a></p><br><h3 id="开启-manager-gui" tabindex="-1"><a class="header-anchor" href="#开启-manager-gui" aria-hidden="true">#</a> <span id="t1">开启 manager-gui</span></h3><p>在此之前，先删除一下无用的文件（开源协议也给删了，见谅见谅）。</p><p>然后，在调试过程，先临时开启下 manager-gui，Tomcat 建议不要使用 manager-gui。</p><p>并且，在线上环境也不需要使用 manager-gui，并且也有攻击从 Tomcat 控制台进入。</p><p>现在只是临时开启，调试时查看下服务器状态。</p><p>首先 <code>conf/tomcat-users.xml</code> 文件添加：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manager<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manager-gui<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>admin-script<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>admin-gui<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manager-jmx<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manager-script<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manager-status<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tomcat<span class="token punctuation">&quot;</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123456<span class="token punctuation">&quot;</span></span> <span class="token attr-name">roles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manager,manager-gui,admin-script,admin-gui,manager-jmx,manager-script,manager-status<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后 <code>webapps/manager/META-INF/context.xml</code> 文件注释以下配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token comment">&lt;!--  &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot;
         allow=&quot;127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1&quot; /&gt;   --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后启动 Tomcat 进入控制台查看运行状态。</p><br><h3 id="tomcat-状态解读" tabindex="-1"><a class="header-anchor" href="#tomcat-状态解读" aria-hidden="true">#</a> <span id="t2">Tomcat 状态解读</span></h3><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/deploy/TomcatOptimize1.png" alt="Tomcat 控制台"></p><br><p>首先看看JVM区</p><table><thead><tr><th style="text-align:center;"><strong>内存池</strong></th><th style="text-align:center;"><strong>类型</strong></th><th style="text-align:center;"><strong>初始化</strong></th><th style="text-align:center;"><strong>最大值</strong></th></tr></thead><tbody><tr><td style="text-align:center;">PS Eden Space</td><td style="text-align:center;">Heap memory</td><td style="text-align:center;">31.00 MB</td><td style="text-align:center;">646.50 MB</td></tr><tr><td style="text-align:center;">PS Old Gen</td><td style="text-align:center;">Heap memory</td><td style="text-align:center;">83.00 MB</td><td style="text-align:center;">1313.50 MB</td></tr><tr><td style="text-align:center;">PS Survivor Space</td><td style="text-align:center;">Heap memory</td><td style="text-align:center;">5.00 MB</td><td style="text-align:center;">5.00 MB</td></tr><tr><td style="text-align:center;">Code Cache</td><td style="text-align:center;">Non-heap memory</td><td style="text-align:center;">2.43 MB</td><td style="text-align:center;">240.00 MB</td></tr><tr><td style="text-align:center;">Compressed Class Space</td><td style="text-align:center;">Non-heap memory</td><td style="text-align:center;">0.00 MB</td><td style="text-align:center;">1024.00 MB</td></tr><tr><td style="text-align:center;">Metaspace</td><td style="text-align:center;">Non-heap memory</td><td style="text-align:center;">0.00 MB</td><td style="text-align:center;">-0.00 MB</td></tr></tbody></table><ul><li><strong>PS Eden Space</strong> ：新生带 Eden区，一个对象new 出来后会在Eden Space，直到GC到来,GC会逐一问清楚每个对象是否存在引用，进入Survivor Space（幸存区），没有引用将被kill。</li><li><strong>PS Old Gen</strong> ：老年代，主要存放生命周期长的对象</li><li><strong>PS Survivor Space</strong> ：新生带 Servivor区，幸存区。幸存者区的对象可以活段时间，GC会定期（可以自定义）会对这些对象进行访问，如果该对象的引用不存在了将被kill，如果每次访问该对象都存在引用，将被转移到老年代。（用于保存在eden space内存池中经过垃圾回收后没有被回收的对象。）</li><li><strong>Code Cache</strong> ：代码缓存区。HotSpot Java虚拟机包括一个用于编译和保存本地代码（native code）的内存。</li><li><strong>Compressed Class Space</strong> ：类指针压缩空间，存放 class 指针。</li><li><strong>Metaspace</strong> ：元空间，本质和永久代类似，元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存</li></ul><br><p>然后再往下，<code>AJP-NIO-8009</code> 和 <code>HTTP-NIO-8080</code> 分别是两个连接服务监听的端口。</p><p>能看到两个服务的最大线程数，活跃线程数之类的参数，后面会对这些参数进行优化。</p><p>默认使用了 NIO，JDK 8 之前默认用的好像是 BIO，现在已经优化为 NIO 了，要不要改后面再说。</p><br><h3 id="关闭-ajp-服务" tabindex="-1"><a class="header-anchor" href="#关闭-ajp-服务" aria-hidden="true">#</a> <span id="t3">关闭 AJP 服务</span></h3><p>在上面的控制台，大家可以看到 <strong>监听8009的AJP服务</strong> ，默认是开启的。</p><blockquote><p>AJP（Apache JServ Protocol）是定向包协议。因为性能原因，使用二进制格式来传输可读性文本。WEB 服务器通过 TCP 连接 和 SERVLET 容器连接。</p></blockquote><p>它的作用是为了节省 Socket 创建的昂贵代价，WEB 服务器尝试维护一个永久的 TCP 连接到 Servlet 容器，并在多个请求和响应周期过程中复用。</p><p>然后看看它的工作原理：</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/deploy/TomcatOptimize2.png" alt="Tomcat AJP 服务"></p><p>注意上图是否使用 AJP服务的区别。但是现实的生产环境使用的都是：</p>`,37),u=a(`<p>所以， 这个服务需要关闭，顺便还能省下一个端口，直接注释 AJP 连接器就好了。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token comment">&lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</span>
    <span class="token comment">&lt;!-- &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt; --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="设置线程池" tabindex="-1"><a class="header-anchor" href="#设置线程池" aria-hidden="true">#</a> <span id="t4">设置线程池</span></h3><p><code>Connector</code> 绝对是 Tomcat 配置中最核心的标签。默认的 <code>Connector</code> 配置如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8080<span class="token punctuation">&quot;</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HTTP/1.1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8443<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认连接器基于 HTTP/1.1 协议，监听8080端口，超时连接20秒，每一个请求都会创建一个线程。</p><p>很明显，这样创建线程的方式很浪费资源，所以 Tomcat 内置了线程池优化方式。</p><p>删掉默认连接器，默认线程池标签去掉注释，如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Executor</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tomcatThreadPool<span class="token punctuation">&quot;</span></span> <span class="token attr-name">namePrefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>catalina-exec-<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>150<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minSpareThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">executor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tomcatThreadPool<span class="token punctuation">&quot;</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8080<span class="token punctuation">&quot;</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HTTP/1.1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8443<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后来看下 <code>Executor</code> 标签的属性：</p><table><thead><tr><th>标签名</th><th>作用</th></tr></thead><tbody><tr><td><strong>className</strong></td><td>用于实现此组件的java类的名称，这个类必须实现接口org.apache.catalina.Executor。不给定该属性时将采用默认的标准类org.apache.catalina.core.StandardThreadExecutor；</td></tr><tr><td><strong>threadPriority</strong></td><td>线程优先级，默认值为5</td></tr><tr><td><strong>daemon</strong></td><td>线程是否以守护线程的方式运行，默认值为true</td></tr><tr><td><strong>namePrefix</strong></td><td>执行器创建每个线程时的名称前缀，最终线程的名称为:namePrefix+threadNumber</td></tr><tr><td><strong>maxThreads</strong></td><td>最大并发数，默认值为200，一般建议在500~1000，根据硬件设备和业务量判断</td></tr><tr><td><strong>minSpareThreads</strong></td><td>线程池中最少空闲的线程数量。默认值为25</td></tr><tr><td><strong>maxIdleTime</strong></td><td>在空闲线程关闭前的毫秒数。除非激活的线程数量小于或等于minSpareThreads的值，否则会有空闲线程的出现。默认值为60000，即空闲线程需要保留1分钟的空闲时间才被杀掉</td></tr><tr><td><strong>maxQueueSize</strong></td><td>可执行任务的最大队列数，达到队列上限时的连接请求将被拒绝</td></tr><tr><td><strong>prestartminSpareThreads</strong></td><td>在启动executor时是否立即创建minSpareThreads个线程数，默认为false，即在需要时才创建线程</td></tr></tbody></table><p>经过调整后，我的线程池长这样：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Executor</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tomcatThreadPool<span class="token punctuation">&quot;</span></span> <span class="token attr-name">namePrefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>catalina-exec-<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>500<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">minSpareThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxIdleTime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>60000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxQueueSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>150<span class="token punctuation">&quot;</span></span> <span class="token attr-name">prestartminSpareThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="nio-还是-apr-connector-配置" tabindex="-1"><a class="header-anchor" href="#nio-还是-apr-connector-配置" aria-hidden="true">#</a> <span id="t5">NIO 还是 APR？Connector 配置</span></h3><p>Tomcat8 有三种运行模式，BIO、NIO、APR。</p><ul><li>BIO：Tomcat 7以前的默认运行模式；阻塞IO，性能低。适用于连接数目比较小且固定的架构。</li><li>NIO：基于缓冲区，非阻塞IO，有更好的并发性能，当然NIO更优的前提是，大量请求且请求耗时不高。Tomcat 8的默认使用方式。</li><li>APR：Apache Portable Runtime，从操作系统层面解决io阻塞问题。需要额外安装 Linux 组件，大幅度提高性能。单从性能来说是首选，不过作者在线上环境从没用过。</li></ul><p>在 Tomcat 8 中自带最新的 NIO2，当然用新版本咯</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">executor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tomcatThreadPool<span class="token punctuation">&quot;</span></span> <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span>
           <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8080<span class="token punctuation">&quot;</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.coyote.http11.Http11Nio2Protocol<span class="token punctuation">&quot;</span></span>
           <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20000<span class="token punctuation">&quot;</span></span>
           <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8443<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，来看下 <code>Connector</code> 标签的参数，上面就说过，这毫无疑问是 Tomcat 最重要的标签，不过大多数情况下都不需要设置：</p><ul><li><code>address</code>：指定连接器监听的地址，默认为所有地址，即0.0.0.0。</li><li><code>maxThreads</code>：支持的最大并发连接数，默认为200；如果引用了executor创建的共享线程池，则该属性被忽略。</li><li><code>acceptCount</code>：设置等待队列的最大长度；通常在tomcat所有处理线程均处于繁忙状态时，新发来的请求将被放置于等待队列中；</li><li><code>maxConnections</code>：允许建立的最大连接数。acceptCount和maxThreads是接受连接的最大线程数。存在一种情况，maxConnections小于acceptCount时，超出maxConnections的连接请求将被接收，但不会与之建立连接。</li><li><code>port</code>：监听的端口，默认为0，此时表示随机选一个端口，通常都应该显式指定监听端口。</li><li><code>protocol</code>：连接器使用的协议，用于处理对应的请求。默认为HTTP/1.1，此时它会自动在基于Java NIO或APR/native连接器之间进行切换。定义AJP协议时通常为AJP/1.3。</li><li><code>redirectPort</code>：如果某连接器支持的协议是HTTP，当接收客户端发来的HTTPS请求时，则转发至此属性定义的端口。</li><li><code>connectionTimeout</code>：等待客户端发送请求的超时时间，单位为毫秒，默认为60000，即1分钟；注意，这时候连接已经建立。</li><li><code>keepAliveTimeout</code>：长连接状态的超时时间。超出该值时，长连接将关闭。</li><li><code>enableLookups</code>：是否通过request.getRemoteHost()进行DNS查询以获取客户端的主机名；默认为true，应设置为false防止反解客户端主机；</li><li><code>compression</code>：是否压缩数据。默认为off。设置为on时表示只压缩text文本，设置为force时表示压缩所有内容。应该在压缩和sendfile之间做个权衡。</li><li><code>useSendfile</code>：该属性为NIO的属性，表示是否启用sendfile的功能。默认为true，启用该属性将会禁止compression属性。</li></ul><p>只列举了一部分，全部请参考官方文档：</p><p><a href="http://tomcat.apache.org/tomcat-8.5-doc/config/http.html" target="_blank">http://tomcat.apache.org/tomcat-8.5-doc/config/http.html</a></p><br><h3 id="jvm-参数调整" tabindex="-1"><a class="header-anchor" href="#jvm-参数调整" aria-hidden="true">#</a> <span id="t6">JVM 参数调整</span></h3><p>Tomcat 本身还是运行在 JVM之上的，目前针对 JVM 的调优主要有两个方面：<strong>内存调优和垃圾回收策略调优</strong> 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>export <span class="token constant">JAVA_OPTS</span><span class="token operator">=</span>&#39;<span class="token operator">-</span><span class="token class-name">Xms1024m</span> <span class="token operator">-</span><span class="token class-name">Xmx1024m</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintGCDetails</span> <span class="token operator">-</span>server  <span class="token operator">-</span><span class="token class-name">Xloggc</span><span class="token operator">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span>/logs<span class="token operator">/</span>gc<span class="token punctuation">.</span>log&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我的配置就是上面这行了，就设置了一个并行收集器，再多也感觉不到有啥差别，而且看不懂。</p><p>这部分有点高深了，我目前就是看着大佬的博客画瓢。。JVM 还没研究过，看了点文章还是看不懂，先混个脸熟以后再详细研究。</p><br><p><strong>内存调优</strong></p><ol><li><p>-Xmx ：设置Java虚拟机的堆的最大可用内存大小，单位：兆(m)，整个堆大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m。堆的不同分布情况，对系统会产生一定的影响。尽可能将对象预留在新生代，减少老年代GC的次数（通常老年回收起来比较慢）。实际工作中，通常将堆的初始值和最大值设置相等，这样可以减少程序运行时进行的垃圾回收次数和空间扩展，从而提高程序性能。</p></li><li><p>-Xms ：设置Java虚拟机的堆的初始值内存大小，单位：兆(m)，此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。</p></li><li><p>-Xmn ：设置年轻代内存大小，单位：兆(m)，此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。一般在增大年轻代内存后，也会将会减小年老代大小。</p></li><li><p>-Xss ：设置每个线程的栈大小。JDK5.0以后每个线程栈大小为1M，以前每个线程栈大小为256K。更具应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。</p></li><li><p>-XX:NewRatio ：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5 。</p></li><li><p>-XX:SurvivorRatio ：设置年轻代中Eden区与Survivor区的大小比值。设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6。</p></li></ol><br><p><strong>垃圾回收策略调优</strong></p><p>Java虚拟机的垃圾回收策略一般分为：串行收集器、并行收集器和并发收集器。</p><p>这一部分垃圾回收直接引用了大佬的总结，反正我也看不懂：</p><p>具体设置如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>JAVA_OPTS=&quot;$JAVA_OPTS -Xmx3550m -Xms3550m -Xss128k -XX:+UseParallelGC -XX:MaxGCPauseMillis=100&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>具体的垃圾回收策略及相应策略的各项参数如下：</p><ol><li><p>串行收集器（JDK1.5以前主要的回收方式） ： -XX:+UseSerialGC:设置串行收集器</p></li><li><p>并行收集器（吞吐量优先）</p><ul><li>-XX:+UseParallelGC：选择垃圾收集器为并行收集器。此配置仅对年轻代有效。即上述配置下，年轻代使用并发收集，而年老代仍旧使用串行收集。</li><li>-XX:ParallelGCThreads=20：配置并行收集器的线程数，即：同时多少个线程一起进行垃圾回收。此值最好配置与处理器数目相等。</li><li>-XX:+UseParallelOldGC：配置年老代垃圾收集方式为并行收集。JDK6.0支持对年老代并行收集</li><li>-XX:MaxGCPauseMillis=100:设置每次年轻代垃圾回收的最长时间，如果无法满足此时间，JVM会自动调整年轻代大小，以满足此值。</li><li>-XX:+UseAdaptiveSizePolicy：设置此选项后，并行收集器会自动选择年轻代区大小和相应的Survivor区比例，以达到目标系统规定的最低相应时间或者收集频率等，此值建议使用并行收集器时，一直打开。</li></ul></li><li><p>并发收集器（响应时间优先） <code>示例：java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseConcMarkSweepGC</code></p><ul><li>-XX:+UseConcMarkSweepGC：设置年老代为并发收集。测试中配置这个以后，-XX:NewRatio=4的配置失效了，原因不明。所以，此时年轻代大小最好用-Xmn设置。</li><li>-XX:+UseParNewGC: 设置年轻代为并行收集。可与CMS收集同时使用。JDK5.0以上，JVM会根据系统配置自行设置，所以无需再设置此值。</li><li>-XX:CMSFullGCsBeforeCompaction：由于并发收集器不对内存空间进行压缩、整理，所以运行一段时间以后会产生“碎片”，使得运行效率降低。此值设置运行多少次GC以后对内存空间进行压缩、整理。</li><li>-XX:+UseCMSCompactAtFullCollection：打开对年老代的压缩。可能会影响性能，但是可以消除碎片</li></ul></li></ol><br><h3 id="其他方式" tabindex="-1"><a class="header-anchor" href="#其他方式" aria-hidden="true">#</a> <span id="t7">其他方式</span></h3><ol><li>并发数量和业务代码有很大关系，可以通过 JMeter 测试将单台 Tomcat 调试至最大性能。然后根据该指标进行集群搭建。</li><li>代码优化，这个就不说了，要点太多了，比如：访问范围尽量可能小、避免使用反射、变量尽量复用、循环中别捕捉异常等等等等。。。好的代码真的可以让系统飞起来。。。</li></ol><br><h3 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="t8">参考文章</span></h3><p><a href="http://tomcat.apache.org/tomcat-8.5-doc/config/http.html" target="_blank">http://tomcat.apache.org/tomcat-8.5-doc/config/http.html</a></p><p><a href="https://blog.csdn.net/u011240877/article/details/52949046" target="_blank">https://blog.csdn.net/u011240877/article/details/52949046</a></p><p><a href="https://www.bilibili.com/watchlater/#/BV1cE411Y7Am/p3" target="_blank">https://www.bilibili.com/watchlater/#/BV1cE411Y7Am/p3</a></p><p><a href="https://www.cnblogs.com/f-ck-need-u/p/8120008.html" target="_blank">https://www.cnblogs.com/f-ck-need-u/p/8120008.html</a></p><p><a href="https://blog.csdn.net/qq_35119422/article/details/81462034" target="_blank">https://blog.csdn.net/qq_35119422/article/details/81462034</a></p><p><a href="https://www.cnblogs.com/xwjb/articles/8302960.html" target="_blank">https://www.cnblogs.com/xwjb/articles/8302960.html</a></p><p><a href="https://cloud.tencent.com/developer/article/1346964" target="_blank">https://cloud.tencent.com/developer/article/1346964</a></p><p><a href="https://blog.51cto.com/dadloveu/2286359" target="_blank">https://blog.51cto.com/dadloveu/2286359</a></p>`,54);function d(m,k){const t=s("font");return e(),o("div",null,[i,p(t,{color:"red"},{default:l(()=>[c(" **Nginx + Tomcat 的基础架构，而 AJP 服务只有 Apache 和 IIS 服务器才能使用。** ")]),_:1}),u])}const h=n(r,[["render",d],["__file","TomcatOptimize.html.vue"]]);export{h as default};
