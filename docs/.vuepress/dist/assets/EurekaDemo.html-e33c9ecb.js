import{_ as p,r as l,o as i,c as o,b as n,d as a,a as e,f as t}from"./app-0869a5be.js";const c={},r=t('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p><em>2021.10.20，spring cloud 以前只零碎用过几个组件，这次系统学一遍</em></p><p>环境：<code>SpringBoot 2.4.2</code> 、<code>SpringCloud 2020.0.1</code> 、<code>SpringCloud Alibaba 2021.1</code>、<code>JDK 8</code>、<code>MYSQL 5.7</code></p><p>这个系列只讲实现，基本不会深入原理。</p><hr>',5),u=n("strong",null,"代码仓库 eureka-demo 分支",-1),d={href:"https://gitee.com/learning-use-cases/spring-cloud-demo/tree/eureka-demo/",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>本文介绍 spring cloud 服务注册中心 Eureka 。虽然 Eureka 已经停更了，但是很多老项目都是用这个注册中心，做下各种功能介绍。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211021220506550.png" alt="image-20211021220506550"></p><p>Eureka 可以实现服务调用、负载均衡、容错，服务注册与发现。下面是 Eureka 的架构图。</p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211020215151011.png" alt="image-20211020215151011" style="zoom:80%;"><br><h2 id="eureka-介绍" tabindex="-1"><a class="header-anchor" href="#eureka-介绍" aria-hidden="true">#</a> Eureka 介绍</h2><p>Eureka 包含两个组件：Eureka Server 和 Eureka Client。</p><ul><li>Eureka Server ：服务提供者，Client 启动后到 Server 进行注册，Server中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。 <ul><li><strong>Eureka Server 自身也是一个服务，默认情况下会自动注册到注册中心。</strong></li><li>Eureka Server 通过 <strong>Register、Get、Renew</strong> 等接口提供服务的 <strong>注册、发现和心跳检测</strong> 等服务。</li></ul></li><li>Eureka Client ：客户端。在应用启动后，会 向Eureka Server 发送心跳，<strong>默认周期为30秒</strong><ul><li>如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个<strong>服务节点移除（默认90秒）</strong></li></ul></li></ul><p>其他主要功能如下：</p><blockquote><p><strong>Register(服务注册)</strong>：把自己的IP和端口注册给Eureka。</p><p><strong>Renew(服务续约)</strong>：发送心跳包，每30秒发送一次。告诉Eureka自己还活着。</p><p><strong>Cancel(服务下线)</strong>：当provider关闭时会向Eureka发送消息，把自己从服务列表中删除。防止consumer调用到不存在的服务。</p><p><strong>Get Registry(获取服务注册列表)</strong>：获取其他服务列表。</p><p><strong>Replicate(集群中数据同步)</strong>：eureka集群中的数据复制与同步。</p><p><strong>Make Remote Call(远程调用)</strong>：完成服务的远程调用。</p></blockquote><br><h2 id="eureka-service" tabindex="-1"><a class="header-anchor" href="#eureka-service" aria-hidden="true">#</a> Eureka Service</h2><p>新建一个 springboot 模块，pom 文件添加依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token comment">&lt;!-- 注册中心服务 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>yml 配置文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">46500</span>

<span class="token comment"># 单机版</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token comment"># eureka服务端的实例名字</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token comment"># 表示不向注册中心注册自己</span>
    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span>
    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Application 启动类添加注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableEurekaServer</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动服务，输入注册中心地址：http://localhost:46500/ ，出现控制台运行成功。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211020223827167.png" alt="image-20211020223827167"></p><br><h2 id="eureka-client" tabindex="-1"><a class="header-anchor" href="#eureka-client" aria-hidden="true">#</a> Eureka Client</h2><p>注册服务添加 eureka 客户端依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 注册中心服务，客户端 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Application 启动类添加注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableEurekaClient</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>yml 配置文件，添加注册中心相关配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 单机版</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token comment"># 是否向注册中心注册自己</span>
    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># 是否从注册中心抓取已有的注册信息 默认true，集群必须设置为true</span>
    <span class="token key atrule">fetchRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token comment"># 设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>46500/eureka
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动两个服务，客户端控制台打印：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2021-10-20 22:54:27.426  INFO 11032 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_PAYMENT-SERVICE/DESKTOP-OKMJ135:payment-service:57000: registering service...
2021-10-20 22:54:27.569  INFO 11032 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_PAYMENT-SERVICE/DESKTOP-OKMJ135:payment-service:57000 - registration status: 204
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>eureka 控制界面注册服务可见：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211020225523294.png" alt="image-20211020225523294"></p><br><h2 id="集群搭建" tabindex="-1"><a class="header-anchor" href="#集群搭建" aria-hidden="true">#</a> 集群搭建</h2><p>Eureka 自带实现了集群互备。只要多起一个服务，加个配置就可以。</p><p>配置文件修改：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">46500</span>

<span class="token comment"># 集群版</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token comment"># eureka服务端的实例名字</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token comment"># 表示不向注册中心注册自己</span>
    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span>
    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>46501/eureka/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实也没什么修改，只是注册地址换一下，本来是自身，现在是其他服务。</p><ul><li>多个 <code>defaultZone</code> 地址，用 <code>,</code> 分割。</li><li><code>hostname</code> 最好区别，可以用 ip 作为名称。</li></ul><br><h2 id="服务发现" tabindex="-1"><a class="header-anchor" href="#服务发现" aria-hidden="true">#</a> 服务发现</h2><p>这部分看看得了，Application 启动类添加注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableDiscoveryClient</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">DiscoveryClient</span> discoveryClient<span class="token punctuation">;</span>

<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;discovery&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拿到服务就能调用：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211021214646105.png" alt="image-20211021214646105"></p><br><h2 id="自我保护" tabindex="-1"><a class="header-anchor" href="#自我保护" aria-hidden="true">#</a> 自我保护</h2><p>下面的红字应该都见过：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211021214744019.png" alt="image-20211021214744019"></p><p>一句话解释，作用就是：</p><blockquote><p>某时刻某一个微服务不可用了，Eureka 不会立刻清理，依旧会对该微服务的信息进行保存，属于 CAP理论内的 AP 分支。</p></blockquote><p>这就要讲到著名的 CAP 理论：</p><p>Brewer教授当时想象的分布式场景是webservice，一组websevrice后台运行着众多的server，对service的读写会反应到后台的server集群，并对CAP进行了定义：</p><ul><li>C（一致性）：所有的节点上的数据时刻保持同步</li><li>A（可用性）：每个请求都能接受到一个响应，无论响应成功或失败</li><li>P（分区容错）：系统应该能持续提供服务，即使系统内部有消息丢失（分区）</li></ul><p><strong>CAP三者不可兼得</strong>，该如何取舍：</p><ol><li><p>CA : 优先保证一致性和可用性，放弃分区容错。 这也意味着放弃系统的扩展性，系统不再是分布式的，有违设计的初衷。</p></li><li><p>CP : 优先保证一致性和分区容错性，放弃可用性。在数据一致性要求比较高的场合(譬如:zookeeper,Hbase) 是比较常见的做法，一旦发生网络故障或者消息丢失，就会牺牲用户体验，等恢复之后用户才逐渐能访问。</p></li><li><p>AP : 优先保证可用性和分区容错性，放弃一致性。NoSQL中的Cassandra 就是这种架构。跟CP一样，放弃一致性不是说一致性就不保证了，而是逐渐的变得一致。</p></li></ol><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,60),v={href:"https://www.bilibili.com/video/BV18E411x7eT?p=3",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.csdn.net/weixin_45873488/article/details/120347340",target:"_blank",rel:"noopener noreferrer"},g={href:"https://gitee.com/lixiaogou/cloud2020",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.cnblogs.com/jing99/p/11576133.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.cnblogs.com/mingorun/p/11025538.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.csdn.net/chen77716/article/details/30635543",target:"_blank",rel:"noopener noreferrer"};function f(_,E){const s=l("ExternalLinkIcon");return i(),o("div",null,[r,n("p",null,[u,a(" ："),n("a",d,[a("Learning Use Cases/Spring Cloud Demo - Gitee.com"),e(s)])]),k,n("p",null,[n("a",v,[a("尚硅谷SpringCloud框架开发教程(SpringCloudAlibaba微服务分布式架构丨Spring Cloud)_哔哩哔哩_bilibili"),e(s)])]),n("p",null,[n("a",m,[a("SpringBoot和Spring Cloud以及SpringCloud Alibaba版本对应关系_蔡徐坤冲充崇的博客-CSDN博客"),e(s)])]),n("p",null,[n("a",g,[a("cloud2020: 尚硅谷cloud2020 学习代码 (gitee.com)"),e(s)])]),n("p",null,[n("a",b,[a("SpringCloud之Eureka注册中心原理及其搭建 - kosamino - 博客园 (cnblogs.com)"),e(s)])]),n("p",null,[n("a",h,[a("CAP理论的理解 - John_nok - 博客园 (cnblogs.com)"),e(s)])]),n("p",null,[n("a",y,[a("CAP理论_老码农的专栏-CSDN博客_cap理论"),e(s)])])])}const x=p(c,[["render",f],["__file","EurekaDemo.html.vue"]]);export{x as default};
