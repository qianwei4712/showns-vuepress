import{_ as a,r as s,o,c as l,b as t,d as r,a as d,f as n}from"./app-c14a8d33.js";const i={},h=n('<div class="catalog"><ul><li><a href="#t1">反射机制基础</a></li><li><a href="#t2">反射概述</a></li><li><a href="#t3">获取 Class 的方法</a></li><li><a href="#t4">反射机制的相关类</a><ul><li><a href="#t41">Class 类</a></li><li><a href="#t42">Field 类</a></li><li><a href="#t43">Method 类</a></li><li><a href="#t44">Constructor 类</a></li></ul></li><li><a href="#t5">相关知识点</a></li><li><a href="#t6">参考文章</a></li></ul></div><p>根据《On Java 8》第 19 章，Java 在运行时识别对象和类信息的方法主要有两种：</p><blockquote><ol><li>“传统的” RTTI（RunTime Type Information，运行时类型信息）：假定我们在编译时已经知道了所有的类型</li><li>“反射”机制：允许我们在运行时发现和使用类的信息。</li></ol></blockquote><br><h2 id="反射机制基础" tabindex="-1"><a class="header-anchor" href="#反射机制基础" aria-hidden="true">#</a> <span id="t1">反射机制基础</span></h2><p>Java 使用  <code>Class</code>  对象来实现 RTTI，即便是类型转换这样的操作都是用  <code>Class</code>  对象实现的。</p><p>类是程序的一部分，每个类都有一个  <code>Class</code>  对象。 每当我们编写并且编译了一个新类，就会产生一个  <code>Class</code>  对象（更恰当的说，是被保存在一个同名的  <code>.class</code>  文件中）。为了生成这个类的对象，Java 虚拟机 (JVM) 先会调用&quot;类加载器&quot;子系统把这个类加载到内存中。</p><p>类加载器子系统可能包含一条类加载器链，但有且只有一个<strong>原生类加载器</strong>，它是 JVM 实现的一部分。</p><p>所有的类都是第一次使用时动态加载到 JVM 中的，当程序创建第一个对类的静态成员的引用时，就会加载这个类。</p><blockquote><p>其实构造器也是类的静态方法，虽然构造器前面并没有  <code>static</code>  关键字。所以，使用  <code>new</code>  操作符创建类的新对象，这个操作也算作对类的静态成员引用。</p></blockquote><p>因此，Java 程序在它开始运行之前并没有被完全加载，很多部分是在需要时才会加载。</p><p>类加载器首先会检查这个类的  <code>Class</code>  对象是否已经加载，如果尚未加载，默认的类加载器就会根据类名查找  <code>.class</code>  文件。这个类的字节码被加载后，JVM 会对其进行验证，确保它没有损坏，并且不包含不良的 Java 代码(这是 Java 安全防范的一种措施)。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/ClassLoader1.png" alt="ClassLoader1"></p><br><h2 id="反射概述" tabindex="-1"><a class="header-anchor" href="#反射概述" aria-hidden="true">#</a> <span id="t2">反射概述</span></h2><blockquote><p><strong>JAVA 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；</strong></p><p><strong>对于任意一个对象，都能够调用它的任意一个方法和属性；</strong></p><p><strong>这种动态获取的信息以及动态调用对象的方法的功能称为 Java 语言的反射机制。</strong></p><p><strong>要想解剖一个类，必须先要获取到该类的字节码文件对象，而解剖使用的就是 Class 类中的方法，所以先要获取到每一个字节码文件对应的 Class 类型的对象</strong></p></blockquote><p>简要的说，反射就是在运行时才知道需要的类是什么，然后从堆中获取 class 对象，并构造成类，调用其方法。</p><p><strong>反射的优点：</strong> 反射提高了程序的灵活性和扩展性，降低耦合性，提高自适应能力。它允许程序创和控制任何类的对象，无需提前硬编码目标类 。</p><p><strong>反射的缺点：</strong> 性能问题，使用反射基本上是一种解释操作，用于字段和方法接入时要远慢于直接代码。因此反射机制主要应用在对灵活性和扩展性要求很高的系统框架上，普通程序不建议使用 。</p><br><h2 id="获取-class-的方法" tabindex="-1"><a class="header-anchor" href="#获取-class-的方法" aria-hidden="true">#</a> <span id="t3">获取 Class 的方法</span></h2><ol><li>通过<strong>对象</strong>调用 <strong>getClass()</strong> 方法来获取，通常应用在：比如你传过来一个 Object 类型的对象，而我不知道你具体是什么类，用这种方法。</li><li>使用 <strong>Class.forName()</strong> 静态方法。当知道某类的全路径名时，可以使用此方法获取 Class 类对象。用的最多，但可能抛出 ClassNotFoundException 异常。</li><li>直接通过 <strong>类名.class</strong> 的方式得到，该方法最为安全可靠，程序性能更高。</li><li>某些类自带的<strong>TYPE</strong>属性，例如：<strong>Boolean.TYPE</strong></li></ol><h2 id="反射机制的相关类" tabindex="-1"><a class="header-anchor" href="#反射机制的相关类" aria-hidden="true">#</a> <span id="t4">反射机制的相关类</span></h2><p>与 Java 反射相关的类如下：</p><table><thead><tr><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>Class 类</td><td>代表类的实体，在运行的 Java 应用程序中表示类和接口</td></tr><tr><td>Field 类</td><td>代表类的成员变量（成员变量也称为类的属性）</td></tr><tr><td>Method 类</td><td>代表类的方法</td></tr><tr><td>Constructor 类</td><td>代表类的构造方法</td></tr></tbody></table><br><h3 id="class-类" tabindex="-1"><a class="header-anchor" href="#class-类" aria-hidden="true">#</a> <span id="t41">Class 类</span></h3><p>Class 代表类的实体，在运行的 Java 应用程序中表示类和接口。在这个类中提供了很多有用的方法，这里对他们简单的分类介绍。</p><ul><li><strong>获得类相关的方法</strong></li></ul><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>asSubclass(Class clazz)</td><td>把传递的类的对象转换成代表其子类的对象</td></tr><tr><td>Cast</td><td>把对象转换成代表类或是接口的对象</td></tr><tr><td>getClassLoader()</td><td>获得类的加载器</td></tr><tr><td>getClasses()</td><td>返回一个数组，数组中包含该类中所有公共类和接口类的对象</td></tr><tr><td>getDeclaredClasses()</td><td>返回一个数组，数组中包含该类中所有类和接口类的对象</td></tr><tr><td>forName(String className)</td><td>根据类名返回类的对象</td></tr><tr><td>getName()</td><td>获得类的完整路径名字</td></tr><tr><td>newInstance()</td><td>创建类的实例</td></tr><tr><td>getPackage()</td><td>获得类的包</td></tr><tr><td>getSimpleName()</td><td>获得类的名字</td></tr><tr><td>getSuperclass()</td><td>获得当前类继承的父类的名字</td></tr><tr><td>getInterfaces()</td><td>获得当前类实现的类或是接口</td></tr></tbody></table><ul><li><strong>获得类中属性相关的方法</strong></li></ul><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getField(String name)</td><td>获得某个公有的属性对象</td></tr><tr><td>getFields()</td><td>获得所有公有的属性对象</td></tr><tr><td>getDeclaredField(String name)</td><td>获得某个属性对象</td></tr><tr><td>getDeclaredFields()</td><td>获得所有属性对象</td></tr></tbody></table><ul><li><strong>获得类中注解相关的方法</strong></li></ul><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getAnnotation(Class annotationClass)</td><td>返回该类中与参数类型匹配的公有注解对象</td></tr><tr><td>getAnnotations()</td><td>返回该类所有的公有注解对象</td></tr><tr><td>getDeclaredAnnotation(Class annotationClass)</td><td>返回该类中与参数类型匹配的所有注解对象</td></tr><tr><td>getDeclaredAnnotations()</td><td>返回该类所有的注解对象</td></tr></tbody></table><ul><li><strong>获得类中构造器相关的方法</strong></li></ul><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getConstructor(Class...&lt;?&gt; parameterTypes)</td><td>获得该类中与参数类型匹配的公有构造方法</td></tr><tr><td>getConstructors()</td><td>获得该类的所有公有构造方法</td></tr><tr><td>getDeclaredConstructor(Class...&lt;?&gt; parameterTypes)</td><td>获得该类中与参数类型匹配的构造方法</td></tr><tr><td>getDeclaredConstructors()</td><td>获得该类所有构造方法</td></tr></tbody></table><ul><li><strong>获得类中方法相关的方法</strong></li></ul><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getMethod(String name, Class...&lt;?&gt; parameterTypes)</td><td>获得该类某个公有的方法</td></tr><tr><td>getMethods()</td><td>获得该类所有公有的方法</td></tr><tr><td>getDeclaredMethod(String name, Class...&lt;?&gt; parameterTypes)</td><td>获得该类某个方法</td></tr><tr><td>getDeclaredMethods()</td><td>获得该类所有方法</td></tr></tbody></table><ul><li><strong>类中其他重要的方法</strong></li></ul><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>isAnnotation()</td><td>如果是注解类型则返回 true</td></tr><tr><td>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</td><td>如果是指定类型注解类型则返回 true</td></tr><tr><td>isAnonymousClass()</td><td>如果是匿名类则返回 true</td></tr><tr><td>isArray()</td><td>如果是一个数组类则返回 true</td></tr><tr><td>isEnum()</td><td>如果是枚举类则返回 true</td></tr><tr><td>isInstance(Object obj)</td><td>如果 obj 是该类的实例则返回 true</td></tr><tr><td>isInterface()</td><td>如果是接口类则返回 true</td></tr><tr><td>isLocalClass()</td><td>如果是局部类则返回 true</td></tr><tr><td>isMemberClass()</td><td>如果是内部类则返回 true</td></tr></tbody></table><br><h3 id="field-类" tabindex="-1"><a class="header-anchor" href="#field-类" aria-hidden="true">#</a> <span id="t42">Field 类</span></h3><p>Field 代表类的成员变量（成员变量也称为类的属性）。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>equals(Object obj)</td><td>属性与 obj 相等则返回 true</td></tr><tr><td>get(Object obj)</td><td>获得 obj 中对应的属性值</td></tr><tr><td>set(Object obj, Object value)</td><td>设置 obj 中对应属性值</td></tr></tbody></table><br><h3 id="method-类" tabindex="-1"><a class="header-anchor" href="#method-类" aria-hidden="true">#</a> <span id="t43">Method 类</span></h3><p>Method 代表类的方法。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>invoke(Object obj, Object... args)</td><td>传递 object 对象及参数调用该对象对应的方法</td></tr></tbody></table><br><h3 id="constructor-类" tabindex="-1"><a class="header-anchor" href="#constructor-类" aria-hidden="true">#</a> <span id="t44">Constructor 类</span></h3><p>Constructor 代表类的构造方法。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>newInstance(Object... initargs)</td><td>根据传递的参数创建类的对象</td></tr></tbody></table><br><h3 id="相关知识点" tabindex="-1"><a class="header-anchor" href="#相关知识点" aria-hidden="true">#</a> <span id="t5">相关知识点</span></h3><p><strong>设置.setAccessible(true)暴力访问权限</strong></p><p>一般情况下，我们并不能对类的私有字段进行操作，利用反射也不例外。</p><p>调用 AccessibleObject 上的 setAccessible()方法来允许这种访问，而由于反射类中的 Field，Method 和 Constructor 继承自 AccessibleObject，因此，通过在这些类上调用 setAccessible()方法，我们可以实现对这些字段的操作。</p><p><strong>获取 Filed 两个方法的区别</strong></p><p>两者的区别就是 getDeclaredField() 获取的是 Class 中被 private 修饰的属性。 getField() 方法获取的是非私有属性，并且 getField() 在当前 Class 获取不到时会向祖先类获取。</p><p><strong>new 对象和反射得到对象的区别</strong></p><ol><li>在使用反射的时候，必须确保这个类已经加载并已经连接了。使用 new 的时候，这个类可以没有被加载，也可以已经被加载。</li><li>new 关键字可以调用任何 public 构造方法，而反射只能调用无参构造方法。</li><li>new 关键字是强类型的，效率相对较高。 反射是弱类型的，效率低。</li><li>反射提供了一种更加灵活的方式创建对象，得到对象的信息。如 Spring 中 AOP 等的使用，动态代理的使用，都是基于反射的。</li></ol><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="t6">参考文章</span></h2>',63),c={href:"https://lingcoder.gitee.io/onjava8/#/book/19-Type-Information",target:"_blank",rel:"noopener noreferrer"},p={href:"https://www.jianshu.com/p/9be58ee20dee",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.iteye.com/blog/lixh1986-1995942",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/qq_44241551/article/details/95920274",target:"_blank",rel:"noopener noreferrer"},u={href:"https://segmentfault.com/a/1190000015860183",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.jianshu.com/p/1fc45c89e76b",target:"_blank",rel:"noopener noreferrer"};function C(m,_){const e=s("ExternalLinkIcon");return o(),l("div",null,[h,t("p",null,[t("a",c,[r("https://lingcoder.gitee.io/onjava8/#/book/19-Type-Information"),d(e)])]),t("p",null,[t("a",p,[r("https://www.jianshu.com/p/9be58ee20dee"),d(e)])]),t("p",null,[t("a",b,[r("https://www.iteye.com/blog/lixh1986-1995942"),d(e)])]),t("p",null,[t("a",g,[r("https://blog.csdn.net/qq_44241551/article/details/95920274"),d(e)])]),t("p",null,[t("a",u,[r("https://segmentfault.com/a/1190000015860183"),d(e)])]),t("p",null,[t("a",f,[r("https://www.jianshu.com/p/1fc45c89e76b"),d(e)])])])}const j=a(i,[["render",C],["__file","RunTimeReflect.html.vue"]]);export{j as default};
