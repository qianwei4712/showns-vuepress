import{_ as l,r as c,o as p,c as t,b as n,d as s,a,f as o}from"./app-0869a5be.js";const i={},r=o('<div class="catalog"><ul><li><a href="#t1">前言</a></li><li><a href="#t2">compose 安装</a></li><li><a href="#t3">Hello Docker Compose</a></li><li><a href="#t4">compose 模板文件</a></li><li><a href="#t5">compose 命令语法</a></li><li><a href="#te">参考文章</a></li></ul></div><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> <span id="t1">前言</span></h2><p><code>Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排</p><p><strong>讲人话就是， 一个 <code>yml</code> 文件定义和运行多个 docker 容器，同时指定启动顺序</strong></p><br><h2 id="compose-安装" tabindex="-1"><a class="header-anchor" href="#compose-安装" aria-hidden="true">#</a> <span id="t2">compose 安装</span></h2><p>可以去</p><p>最简单的方法，直接敲两个命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">`</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose\n<span class="token function">chmod</span> +x /usr/local/bin/docker-compose\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',9),d={href:"https://github.com/docker/compose/releases",target:"_blank",rel:"noopener noreferrer"},u=o(`<ol><li><strong>下载文件名为 <code>docker-compose-Linux-x86_64</code></strong></li><li><strong>上传 <code>/usr/local/bin</code> ，重命名为 <code>docker-compose</code></strong></li><li>添加权限</li></ol><p>检测安装成功：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="hello-docker-compose" tabindex="-1"><a class="header-anchor" href="#hello-docker-compose" aria-hidden="true">#</a> <span id="t3">Hello Docker Compose</span></h2><p>Compose 中：</p><ul><li>每一个 service 都是一个容器</li><li>多个 service（容器）组成一个 project（项目）</li><li><strong>文件名必须是 <code>docker-compose.yml</code></strong></li></ul><br><p>先做个测试，创建一个 <code>docker-compose</code> 文件，弄个tomcat测试：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.0&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">tomcat-docker</span><span class="token punctuation">:</span>  <span class="token comment"># 唯一服务名</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">:</span>8.0<span class="token punctuation">-</span>jre8 <span class="token comment"># 创建当前这个容器的镜像</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8094<span class="token punctuation">:</span><span class="token number">8080</span>   <span class="token comment"># 映射端口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入目录下使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后台运行使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问地址，可以看到容器正常启动</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20210917221206037.png" alt="image-20210917221206037"></p><br><h2 id="compose-模板文件" tabindex="-1"><a class="header-anchor" href="#compose-模板文件" aria-hidden="true">#</a> <span id="t4">compose 模板文件</span></h2><p>最基础的模板在上面的例子中有了</p>`,19),m=n("code",null,"3.0",-1),k=n("code",null,"4.0",-1),v={href:"https://docs.docker.com/compose/compose-file/",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,[s("一个 "),n("code",null,"service"),s(" 代表一个容器，"),n("code",null,"services"),s(" 下可以有多个容器")],-1),g={href:"https://vuepress.mirror.docker-practice.com/compose/compose_file/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://gitee.com/pic_bed_of_shiva/picture/blob/master/images/%E7%BD%91%E9%A1%B5%E6%8D%95%E8%8E%B7_17-9-2021_23632_vuepress.mirror.docker-practice.com.jpeg",target:"_blank",rel:"noopener noreferrer"},y=o(`<br><p><strong>image</strong></p><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">image</span><span class="token punctuation">:</span> ubuntu
<span class="token key atrule">image</span><span class="token punctuation">:</span> orchardup/postgresql
<span class="token key atrule">image</span><span class="token punctuation">:</span> a4bc65fd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ports</strong></p><p>暴露端口信息。</p><p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ports</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> <span class="token string">&quot;3000&quot;</span>
 <span class="token punctuation">-</span> <span class="token string">&quot;49100:22&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>volumes</strong></p><p>数据卷所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。</p><p>该指令中路径支持相对路径。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">volumes</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> /var/lib/mysql
 <span class="token punctuation">-</span> cache/<span class="token punctuation">:</span>/tmp/cache
 <span class="token punctuation">-</span> ~/configs<span class="token punctuation">:</span>/etc/configs/<span class="token punctuation">:</span>ro
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果路径为数据卷名称，必须在文件中配置数据卷。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">my_src</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8.0</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> mysql_data<span class="token punctuation">:</span>/var/lib/mysql

<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql_data</span><span class="token punctuation">:</span> <span class="token comment"># 必须声明一下</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>container_name</strong></p><p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">docker-service-name</span><span class="token punctuation">:</span>  <span class="token comment"># 容器服务名</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> docker<span class="token punctuation">-</span>web<span class="token punctuation">-</span>container  <span class="token comment"># 容器名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>command</strong></p><p>覆盖容器启动后默认执行的命令。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">command</span><span class="token punctuation">:</span> echo &quot;hello world&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>build</strong></p><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>

  <span class="token key atrule">webapp</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./dir
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以使用 <code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。</p><p>使用 <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。使用 <code>arg</code> 指令指定构建镜像时的变量。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">webapp</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span>
      <span class="token key atrule">context</span><span class="token punctuation">:</span> /opt/docker
      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile<span class="token punctuation">-</span>alternate
      <span class="token key atrule">args</span><span class="token punctuation">:</span>
        <span class="token key atrule">buildno</span><span class="token punctuation">:</span> <span class="token number">1</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> webapp
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8080:8080&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>depends_on</strong></p><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> db
      <span class="token punctuation">-</span> redis

  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis

  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：<code>web</code> 服务不会等待 <code>redis</code> <code>db</code> 「完全启动」之后才启动。</p></blockquote><p><strong>networks</strong></p><p>配置容器连接的网络。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>

  <span class="token key atrule">some-service</span><span class="token punctuation">:</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> some<span class="token punctuation">-</span>network
     <span class="token punctuation">-</span> other<span class="token punctuation">-</span>network

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">some-network</span><span class="token punctuation">:</span>
  <span class="token key atrule">other-network</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>sysctls</strong></p><p>配置容器内核参数。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">sysctls</span><span class="token punctuation">:</span>
  <span class="token key atrule">net.core.somaxconn</span><span class="token punctuation">:</span> <span class="token number">1024</span>
  <span class="token key atrule">net.ipv4.tcp_syncookies</span><span class="token punctuation">:</span> <span class="token number">0</span>

<span class="token key atrule">sysctls</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> net.core.somaxconn=1024
  <span class="token punctuation">-</span> net.ipv4.tcp_syncookies=0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ulimits</strong></p><p>指定容器的 ulimits 限制值。</p><p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>
    <span class="token key atrule">nproc</span><span class="token punctuation">:</span> <span class="token number">65535</span>
    <span class="token key atrule">nofile</span><span class="token punctuation">:</span>
      <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">20000</span>
      <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">40000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>environment</strong></p><p>设置环境变量，例如设置 mysql 默认启动密码</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">environment</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>env_file</strong></p><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p><p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p><p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>env_file: .env

env_file:
  - ./apps/web.env
  - /opt/secrets.env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># common.env: Set development environment</span>
<span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方式可以防止 模板文件中因为使用 <code>environment</code> 而出现明文的敏感信息</p><br><h2 id="compose-命令语法" tabindex="-1"><a class="header-anchor" href="#compose-命令语法" aria-hidden="true">#</a> <span id="t5">compose 命令语法</span></h2><p>语法可以参考：</p>`,54),_={href:"https://vuepress.mirror.docker-practice.com/compose/compose_file/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://gitee.com/pic_bed_of_shiva/picture/blob/master/images/%E7%BD%91%E9%A1%B5%E6%8D%95%E8%8E%B7_17-9-2021_2363_vuepress.mirror.docker-practice.com.jpeg",target:"_blank",rel:"noopener noreferrer"},x=o(`<p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。</p><p>如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p><p><code>docker-compose</code> 命令的基本的使用格式是：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token punctuation">[</span>-f<span class="token operator">=</span><span class="token operator">&lt;</span>arg<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARGS<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>常用的比较少，记住几个就可以了。</p><br><p><strong>up</strong></p><blockquote><p>docker-compose up [options] [SERVICE...]</p></blockquote><ul><li><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p></li><li><p>链接的服务都将会被自动启动，除非已经处于运行状态。</p></li><li><p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p></li><li><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p></li><li><p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p></li><li><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p></li><li><p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容</p></li></ul><br><p><strong>down</strong></p><blockquote><p>docker-compose down</p></blockquote><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络。</p><br><p><strong>ps</strong></p><blockquote><p>docker-compose ps [options] [SERVICE...]</p></blockquote><p>列出项目中目前的所有容器。选项：</p><ul><li><code>-q</code> 只打印容器的 ID 信息。</li></ul><br><p><strong>log</strong></p><blockquote><p>docker-compose log 服务id</p></blockquote><p>查看服务日志</p><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="te">参考文章</span></h2>`,24),q={href:"https://www.bilibili.com/video/BV1VA411A7ka?p=24",target:"_blank",rel:"noopener noreferrer"},E={href:"https://gitee.com/pic_bed_of_shiva/static-resources/blob/9d6703845d7e661e11307f53f11743cb3910bd7d/showns/file/docker&docker-compose%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B.zip",target:"_blank",rel:"noopener noreferrer"},D={href:"https://vuepress.mirror.docker-practice.com/compose/",target:"_blank",rel:"noopener noreferrer"};function C(w,O){const e=c("ExternalLinkIcon");return p(),t("div",null,[r,n("p",null,[s("但是因为实在下载太慢，可以去 GitHub 上下载："),n("a",d,[s("Releases · docker/compose (github.com)"),a(e)]),s(" 安装。")]),u,n("ul",null,[n("li",null,[s("定义版本号，一般 "),m,s(" 到 "),k,s(" 都行，可以在官网查看对应关系："),n("a",v,[s("Compose file | Docker Documentation"),a(e)])]),b,n("li",null,[s("常用的模板文件用法如下，文档可以参考："),n("a",g,[s("Compose 模板文件 | Docker 从入门到实践"),a(e)])]),n("li",null,[n("a",h,[s("模板文件备用链接，长图"),a(e)])])]),y,n("ul",null,[n("li",null,[n("a",_,[s("Compose 模板文件 | Docker 从入门到实践 (docker-practice.com)"),a(e)])]),n("li",null,[n("a",f,[s("备用链接，长图"),a(e)])])]),x,n("p",null,[n("a",q,[s("Docker容器技术&Docker-Compose实战教程"),a(e)])]),n("p",null,[n("a",E,[s("docker&docker-compose实战教程.zip"),a(e)])]),n("p",null,[n("a",D,[s("Docker Compose 项目 | Docker 从入门到实践 (docker-practice.com)"),a(e)])])])}const S=l(i,[["render",C],["__file","DockerCompose.html.vue"]]);export{S as default};
