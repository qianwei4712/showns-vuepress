import{_ as s,o as a,c as e,f as n}from"./app-85a03126.js";const l={},t=n(`<div class="catalog"><ul><li><a href="#t1">概述</a></li><li><a href="#t2">mysqldump命令介绍</a><ul><li><a href="#t21">基础命令尝试</a></li><li><a href="#t22">命令进阶介绍</a></li><li><a href="#t23">异地备份</a></li><li><a href="#t24">增量备份</a></li></ul></li><li><a href="#t3">编写linux脚本</a></li><li><a href="#t4">定时任务crontabs</a></li><li><a href="#te">参考文章</a></li></ul></div><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> <span id="t1">概述</span></h3><p>其实主要手续就两个：</p><ol><li><p><strong>使用mysql自带的mysqldump数据备份工具编写sql导出命令;</strong></p></li><li><p><strong>使用linux crontabs定时任务，定时执行脚本命令;</strong></p></li></ol><p>其实很简单，这里讲我的实现过程和遇到的问题，讲的详细一点，所以可能会有点啰嗦。。。</p><br><h3 id="mysqldump命令介绍" tabindex="-1"><a class="header-anchor" href="#mysqldump命令介绍" aria-hidden="true">#</a> <span id="t2">mysqldump命令介绍</span></h3><h4 id="基础命令尝试" tabindex="-1"><a class="header-anchor" href="#基础命令尝试" aria-hidden="true">#</a> <span id="t21">基础命令尝试</span></h4><p>比如下面这行，作用是使用 <code>mysqldump</code> 导出 本地 <code>mysql</code> 的 <code>test</code> 数据库到 <code>/opt/test.sql</code> 文件（自动生成）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/usr/bin/mysqldump <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-proot</span> <span class="token parameter variable">-h127.0.0.1</span> <span class="token builtin class-name">test</span> <span class="token operator">&gt;</span> /opt/test.sql<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若出现命令不存在</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-bash: mysqldump: <span class="token builtin class-name">command</span> not found
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明目录下没有 <code>mysqldump</code> 文件，可以执行以下命令生成链接文件 （<code>/usr/local/mysql</code> 为一般mysql安装路径，请根据实际安装位置更换）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ln</span> <span class="token parameter variable">-fs</span> /usr/local/mysql/bin/mysqldump /usr/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，解释下上面命令的各项分解：</p><ul><li><code>/usr/bin/mysqldump</code> ：上述生成的mysqldump链接文件，mysql自带工具</li><li><code>-uroot</code>：-u + 数据库用户名</li><li><code>-proot</code>：-p + 数据库密码</li><li><code>-h127.0.0.1</code>：-h + 对应数据库ip；默认端口3306；若修改了端口加上如 <code>-P3307</code>，大写的 -P + 端口</li><li><code>test </code>：需要导出的数据库名，个人比较喜欢分别导出，一次性导出恢复比较麻烦</li><li><code>/opt/test.sql</code>：生成sql文件位置，随便写</li></ul><br><h4 id="命令进阶介绍" tabindex="-1"><a class="header-anchor" href="#命令进阶介绍" aria-hidden="true">#</a> <span id="t22">命令进阶介绍</span></h4><p>mysqldump 命令语法：</p><ol><li><p><strong>Mysqldump [option] db_name [tb1_name …]</strong> ,     备份库中某些表</p></li><li><p><strong>Mysqldump [option] --databases db_name1 db_name2...</strong> ,     备份指定数据库</p></li><li><p><strong>Mysqldump [option] --all-databases</strong> ,       备份整个数据库</p></li><li><p><strong>Mysqldump [option] db_name tb_name --where=&quot;条件语句&quot;</strong> ,      指定条件语句备份</p></li></ol><p>然后，实际情况下一般都会追加日期版本，并进行压缩，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/usr/bin/mysqldump <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-proot</span> <span class="token parameter variable">-h127.0.0.1</span> <span class="token builtin class-name">test</span> <span class="token operator">|</span> <span class="token function">gzip</span> <span class="token operator">&gt;</span> /opt/test-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> + %Y%m%d<span class="token variable">)</span></span>.tal.gz<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h4 id="异地备份" tabindex="-1"><a class="header-anchor" href="#异地备份" aria-hidden="true">#</a> <span id="t23">异地备份</span></h4><p>原本以为异地备份应该和本地备份一样，嗖嗖嗖就弄完了。。。。</p><div style="text-align:center;"><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/然而.jpg" alt="avatar"></p></div><p>网上一查资料，居然不是一行命令可以搞定的，基本方式就是以下</p><ul><li>ssh互信，然后 scp 或者 rsync 发送文件</li><li>在脚本内写入服务器 ip 用户密码，然后建立通道传输，参考： <a href="http://blog.sina.com.cn/s/blog_6727f9ee0100xnit.html" target="_blank">http://blog.sina.com.cn/s/blog_6727f9ee0100xnit.html</a></li></ul><p>想了想，决定搞一搞服务器互信。。。。</p><blockquote><p>scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令， scp传输是加密的，可能会稍微影响一下速度。</p><p>另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用</p></blockquote><div style="text-align:center;"><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/unc/总司扶墙.png" alt="avatar"></p></div><p>先配置下 SSH 互信，若mysql本机为客户机，远程为服务机（假设ip : 192.168.9.9）：</p><ol><li>在服务机上以 root 登陆，更改 <em>ssh</em> 配置文件 <code>/etc/ssh/sshd_config</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>RSAAuthentication <span class="token function">yes</span> <span class="token comment">#启用rsa认证</span>
PubkeyAuthentication <span class="token function">yes</span> <span class="token comment">#启用公钥私钥配对认证方式</span>
AuthorizedKeysFile .ssh/authorized_keys <span class="token comment">#公钥文件路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>重启服务机 ssh 服务</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart sshd 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>登陆客户机创建公钥私钥，一路回车就行了，然后会在 <code>/root/.ssh</code> 下生成文件：id_rsa、id_rsa.pub</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>把 id_rsa.pub 发送到服务端机器上</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-copy-id <span class="token parameter variable">-i</span> /root/.ssh/id_rsa.pub <span class="token number">192.168</span>.9.9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个时候要输入一次服务机的root密码，然后发送成功</p><ol start="5"><li>验证尝试登陆</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token number">192.168</span>.9.9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后现在建立互信后，可以使用 SCP 命令进行文件传输。</p><ul><li>上传到服务器上： <strong>scp /path/filename username@servername:/path</strong></li><li>从服务器上下载： <strong>scp username@servername:/path/filename /path</strong></li><li>上传多个文件： <strong>scp /path/filename1 /path/filename2 username@servername:/path</strong></li><li>递归上传整个文件夹： <strong>scp -r /path username@servername:/path</strong></li></ul><p>反正就是，<code>scp ... to ...</code> 这个意思。</p><p>现在测试下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">scp</span> /opt/test.sql root@192.168.9.9:/opt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然，这当然不可能出问题。</p><div style="text-align:center;"><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/面无表情.jpg" alt="avatar"></p></div><br><h4 id="增量备份" tabindex="-1"><a class="header-anchor" href="#增量备份" aria-hidden="true">#</a> <span id="t24">增量备份</span></h4><p>增量备份也没搞过，继续百度。。。。。</p><div style="text-align:center;"><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/妈耶那我凉了啊.jpg" alt="avatar"></p></div><p><a href="https://www.cnblogs.com/kevingrace/p/6114979.html" target="_blank">https://www.cnblogs.com/kevingrace/p/6114979.html</a></p><p>根据上面这篇博客的介绍，增量备份前提是开启了 mysql-binlog 日志功能，其实就是备份操作日志。。。。</p><p>binlog一般都是百分百开启的，不然。。。最近的比特币勒索这么猖獗，万一中招了那就麻烦了。。。。</p><p>增量备份，这里就不搞了，我们目前都是每日全备的。。。。。有兴趣的参考下上面的博客</p><br><h3 id="编写linux脚本" tabindex="-1"><a class="header-anchor" href="#编写linux脚本" aria-hidden="true">#</a> <span id="t3">编写linux脚本</span></h3><p>我直接在 <code>opt</code> 目录下创建一个 <code>backup.sh</code> 脚本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vi</span> /opt/backup.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>本地备份脚本</strong></p><p>首先是本地备份，简单点直接导出sql就行了。个人比较喜欢分数据库多次导出，因为想要用哪个就可以直接拿哪个。</p><p>将要执行的命令保存好，多个数据库导出用多个命令；必须用 <code>;</code> 分号结尾，不然生成文件出错</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/usr/bin/mysqldump -uroot -proot -h127.0.0.1 test | gzip &gt; /opt/test.sql.gz;
/usr/bin/mysqldump -uroot -proot -h127.0.0.1 test2 | gzip &gt; /opt/test2.sql.gz;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>保存好后可以执行下试试，若存在权限问题，记得设置下权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> backup.sh 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>若出现以下错误</p><blockquote><p>mysqldump: Got error: 1449: The user specified as a definer (&#39;xxxx&#39;@&#39;%&#39;) does not exist when using LOCK TABLES</p></blockquote><p>xxxx这个用户也不存在，我查了下，是因为这个数据库是从库复制过来，带有原来的用户信息</p><blockquote><p>select * FROM information_schema.views</p></blockquote><p>执行该sql语句可以看到数据库下有这个用户；</p><p>我的解决方法就是，直接创建这个不存在的用户，分配下权限，更新缓存，就行了</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;xxxx&#39;</span><span class="token variable">@&#39;%&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>异地备份脚本</strong></p><p>然后整合下以上所有命令，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment">#异地服务器ip</span>
<span class="token assign-left variable">HOST</span><span class="token operator">=</span><span class="token number">192.168</span>.9.9
<span class="token comment">#备份日期</span>
<span class="token assign-left variable">DATE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d<span class="token variable">)</span></span>

/usr/bin/mysqldump <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-proot</span> <span class="token parameter variable">-h127.0.0.1</span> <span class="token builtin class-name">test</span> <span class="token operator">|</span> <span class="token function">gzip</span> <span class="token operator">&gt;</span> /opt/test-<span class="token string">&quot;<span class="token variable">$DATE</span>&quot;</span>.sql.gz<span class="token punctuation">;</span>
<span class="token function">scp</span> /opt/test-<span class="token string">&quot;<span class="token variable">$DATE</span>&quot;</span>.sql.gz root@<span class="token string">&quot;<span class="token variable">$HOST</span>&quot;</span>:/opt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个比较简单的本地异地备份脚本命令就这要了。多个文件的话，根据 SCP 命令上传文件夹或者批量上传稍微改下就行了。</p><br><h3 id="定时任务crontabs" tabindex="-1"><a class="header-anchor" href="#定时任务crontabs" aria-hidden="true">#</a> <span id="t4">定时任务crontabs</span></h3><p>首先安装crontabs，启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> crontabs<span class="token punctuation">;</span>
<span class="token function">service</span> crond start<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后设置需要执行的任务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">crontab</span> <span class="token parameter variable">-e</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如每天凌晨3点执行备份命令，保存以下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">0</span> <span class="token number">3</span> * * *  /opt/backup.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，就结束了；</p><div style="text-align:center;"><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/雷军：是不是碉堡了.jpg" alt="avatar"></p></div><p>最后补充下crond的参数使用，前面五位是定时执行的时间周期，说明如下：</p><blockquote><p>第一个 * 表示分钟：取值范围 0-59</p><p>第二个 * 表示小时：取值范围0-23</p><p>第三个 * 表示天数：取值范围1-31</p><p>第四个 * 表示月份：取值范围1-12</p><p>第五个 * 表示每周：取值范围0-6</p></blockquote><ul><li><p>使用(-)可以划定范围</p><p>如：0 0-3 * * * 脚本 表示每天0-3点整执行脚本</p></li><li><p>使用(,)可以枚举时间</p><p>​ 如: 0,15,30,45 * * * * 脚本 表示每个小时的0分，15分，45分，30分会执行脚本</p></li><li><p>使用(/)可以指定间隔</p><p>​ 如：* */8 * * * 脚本 表示每8小时执行脚本</p></li><li><p>组合用法</p><p>​ 0-20/10 * * * * 脚本 表示在前20分钟内每隔10分钟执行脚本</p></li></ul><h3 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="te">参考文章</span></h3><p><a href="https://www.cnblogs.com/machangwei-8/p/10352759.html" target="_blank">https://www.cnblogs.com/machangwei-8/p/10352759.html</a></p><p><a href="https://blog.csdn.net/u013144287/article/details/75093181" target="_blank">https://blog.csdn.net/u013144287/article/details/75093181</a></p><p><a href="https://www.cnblogs.com/hushaojun/p/4636002.html" target="_blank">https://www.cnblogs.com/hushaojun/p/4636002.html</a></p><p><a href="https://www.cnblogs.com/jytx/p/7272860.html" target="_blank">https://www.cnblogs.com/jytx/p/7272860.html</a></p><p><a href="https://blog.csdn.net/baidu_31405631/article/details/93190135" target="_blank">https://blog.csdn.net/baidu_31405631/article/details/93190135</a></p><p><a href="https://www.cnblogs.com/kevingrace/p/6114979.html" target="_blank">https://www.cnblogs.com/kevingrace/p/6114979.html</a></p>`,100),i=[t];function p(o,r){return a(),e("div",null,i)}const d=s(l,[["render",p],["__file","MysqldumpBackupSql.html.vue"]]);export{d as default};
