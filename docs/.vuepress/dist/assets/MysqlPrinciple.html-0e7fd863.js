import{_ as o,r as l,o as r,c as p,b as s,d as n,a as e,f as t}from"./app-0869a5be.js";const i={},d=t(`<div class="catalog"><ul><li><a href="#MySQL%E6%9E%B6%E6%9E%84">MySQL 架构</a></li><li><a href="#MySQL%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6">MySQL 系统文件</a><ul><li><a href="#binlog%E6%97%A5%E5%BF%97">binlog 日志</a></li><li><a href="#my.cnf%E9%85%8D%E7%BD%AE">my.cnf 配置</a></li></ul></li><li><a href="#%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E">存储引擎</a></li><li><a href="#SQL%E6%89%A7%E8%A1%8C%E4%B8%8EJOIN">SQL 执行与 JOIN</a></li><li><a href="#%E7%B4%A2%E5%BC%95%E8%AE%B2%E8%A7%A3">索引讲解</a></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></div><h2 id="mysql-架构" tabindex="-1"><a class="header-anchor" href="#mysql-架构" aria-hidden="true">#</a> <span id="MySQL架构">MySQL 架构</span></h2><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211225190105621.png" style="zoom:80%;"><p>客户端连接器就是我们常见的 JDBC 等数据库连接框架。</p><p>MySQL Server 就是我们说的数据库了，它的模块和作用分别为：</p><table><thead><tr><th>顺序</th><th>组件</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>连接池</td><td>管理、缓冲用户的连接，线程处理等需要缓存的需求，一个线程负责一个连接</td></tr><tr><td>2</td><td>SQL 接口</td><td>接受用户的SQL命令，并且返回用户需要查询的结果；比如 DML、DDL、试图、触发器等。SQL语句在查询之前会使用查询优化器对查询进行优化</td></tr><tr><td>3</td><td>解析器</td><td>SQL命令传递到解析器的时候会被解析器验证和解析(权限、语法结构)</td></tr><tr><td>4</td><td>查询优化器</td><td>SQL语句在查询之前会使用查询优化器对查询进行优化，MySQL 自带的查询优化</td></tr><tr><td>5</td><td>缓存</td><td>如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据</td></tr><tr><td>6</td><td>存储引擎</td><td>存储引擎说白了就是如何管理操作数据（存储数据、如何更新、查询数据等）的一种方法。因为在关系数据库中数据的存储是以表的形式存储的，所以存储引擎也可以称为表类型（即存储和操作此表的类型</td></tr><tr><td>7</td><td>系统管理和控制工具</td><td>系统管理和控制工具，例如备份恢复、Mysql复制、集群等</td></tr></tbody></table><p>流程如下：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/v2-b29359b4bc5e849601c5df10a2a8e484_720w.jpg" alt=""></p><p>再按照人话解释一遍：</p><ol><li>显示客户端发起连接，连接器用来做 <code>身份认证</code>、<code>线程重用</code>，最后 <strong>建立连接</strong></li><li>然后 SQL接口 拿到需要执行的语句，包括：DDL、DML等，然后 <strong>对语句进行分析</strong> ，简单讲也就是明确下这一句脚本有哪些关键词</li></ol><blockquote><ul><li><strong>数据定义语言（DDL）：常用的有CREATE和DROP，用于在数据库中创建新表或删除表，以及为表加入索引等。</strong></li><li><strong>数据操纵语言（DML）：主要用来对数据库的数据进行一些操作，常用的就是INSERT、UPDATE、DELETE。</strong>**</li></ul></blockquote><ol start="3"><li>然后 解析器（分析器） 拿到 SQL接口分析后的内容，<strong>再进行执行分析，明确执行哪张表、修改什么字段</strong></li><li>如果缓存里已经有了，就直接返回；没有的话再往下执行</li><li>也有可能我们写的脚本 MySQL 可以不认可，它会 <strong>使用自己的优化器，对我们的 SQL 进行执行优化</strong></li><li>最后执行器调用存储引擎，进行读写</li></ol><br><h2 id="mysql-系统文件" tabindex="-1"><a class="header-anchor" href="#mysql-系统文件" aria-hidden="true">#</a> <span id="MySQL系统文件">MySQL 系统文件</span></h2><p>MySQL 数据存储在系统文件上，是物理存储。由存储引擎完成交互，主要内容如下：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/20211231 MySQL 学习相关导图.png" alt=""></p><p>系统文件中，最值得关注的，应该就是 <strong>my.cnf 配置文件</strong> 以及 <strong>binlog 二进制日志</strong></p><br><h3 id="binlog-日志" tabindex="-1"><a class="header-anchor" href="#binlog-日志" aria-hidden="true">#</a> <span id="binlog日志">binlog 日志</span></h3><p>binlog 就是binary log，二进制日志文件，这个文件记录了mysql所有的 DML 操作。</p><p>通过 binlog 日志我们可以做数据恢复，做主住复制和主从复制等等，对于运维或者架构人员来讲是非常重要的。</p><blockquote><p><strong>由于日志的记录带来的直接性能损耗就是数据库系统中最为昂贵的IO资源。</strong></p></blockquote><p>binlog 为了运维数据安全，而牺牲了一部分性能。</p><h4 id="日志模式" tabindex="-1"><a class="header-anchor" href="#日志模式" aria-hidden="true">#</a> 日志模式</h4><p><strong>Mysql binlog日志有三种格式，分别是Statement、MiXED、ROW</strong></p><ul><li>Statement：每一条会修改数据的sql都会记录在binlog中</li></ul><p>优点：不需要记录每一行的变化，减少了binlog日志量，节约了IO，提高性能。</p><p>缺点：由于记录的只是执行语句，为了这些语句能在slave上正确运行，因此还必须记录每条语句在执行的时候的一些相关信息，以保证所有语句能在slave得到和在master端执行时候相同的结果。</p><ul><li>Row:不记录sql语句上下文相关信息，仅保存哪条记录被修改</li></ul><p>优点：rowlevel的日志内容会非常清楚的记录下每一行数据修改的细节。而且不会出现某些特定情况下的存储过程，或function，以及trigger的调用和触发无法被正确复制的问题</p><p>缺点：所有的执行的语句当记录到日志中的时候，都将以每行记录的修改来记录，这样可能会产生大量的日志内容，造成binlog日志量会很大。</p><ul><li>Mixedlevel: 是以上两种level的混合使用</li></ul><p>一般的语句修改使用statment格式保存binlog，如一些函数，statement无法完成主从复制的操作，则采用row格式保存binlog,MySQL会根据执行的每一条具体的sql语句来区分对待记录的日志形式，也就是在Statement和Row之间选择一种。</p><h4 id="开启日志" tabindex="-1"><a class="header-anchor" href="#开启日志" aria-hidden="true">#</a> 开启日志</h4><p>在 my.cnf 配置文件中填写</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 打开binlog日志</span>
<span class="token key attr-name">log_bin</span><span class="token punctuation">=</span><span class="token value attr-value">ON</span>
<span class="token comment"># binlog日志的基本文件名，后面会追加标识来表示每一个文件</span>
<span class="token key attr-name">log_bin_basename</span><span class="token punctuation">=</span><span class="token value attr-value">/var/lib/mysql/mysql-bin</span>
<span class="token comment"># binlog日志的基本文件名，后面会追加标识来表示每一个文件</span>
<span class="token key attr-name">log_bin_index</span><span class="token punctuation">=</span><span class="token value attr-value">/var/lib/mysql/mysql-bin.index</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后可以通过以下命令检查：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">show</span> <span class="token value attr-value">master status;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="数据恢复" tabindex="-1"><a class="header-anchor" href="#数据恢复" aria-hidden="true">#</a> 数据恢复</h4><p>使用 以下命令可以查看 binlog 日志中的二进制记录：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> binlog events <span class="token operator">in</span> <span class="token string">&#39;mysql-bin.000003&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">show</span> binlog events <span class="token operator">in</span> <span class="token string">&#39;mysql-bin.000003&#39;</span> <span class="token keyword">from</span> <span class="token number">406</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/1292627-20190507153243655-1493589710.png" alt=""></p><p>退出mysql ，使用 mysql 自带的 <strong>mysqlbinlog</strong> 工具进行恢复</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//按指定时间恢复
mysqlbinlog --start-datetime<span class="token operator">=</span><span class="token string">&quot;2020-04-25 18:00:00&quot;</span> --stop-datetime<span class="token operator">=</span><span class="token string">&quot;2020-04-26 00:00:00&quot;</span> mysqlbinlog.000002 <span class="token operator">|</span> mysq1 <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-proot</span>
//按事件位置号恢复
mysqlbinlog --start-position<span class="token operator">=</span><span class="token number">154</span> --stop-position<span class="token operator">=</span><span class="token number">957</span> mysqlbinlog.000002 <span class="token operator">|</span> mysq1 uroot <span class="token parameter variable">-proot</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制" aria-hidden="true">#</a> 主从复制</h4><p>主从复制需要的必要条件：</p><blockquote><p><strong>服务器操作系统版本和位数一致、数据库的版本和位数一样、同时开启binlog、配置文件中server_id在局域网内唯一</strong></p></blockquote><p>master 数据库配置：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>[mysqld]
<span class="token key attr-name">log_bin</span><span class="token punctuation">=</span><span class="token value attr-value">mysql-bin-1 #文件名mysql-bin-1</span>
<span class="token key attr-name">server_id</span><span class="token punctuation">=</span><span class="token value attr-value">1 #服务ID，用于区分服务，范围1~2^32-1</span>
<span class="token comment">#MySQL 磁盘写入策略以及数据安全性</span>
<span class="token comment">#每次事务提交时MySQL都会把log buffer的数据写入log file，并且flush(刷到磁盘)中去</span>
<span class="token key attr-name">innodb_flush_log_at_trx_commit</span><span class="token punctuation">=</span><span class="token value attr-value">1 </span>
<span class="token comment">#当sync_binlog =N (N&gt;0) ，MySQL 在每写 N次 二进制日志binary log时，会使用fdatasync()函数将它的写二进制日志binary log同步到磁盘中去。</span>
<span class="token key attr-name">sync_binlog</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">binlog-do-db</span><span class="token punctuation">=</span><span class="token value attr-value">test #同步数据库</span>
<span class="token comment">#mysql复制模式，三种：SBR（基于sql语句复制），RBR（基于行的复制），MBR（混合模式复制）</span>
<span class="token key attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token value attr-value">MIXED #混合模式复制</span>
<span class="token key attr-name">expire_logs_days</span><span class="token punctuation">=</span><span class="token value attr-value">7 #binlog过期清理时间</span>
<span class="token key attr-name">max_binlog_size</span><span class="token punctuation">=</span><span class="token value attr-value">20M #binlog每个日志文件大小</span>
skip-name-resolve
<span class="token key attr-name">datadir</span><span class="token punctuation">=</span><span class="token value attr-value">/var/lib/mysql</span>
<span class="token key attr-name">socket</span><span class="token punctuation">=</span><span class="token value attr-value">/var/lib/mysql/mysql.sock</span>
<span class="token comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span>
<span class="token key attr-name">symbolic-links</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
<span class="token comment"># Recommended in standard MySQL setup</span>
<span class="token key attr-name">sql_mode</span><span class="token punctuation">=</span><span class="token value attr-value">NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES </span>
[mysqld_safe]
<span class="token key attr-name">log-error</span><span class="token punctuation">=</span><span class="token value attr-value">/var/log/mysqld.log</span>
<span class="token key attr-name">pid-file</span><span class="token punctuation">=</span><span class="token value attr-value">/var/run/mysqld/mysqld.pid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>slave 数据库配置，其他配置都一样：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>[mysqld]
<span class="token key attr-name">log_bin</span><span class="token punctuation">=</span><span class="token value attr-value">mysql-bin-2 #文件名mysql-bin-2</span>
<span class="token key attr-name">server_id</span><span class="token punctuation">=</span><span class="token value attr-value">2  #服务ID，用于区分服务，范围1~2^32-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建同步权限及赋权，在 master mysql中新建同步权限：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">grant</span> <span class="token keyword">replication</span> slave <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">&#39;root&#39;</span><span class="token variable">@&#39;B&#39;</span> identified <span class="token keyword">by</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完成 Master 和 Slave 链接步骤：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>查询master状态</td><td><code>show master status;</code></td></tr><tr><td>根据master状态信息，在slave上设置master信息</td><td><code>change master to master_host=&#39;A&#39;,master_port=3306,master_user=&#39;root&#39;,master_password=&#39;123456&#39;,master_log_file=&#39;mysql-bin-2.000009&#39;,master_log_pos=120;</code></td></tr><tr><td>开始slave的同步</td><td><code>start slave;</code></td></tr><tr><td>查看slave的状态</td><td><code>show slave status\\G;</code></td></tr></tbody></table><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20220101001014707.png" alt=""></p><h4 id="其他操作" tabindex="-1"><a class="header-anchor" href="#其他操作" aria-hidden="true">#</a> 其他操作</h4><ul><li><code>flush logs</code> ：刷新日志，创建一个新的 binlog 文件</li><li><code>reset master</code> ：清空全部 binlog 日志文件，重新开始</li><li><code>show variables like &#39;expire_logs_days&#39;</code> ：该参数表示binlog日志自动删除/过期的天数，默认值为0，表示不自动删除</li><li><code> purge master logs before &#39;2012-03-30 17:20:00&#39;;</code> ：删除指定日期以前的日志索引中binlog日志文件</li></ul><br><h3 id="my-cnf-配置" tabindex="-1"><a class="header-anchor" href="#my-cnf-配置" aria-hidden="true">#</a> <span id="my.cnf配置">my.cnf 配置</span></h3><p>my.cnf 一般在 <code>/etc/my.cnf</code> ，配置参数可以参考下面链接：</p>`,61),c={href:"https://www.yuque.com/shiva/bvds0d/vty11e",target:"_blank",rel:"noopener noreferrer"},u=t(`<br><h2 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎" aria-hidden="true">#</a> <span id="存储引擎">存储引擎</span></h2><p>MySQL 采用了插件式存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离，可以更好的切换不同应用场景。</p><p>全部引擎上图中已经列举，但是我们使用过的就两种： <strong>MyISAM</strong> 和 <strong>InnoDB</strong></p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20220101113825342.png" alt=""></p><p>使用以下命令，可以查看当前默认的存储引擎：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%storage_engine%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后就是这两个存储引擎的对比：</p>`,8),m={href:"https://docs.oracle.com/cd/E17952_01/mysql-5.5-en/storage-engines.html",target:"_blank",rel:"noopener noreferrer"},g=t(`<table><thead><tr><th>Feature</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td><strong>B 树索引</strong></td><td>Yes</td><td>Yes</td></tr><tr><td><strong>备份/时间点恢复</strong></td><td>Yes</td><td>Yes</td></tr><tr><td><strong>群集数据库支持</strong></td><td>No</td><td>No</td></tr><tr><td><strong>聚集索引</strong></td><td>No</td><td>Yes</td></tr><tr><td><strong>压缩数据</strong></td><td>Yes</td><td>Yes</td></tr><tr><td><strong>数据缓存</strong></td><td>No</td><td>Yes</td></tr><tr><td><strong>加密数据</strong></td><td>Yes</td><td>Yes</td></tr><tr><td><strong>外键支持</strong></td><td>No</td><td>Yes</td></tr><tr><td><strong>全文搜索索引</strong></td><td>Yes</td><td>Yes</td></tr><tr><td><strong>地理空间数据类型支持</strong></td><td>Yes</td><td>Yes</td></tr><tr><td><strong>地理空间索引支持</strong></td><td>Yes</td><td>Yes</td></tr><tr><td><strong>哈希索引</strong></td><td>No</td><td>No</td></tr><tr><td><strong>索引缓存</strong></td><td>Yes</td><td>Yes</td></tr><tr><td><strong>锁定粒度</strong></td><td>Table</td><td>Row</td></tr><tr><td><strong>断续器</strong></td><td>No</td><td>Yes</td></tr><tr><td><strong>复制支持</strong></td><td>Yes</td><td>Yes</td></tr><tr><td><strong>仓储限制</strong></td><td>256TB</td><td>64TB</td></tr><tr><td><strong>T 树索引</strong></td><td>No</td><td>No</td></tr><tr><td><strong>事务</strong></td><td>No</td><td>Yes</td></tr><tr><td><strong>更新数据字典的统计信息</strong></td><td>Yes</td><td>Yes</td></tr></tbody></table><br><p>对比的话就看看表好了，总结一下：</p><blockquote><ul><li><strong>MyISAM：不支持事务，只支持表锁。即使操作一条数据也会锁住整张表，不支持高并发。适合用在文章、内容存储，例如：评论表、文章表。</strong></li><li><strong>InnoDB：支持事务，支持行锁。用在所有需要事务的操作，高并发的表。</strong></li></ul></blockquote><br><h2 id="sql-执行与-join" tabindex="-1"><a class="header-anchor" href="#sql-执行与-join" aria-hidden="true">#</a> <span id="SQL执行与JOIN">SQL 执行与 JOIN</span></h2><p>一句完整的 SQL 执行顺序如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">DISTINCT</span>  <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">Top</span> Num<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">select</span> list<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> <span class="token punctuation">[</span>left_table<span class="token punctuation">]</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>join_type<span class="token operator">&gt;</span> <span class="token keyword">JOIN</span> <span class="token operator">&lt;</span>right_table<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">ON</span> <span class="token operator">&lt;</span>join_condition<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>where_condition<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>group_by_list<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">WITH</span> <span class="token operator">&lt;</span>CUBE <span class="token operator">|</span> RollUP<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">HAVING</span> <span class="token operator">&lt;</span>having_condition<span class="token operator">&gt;</span>
<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>order_by_list<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20220101134949740.png" alt=""></p>`,9),k={href:"https://www.runoob.com/w3cnote/sql-join-image-explain.html",target:"_blank",rel:"noopener noreferrer"},b=t(`<img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/sql-join.png" style="zoom:80%;"><br><h2 id="索引讲解" tabindex="-1"><a class="header-anchor" href="#索引讲解" aria-hidden="true">#</a> <span id="索引讲解">索引讲解</span></h2><p>索引相关知识图谱如下：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/20211231 MySQL 学习相关导图-16411277207761.png" alt=""></p><blockquote><p><strong>索引也很庞大，所以索引也是保存在系统文件中。</strong></p></blockquote><br><h3 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h3><p>索引基本使用语法，也就是新增、删除，语句都比较简单。</p><p><strong>添加索引：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 唯一索引创建</span>
<span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> indexName <span class="token keyword">ON</span> tablename<span class="token punctuation">(</span>columnname<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> tablename <span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> indexName <span class="token keyword">ON</span> tablename<span class="token punctuation">(</span>columnname<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment"># 普通索引创建</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> indexName <span class="token keyword">ON</span> tablename<span class="token punctuation">(</span>columnname<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除索引：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token punctuation">[</span>indexname<span class="token punctuation">]</span> <span class="token keyword">ON</span> tablename<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看索引：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> tablename<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="btree-原理" tabindex="-1"><a class="header-anchor" href="#btree-原理" aria-hidden="true">#</a> BTree 原理</h3><p>在开始之前，首先理解下：<em>磁盘中分为一个一个的磁盘块，数据则是存储在一个一个的磁盘块中。</em></p><p>然后看 B+树的示意图，<strong>每次查询一个通过一个指针查询数据块，都进一步靠近目标值</strong>：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/20210102 MySQL 原理相关绘图.png" alt=""></p><p>通过示意图，我们可以得出：</p><blockquote><ul><li><p><strong>真实数据保存在叶子节点，非叶子节点不保存真实数据</strong></p></li><li><p><strong>B+树的高度，就是查询的次数</strong></p></li></ul></blockquote><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="参考文章">参考文章</span></h2>`,22),h={href:"https://www.cnblogs.com/qdmpky/archive/2020/07/14/13299246.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.cnblogs.com/yanjieli/p/9780100.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://zhuanlan.zhihu.com/p/146502753",target:"_blank",rel:"noopener noreferrer"},_={href:"http://c.biancheng.net/view/7939.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.jianshu.com/p/cf4e34fb999f?utm_campaign=hugo",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/u013544734/article/details/80869135",target:"_blank",rel:"noopener noreferrer"},w={href:"https://blog.csdn.net/king_kgh/article/details/74800513",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.cnblogs.com/kevingrace/p/6065088.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://blog.csdn.net/songrenqing/article/details/80330592",target:"_blank",rel:"noopener noreferrer"},L={href:"https://blog.csdn.net/ruben95001/article/details/86708382",target:"_blank",rel:"noopener noreferrer"},N={href:"https://www.cnblogs.com/panwenbin-logs/p/8360703.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://blog.csdn.net/u014044812/article/details/51004754",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://www.cnblogs.com/qanholas/archive/2010/10/24/1859924.html",target:"_blank",rel:"noopener noreferrer"};function x(D,B){const a=l("ExternalLinkIcon");return r(),p("div",null,[d,s("ul",null,[s("li",null,[s("a",c,[n("MySQL 配置文件 my.cnf 参数参考 · 语雀 (yuque.com)"),e(a)])])]),u,s("ul",null,[s("li",null,[n("官方表格文档："),s("a",m,[n("第 15 章 替代存储引擎 (oracle.com)"),e(a)])])]),g,s("p",null,[n("SQL Join 关系如下："),s("a",k,[n("一张图看懂 SQL 的各种 JOIN 用法 | 菜鸟教程 (runoob.com)"),e(a)])]),b,s("ol",null,[s("li",null,[s("a",h,[n("Mysql 架构分析 - 若水一剑 - 博客园 (cnblogs.com)"),e(a)])]),s("li",null,[s("a",v,[n("MySQL体系结构 - 别来无恙- - 博客园 (cnblogs.com)"),e(a)])]),s("li",null,[s("a",y,[n("MySQL基本架构 - 知乎 (zhihu.com)"),e(a)])]),s("li",null,[s("a",_,[n("MySQL体系结构详解 (biancheng.net)"),e(a)])]),s("li",null,[s("a",q,[n("6.MySQL架构详解 - 简书 (jianshu.com)"),e(a)])]),s("li",null,[s("a",f,[n("《SQL中有关DQL、DML、DDL、DCL的概念与区别》_小贪玩-CSDN博客_dcl dql"),e(a)])]),s("li",null,[s("a",w,[n("开启MySQL的binlog日志_happyfly的博客-CSDN博客_mysql开启binlog"),e(a)])]),s("li",null,[s("a",S,[n("MySQL 数据库之Binlog日志使用总结 - 散尽浮华 - 博客园 (cnblogs.com)"),e(a)])]),s("li",null,[s("a",E,[n("mysql中利用binlog日志恢复数据_songrenqing-CSDN博客_利用binlog日志恢复mysql数据"),e(a)])]),s("li",null,[s("a",L,[n("二、binlog的主从复制_编程的小新的博客-CSDN博客_binlog主从复制"),e(a)])]),s("li",null,[s("a",N,[n("mysql之my.cnf详解 - 百衲本 - 博客园 (cnblogs.com)"),e(a)])]),s("li",null,[s("a",M,[n("关于sql和MySQL的语句执行顺序(必看！！！)_猪哥-CSDN博客_sql执行顺序"),e(a)])]),s("li",null,[s("a",Q,[n("sql执行顺序 - qanholas - 博客园 (cnblogs.com)"),e(a)])])])])}const Y=o(i,[["render",x],["__file","MysqlPrinciple.html.vue"]]);export{Y as default};
