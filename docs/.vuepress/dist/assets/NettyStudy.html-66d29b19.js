import{_ as p,r as o,o as c,c as l,b as n,d as s,a as t,f as e}from"./app-c1e62972.js";const i={},u=n("h2",{id:"开场废话",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开场废话","aria-hidden":"true"},"#"),s(" 开场废话")],-1),r=n("p",null,[n("code",null,"2022.04.16，终于到 Netty 了，就是奔着这个来的")],-1),d=n("blockquote",null,[n("p",null,"官方说明：Netty 是一个异步的，事件驱动的网络应用框架，可以快速开发可维护的高性能协议服务器和客户端。")],-1),k={href:"https://github.com/netty/netty",target:"_blank",rel:"noopener noreferrer"},v={href:"https://netty.io/wiki/index.html",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,"[Netty权威指南 第2版 带书签目录 完整版.pdf · Drawing Bed of First/static-resources - 码云 - 开源中国 (gitee.com)](https://gitee.com/pic_bed_of_shiva/static-resources/blob/master/showns/ebook/Netty权威指南 第2版 带书签目录 完整版.pdf)",-1),b=e(`<p>Netty 在网络编程中的地位，相当于 Spring 在 JavaEE 体系中的地位，是当之无愧的武林霸主。</p><p>使用 Netty 的框架包括：<code>Spark</code>、<code>RocketMQ</code>、<code>ElasticSearch</code>、<code>Dubbo</code>、<code>Zookeeper</code>等，都是大名鼎鼎啊；</p><hr><p>上面已经说过了，Netty 是基于 NIO 开发的网络协议框架，稳定版本是 4.1;</p><p>Netty 5 已经被废弃，原本是为了引入 AIO，后来发现效果不好。</p><br><h2 id="入门示例代码" tabindex="-1"><a class="header-anchor" href="#入门示例代码" aria-hidden="true">#</a> 入门示例代码</h2><p>引入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.1.75.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NettyServer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token function">run</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// NioEventLoopGroup，可以简单理解为  线程池+Selector;</span>
        <span class="token comment">// bossGroup: 用来accept客户端连接</span>
        <span class="token class-name">EventLoopGroup</span> bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// workerGroup: 处理客户端数据的读写操作</span>
        <span class="token class-name">EventLoopGroup</span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 启动服务的辅助类，有关socket的参数可以通过ServerBootstrap进行设置</span>
            <span class="token class-name">ServerBootstrap</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>
                    <span class="token comment">// 选择服务 Scoket 实现类，通常使用 NioServerSocketChannel，表示基于 NIO 的服务器端实现</span>
                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                    <span class="token comment">// 配置参数，服务端可连接队列数 100</span>
                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_BACKLOG</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingHandler</span><span class="token punctuation">(</span><span class="token class-name">LogLevel</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token comment">// 通常会为新 SocketChannel 通过添加一些 handler，来设置 ChannelPipeline。</span>
                    <span class="token comment">// ChannelInitializer 是一个特殊的handler，其中initChannel方法可以为SocketChannel 的 pipeline 添加指定 handler。</span>
                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 添加业务处理类，如果存在多个将会按顺序进行处理</span>
<span class="token comment">//                            ch.pipeline().addLast(new StringDecoder());</span>
                            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//绑定端口，启动服务</span>
            <span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 等待通道关闭</span>
            f<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// Shut down all event loops to terminate all threads.</span>
            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NioServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>buf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        buf<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务端收到消息：&quot;</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ByteBuf</span> resp<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            resp <span class="token operator">=</span> <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;netty received&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            resp <span class="token operator">=</span> <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;fu*k nertty&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected exception from downstream.&quot;</span> <span class="token operator">+</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Netty 对 <code>EventLoopGroup</code> 接口针对不同的传输协议提供了不同的实现</li><li>Scoket 实现类中，除了 <code>NioServerSocketChannel</code>，还有以下两种：</li></ul><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/image-20220420224115555.png" alt="image-20220420224115555"></p><br><p>客户端代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NettyClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> firstMessageSize<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">EventLoopGroup</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Bootstrap</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">TCP_NODELAY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioClientHandler</span><span class="token punctuation">(</span>firstMessageSize<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            f<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            group<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NioClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> firstMessage<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">NioClientHandler</span><span class="token punctuation">(</span><span class="token keyword">int</span> firstMessageSize<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstMessageSize <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;firstMessageSize: &quot;</span> <span class="token operator">+</span> firstMessageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> req <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        firstMessage <span class="token operator">=</span> <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span>firstMessageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        firstMessage<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>firstMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>buf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        buf<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;客户端收到消息：&quot;</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected exception from downstream.&quot;</span> <span class="token operator">+</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ChannelInboundHandlerAdapter 实现类的几个重点方法：</li></ul><blockquote><ol><li><strong>channelActive</strong> : 当客户端和服务端建立连接后会调用</li><li><strong>channelRead</strong> : 收到消息时将会调用，可以用来处理消息</li><li><strong>exceptionCaught</strong> : 发生异常时会调用，可以用来打印断开连接日志，断开触发等</li></ol></blockquote><p>测试运行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>服务端收到消息：hello

客户端收到消息：netty received
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="channeloption-常见配置" tabindex="-1"><a class="header-anchor" href="#channeloption-常见配置" aria-hidden="true">#</a> ChannelOption 常见配置</h3><table><thead><tr><th>参数</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>ChannelOption.CONNECT_TIMEOUT_MILLIS</td><td>最长尝试连接时间</td><td>用在客户端建立连接时，如果在指定毫秒内无法连接，会抛出 timeout 异常</td></tr><tr><td>ChannelOption.SO_BACKLOG</td><td>设置队列的大小</td><td>对应 tcp协议 listen函数中的backlog参数，函数用来初始化服务端可连接队列<br>服务端处理客户端连接请求是顺序处理的，所以同一时间只能处理一个客户端连接<br>多个客户端时，服务端将不能处理的客户端连接请求放在队列中等待处理，backlog参数指定了队列的大小</td></tr><tr><td>ChannelOption.SO_REUSEADDR</td><td>允许重复使用本地地址和端口</td><td>对应于套接字选项中的SO_REUSEADDR，这个参数表示允许重复使用本地地址和端口</td></tr><tr><td>ChannelOption.SO_KEEPALIVE</td><td>设置长链接心跳</td><td>当设置该选项以后，如果在两小时内没有数据的通信时，TCP会自动发送一个活动探测数据报文。<br>不推荐只使用这个参数来维持长链接，还是要自己写。</td></tr><tr><td>ChannelOption.SO_SNDBUF</td><td>用于操作发送缓冲区的大小</td><td>发送缓冲区用于保存发送数据，直到发送成功。</td></tr><tr><td>ChannelOption.SO_RCVBUF</td><td>用于操作接收缓冲区的大小</td><td>接收缓冲区用于保存网络协议站内收到的数据，直到应用程序读取成 功</td></tr><tr><td>ChannelOption.SO_LINGER</td><td>关闭Socket的延迟时间</td><td>0表示socket.close()方法立即返回，OS放弃发送缓冲区的数据直接向对端发送RST包，对端收到复位错误。<br>非0 表示调用socket.close()方法的线程被阻塞直到延迟时间到或发送缓冲区中的数据发送完毕，若超时，则对端会收到复位错误。</td></tr><tr><td>ChannelOption.TCP_NODELAY</td><td>立即发送数据，默认值为Ture</td><td>Nagle算法是将小的数据包组装为更大的帧然后进行发送，而不是输入一次发送一次,<br>因此在数据包不足的时候会等待其他数据的到了，组装成大的数据包进行发送，<br>虽然该方式有效提高网络的有效负载，但是却造成了延时，，适用于文件传输。</td></tr><tr><td>ChannelOption.IP_TOS</td><td>设施优先级和QoS</td><td>IP参数，设置IP头部的Type-of-Service字段，用于描述IP包的优先级和QoS选项。</td></tr></tbody></table>`,25),h={href:"https://www.jianshu.com/p/975b30171352",target:"_blank",rel:"noopener noreferrer"},g=n("br",null,null,-1),y=n("h2",{id:"解码器使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#解码器使用","aria-hidden":"true"},"#"),s(" 解码器使用")],-1),f=n("h3",{id:"拆包粘包",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#拆包粘包","aria-hidden":"true"},"#"),s(" 拆包粘包")],-1),w=n("p",null,[s("在讲解码器之前，得先了解下 "),n("strong",null,"拆包粘包"),s(" 问题，介绍跳过")],-1),_={href:"https://www.yuque.com/shiva/lct37n/dxczcg",target:"_blank",rel:"noopener noreferrer"},x={href:"https://gitee.com/learning-use-cases/junit-of-scattered/tree/e9558d9369d098d42eedd175c44ffbc4c48b269a/jdk-source/src/main/java/netty/demo2",target:"_blank",rel:"noopener noreferrer"},S=e(`<p>这里先使用 Netty 自带的 <code>LineBasedFrameDecoder</code> 和 <code>StringDecoder</code> 解码器来测试，先使用最基础的按行分割。</p><hr><p>对上面的代码进行修改，然后再测试。</p><p>服务端和客户端都添加业务处理解码器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LineBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>NioServerHandler 处理类，channelRead 读取方法修改：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">//收到消息，打印</span>
    <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;收到消息次数：&quot;</span> <span class="token operator">+</span> <span class="token operator">++</span>count <span class="token operator">+</span> <span class="token string">&quot;服务端收到消息：&quot;</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//返回消息，时间戳</span>
    <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;line.separator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ByteBuf</span>  resp <span class="token operator">=</span> <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>因为用了 <code>StringDecoder</code> 解码器，直接转 string 就能用</p></blockquote><hr><p>NioClientHandler 处理类，channelActive 方法修改：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ByteBuf</span> message <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;hello~ mother fucker! &quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;line.separator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        message <span class="token operator">=</span> <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;客户端收到消息：&quot;</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印效果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>收到消息次数：1服务端收到消息：hello~ mother fucker!
.....
收到消息次数：10服务端收到消息：hello~ mother fucker!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>客户端收到消息：1650685447037
...
客户端收到消息：1650685447044
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="linebasedframedecoder" tabindex="-1"><a class="header-anchor" href="#linebasedframedecoder" aria-hidden="true">#</a> LineBasedFrameDecoder</h4><blockquote><p>行分隔符解码器，遇到 <code>\\n</code> 或 <code>\\r\\n</code> ，则认为是一个完整的报文</p></blockquote><p>工作原理如下：</p><ol><li>依次遍历 ByteBuf 中的可读字节，判断是否有 <code>\\n</code> 或 <code>\\r\\n</code> 。</li><li>如果有，就从此位置结束读取，把读取到的字节组成一个数据包。</li><li>然后发到下一个解码器。</li></ol><p><strong>如果读取到最大长度，仍然没有读取到换行符，则会抛出异常。同时忽略已经读到的流数据。</strong></p><br><h4 id="delimiterbasedframedecoder" tabindex="-1"><a class="header-anchor" href="#delimiterbasedframedecoder" aria-hidden="true">#</a> DelimiterBasedFrameDecoder</h4><blockquote><p>分隔符解码器，作用与 LineBasedFrameDecoder 类似，<strong>只不过分隔符可以自己指定</strong></p></blockquote><p>可以这么用，只要把指定的分隔符传入就行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelimiterBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;$$&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="lengthfieldbasedframedecoder" tabindex="-1"><a class="header-anchor" href="#lengthfieldbasedframedecoder" aria-hidden="true">#</a> LengthFieldBasedFrameDecoder</h4><blockquote><p>通过在包头增加消息体长度的解码器，解析数据时首先获取首部长度，然后定长读取socket中的数据。</p></blockquote>`,28),C=n("li",null,"感觉这个会比较重要，所以单独写了个文章",-1),B={href:"https://www.yuque.com/shiva/lct37n/bbg5ml",target:"_blank",rel:"noopener noreferrer"},q=e(`<br><h4 id="其他解码器" tabindex="-1"><a class="header-anchor" href="#其他解码器" aria-hidden="true">#</a> 其他解码器</h4><table><thead><tr><th>解码器</th><th>作用</th></tr></thead><tbody><tr><td>StringDecoder</td><td>StringDecoder 功能比较明显，把收到的数据包转为字符串，然后继续调用后续的 Handler.</td></tr><tr><td>FixedLengthFrameDecoder</td><td>定长协议解码器，可以指定固定的字节数算一个完整的报文</td></tr><tr><td>Base64Decoder</td><td>用于Base64编码</td></tr><tr><td>JsonObjectDecoder</td><td>json格式解码器，当检测到匹配数量的&quot;{&quot; 、”}”或”[””]”时，则认为是一个完整的 json</td></tr><tr><td>MessageToMessageDecoder</td><td>将一个本身就包含完整报文信息的对象转换成另一个Java对象</td></tr></tbody></table><br><h3 id="自定义解码器" tabindex="-1"><a class="header-anchor" href="#自定义解码器" aria-hidden="true">#</a> 自定义解码器</h3><p>其实也没什么好说的，</p><ol><li>实现 <code>ByteToMessageDecoder</code> 字节转消息解码器。</li><li>重写 <code>decode</code> 解码方法。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyByteToLongDecoder</span> <span class="token keyword">extends</span> <span class="token class-name">ByteToMessageDecoder</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * decode() 会根据接收的数据，被调用多次，知道确定没有新的元素添加到list,
     * 或者是 ByteBuf 没有更多的可读字节为止。
     * 如果 list 不为空，就会将 list 的内容传递给下一个 handler
     * <span class="token keyword">@param</span> <span class="token parameter">ctx</span> 上下文对象
     * <span class="token keyword">@param</span> <span class="token parameter">in</span> 入站后的 ByteBuf
     * <span class="token keyword">@param</span> <span class="token parameter">out</span> 将解码后的数据传递给下一个 handler
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> in<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// long 类型 为 8 字节</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            out<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>解码器最重要的，是对 <strong>ByteBuf</strong> 消息的读取，这个其实和正常消息读取也没啥区别。</p></blockquote><br><h2 id="编码器" tabindex="-1"><a class="header-anchor" href="#编码器" aria-hidden="true">#</a> 编码器</h2><p>先说下 Java 序列化 Serializable，本来因为很少接触网络编程，基本就是转个json。确实不知道序列化有什么坑。</p><p>反正都知道是抄的，直接写结论吧：</p><ol><li><strong>Java 序列化最致命的问题是无法跨语言</strong>，所以在调用其他语言开发的应用时，就不能使用。</li><li>序列化后包太大，浪费资源。</li><li>序列化的性能太低，通俗讲就是序列化的速度慢</li></ol><hr><p>然后《Netty 权威指南》 推荐了几个编码器：<code>Google Protobuf</code> 、 <code>Facebook Thrift</code> 、<code>JBoss Marshalling</code></p><p>还特地开一章介绍了 <code>MessagePack</code> 编码器。</p><p>大体使用方式都差不多，都单独写个测试类，不介绍了，看跳转链接吧：</p>`,18),N={href:"https://www.yuque.com/shiva/lct37n/uis8a1",target:"_blank",rel:"noopener noreferrer"},O=n("p",null,"其他两个编码器，没见过，算了跳过",-1),j=n("br",null,null,-1),E=n("h2",{id:"私有协议开发",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#私有协议开发","aria-hidden":"true"},"#"),s(" 私有协议开发")],-1),D=n("p",null,"Netty 可以用来实现各种网络协议，比如 HTTP、WebScoket 等。",-1),L={href:"https://www.yuque.com/shiva/lct37n/lz4af0",target:"_blank",rel:"noopener noreferrer"},F=e('<p>但是实在是不明白应用场景是什么，略过好了，直接看私有协议。</p><blockquote><p>这一章就是定义一个私有协议，并且做代码实现。</p><p>其实就是把书里的代码都敲一遍。实际开发中的私有协议肯定是根据规范确定的。</p></blockquote><hr><h3 id="协议栈通信模型" tabindex="-1"><a class="header-anchor" href="#协议栈通信模型" aria-hidden="true">#</a> 协议栈通信模型</h3><p>所有的非标准协议，都可以被成为私有协议，即便是国家出的标准版行业协议。</p><p>我们先确定一个协议通信模型，然后再来做实现。</p><p>Netty 协议栈通信模型的流程可以参考：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/image-20220501215917933.png" alt=""></p><ol><li>Netty 协议栈客户端发送握手请求消息，携带节点 ID 等有效身份认证信息</li><li>Netty 协议栈服务端对握手请求消息进行合法性校验，包括节点ID有效性校验、节点重复登录校验和IP地址合法性校验，校验通过后，返回登录成功的握手应答消息;</li><li>链路建立成功之后，客户端发送业务消息;</li><li>链路成功之后，服务端发送心跳消息;</li><li>链路建立成功之后，客户端发送心跳消息;</li><li>链路建立成功之后，服务端发送业务消息;</li><li>服务端退出时，服务端关闭连接，客户端感知对方关闭连接后，被动关闭客户端连接。</li></ol><br><h3 id="消息定义" tabindex="-1"><a class="header-anchor" href="#消息定义" aria-hidden="true">#</a> 消息定义</h3><p>消息格式定义分为消息头和消息体。</p><ul><li><strong>header</strong> ：消息头，变长；</li><li><strong>body</strong> ：消息体，变长；对于请求消息，它是方法的参数，对于响应消息，它是返回值</li></ul><h4 id="消息头格式" tabindex="-1"><a class="header-anchor" href="#消息头格式" aria-hidden="true">#</a> 消息头格式</h4><table><thead><tr><th>名称</th><th>类型</th><th>长度</th><th>描述</th></tr></thead><tbody><tr><td>crcCode</td><td>int</td><td>32</td><td>Netty 消息校验码；</td></tr><tr><td>length</td><td>int</td><td>32</td><td>消息长度，整个消息的长度。<strong>包括消息头和消息体。</strong></td></tr><tr><td>sessionID</td><td>long</td><td>64</td><td>集群节点内全局唯一，由会话ID生成器生成</td></tr><tr><td>type</td><td>byte</td><td>8</td><td>消息类型</td></tr><tr><td>priority</td><td>byte</td><td>8</td><td>消息优先级，0-255</td></tr><tr><td>attachment</td><td>Map&lt;String, Object&gt;</td><td>变长</td><td>可选字段，用于扩展消息头</td></tr></tbody></table><p><strong>crcCode</strong></p><p>定义校验码为：carCode = 固定值 + 主版本号 + 次版本号</p><ul><li>固定值：0xABEF ，占2个字节</li><li>主版本号：1-255，占1个字节</li><li>次版本号：1-255，占1个字节</li></ul><p><strong>type</strong></p><ul><li>0：业务消息请求</li><li>1：业务响应请求</li><li>2：业务 ONE WAY 消息，既是请求又是响应；意思应该是不需要响应</li><li>3：握手请求消息</li><li>4：握手应答消息</li><li>5：心跳请求消息</li><li>6：心跳应答消息</li></ul><br><h3 id="可靠性设计" tabindex="-1"><a class="header-anchor" href="#可靠性设计" aria-hidden="true">#</a> 可靠性设计</h3><h4 id="心跳机制" tabindex="-1"><a class="header-anchor" href="#心跳机制" aria-hidden="true">#</a> 心跳机制</h4><p>心跳机制时序图如下。</p><blockquote><p><strong>当然不单单是客户端可以断开链接，如果服务端在N次没有收到心跳消息，也需要断开链接；</strong></p></blockquote><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/202204/image-20220605144837465.png" alt=""></p><br><h4 id="重复登录保护" tabindex="-1"><a class="header-anchor" href="#重复登录保护" aria-hidden="true">#</a> 重复登录保护</h4><p>这个也没啥需要特殊解释的，就两点：</p><ol><li><strong>连接需要做身份校验；账号密码、IP白名单</strong></li><li><strong>校验当前的IP和账号是否已建立连接，检查缓存</strong></li></ol><br><h4 id="消息缓存重发" tabindex="-1"><a class="header-anchor" href="#消息缓存重发" aria-hidden="true">#</a> 消息缓存重发</h4><p>这个也好理解，弄个队列，缓存断开链接时的消息，链接建立后重新发送。</p><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>',35),I={href:"https://www.pdai.tech/md/java/io/java-io-nio-netty.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.bilibili.com/video/BV1py4y1E7oA?p=53",target:"_blank",rel:"noopener noreferrer"},A={href:"https://www.cmsblogs.com/item/1114760968",target:"_blank",rel:"noopener noreferrer"},H={href:"https://www.jianshu.com/nb/7269354",target:"_blank",rel:"noopener noreferrer"},G={href:"https://gitee.com/pic_bed_of_shiva/static-resources/blob/19cdedd5f020b7e2173d4c658114a52e0f0395fd/showns/file/%E9%BB%91%E9%A9%ACNetty%E6%95%99%E7%A8%8B%E6%BA%90%E7%A0%81%E8%B5%84%E6%96%99.rar",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.jianshu.com/p/975b30171352",target:"_blank",rel:"noopener noreferrer"},U={href:"https://blog.csdn.net/u010144805/article/details/78579528",target:"_blank",rel:"noopener noreferrer"},P={href:"https://blog.csdn.net/qq_28198181/article/details/82152338",target:"_blank",rel:"noopener noreferrer"},R={href:"https://blog.csdn.net/qq_33373609/article/details/120575389",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.jianshu.com/p/3dfa2a9c1cc0",target:"_blank",rel:"noopener noreferrer"},J={href:"https://blog.csdn.net/weixin_38312719/article/details/108763753",target:"_blank",rel:"noopener noreferrer"},V={href:"https://blog.csdn.net/qq_45859054/article/details/115253892",target:"_blank",rel:"noopener noreferrer"},K={href:"https://www.jianshu.com/p/38a3546098ae",target:"_blank",rel:"noopener noreferrer"};function Q(Y,W){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,r,d,n("ul",null,[n("li",null,[s("GitHub 地址："),n("a",k,[s("netty/netty: Netty project - an event-driven asynchronous network application framework (github.com)"),t(a)])]),n("li",null,[s("官方文档："),n("a",v,[s("Netty.docs: Netty.docs: Home"),t(a)])]),m]),b,n("blockquote",null,[n("p",null,[s("来源："),n("a",h,[s("Netty ChannelOption参数详解 - 简书 (jianshu.com)"),t(a)])])]),g,y,f,w,n("ul",null,[n("li",null,[s("理论基础可以看："),n("a",_,[s("TCP 粘包、拆包问题，及解决方案 · 语雀 (yuque.com)"),t(a)])]),n("li",null,[s("测试代码："),n("a",x,[s("jdk-source/src/main/java/netty/demo2"),t(a)])])]),S,n("ul",null,[C,n("li",null,[s("传送门："),n("a",B,[s("LengthFieldBasedFrameDecoder 解码器 · 语雀 (yuque.com)"),t(a)])])]),q,n("ul",null,[n("li",null,[n("a",N,[s("MessagePack 编码器 · 语雀 (yuque.com)"),t(a)])])]),O,j,E,D,n("ul",null,[n("li",null,[n("a",L,[s("HTTP 协议开发应用 · 语雀 (yuque.com)"),t(a)])])]),F,n("ul",null,[n("li",null,[n("a",I,[s("Java N(A)IO - 框架: Netty | Java 全栈知识体系 (pdai.tech)"),t(a)])]),n("li",null,[n("a",T,[s("黑马程序员Netty全套教程，全网最全Netty深入浅出教程，Java网络编程的王者_哔哩哔哩_bilibili"),t(a)])]),n("li",null,[n("a",A,[s("Netty - Java 技术驿站 (cmsblogs.com)"),t(a)])]),n("li",null,[n("a",H,[s("Netty源码分析 - 文集 - 简书 (jianshu.com)"),t(a)])]),n("li",null,[n("a",G,[s("showns/file/黑马Netty教程源码资料.rar · Drawing Bed of First/static-resources - Gitee.com"),t(a)])]),n("li",null,[n("a",M,[s("Netty ChannelOption参数详解 - 简书 (jianshu.com)"),t(a)])]),n("li",null,[n("a",U,[s("Socket中SO_REUSEADDR详解_明潮的博客-CSDN博客_reuseaddr"),t(a)])]),n("li",null,[n("a",P,[s("channelOption中的属性了解_Gin_Chou的博客-CSDN博客"),t(a)])]),n("li",null,[n("a",R,[s("Netty之启动类、编解码器等源码解析及粘包、拆包问题_踩踩踩从踩的博客-CSDN博客"),t(a)])]),n("li",null,[n("a",z,[s("Netty源码分析——拆包器之LineBasedFrameDecoder - 简书 (jianshu.com)"),t(a)])]),n("li",null,[n("a",J,[s("(1条消息) LineBasedFrameDecoder解决粘包半包源码分析_star++的博客-CSDN博客_linebasedframedecoder半包原理"),t(a)])]),n("li",null,[n("a",V,[s("解码器LengthFieldBasedFrameDecoder_书唐瑞的博客-CSDN博客"),t(a)])]),n("li",null,[n("a",K,[s("netty自定义解码器 decoder - 简书 (jianshu.com)"),t(a)])])])])}const Z=p(i,[["render",Q],["__file","NettyStudy.html.vue"]]);export{Z as default};
