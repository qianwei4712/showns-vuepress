import{_ as n,o as s,c as a,f as t}from"./app-0869a5be.js";const p={},e=t(`<p><code>2022.08.03</code></p><blockquote><p>有个二傻子对接方，提供的开放接口要求把驾驶证、行驶证等正反面合成一张，还要限制在 6M 以下。</p></blockquote><p>思考步骤如下：</p><ul><li>因为照片都放在阿里云OSS，所以操作得先下载</li><li>下载后需要拿到 file 文件，再进行操作，CSDN刨屎</li><li>拼接合成后，把原始照片删掉</li><li>再对比压缩，只拿到最后的一张照片</li></ul><br><p>压缩图片用依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>net.coobird<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>thumbnailator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.4.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单 demo 类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageTest</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 多张阿里云OSS 图片合成
     * 1. 先将照片保存到本地缓存文件
     * 2. 按顺序，拼接合成一张照片
     * 3. 最后压缩到6M以下
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//本地基础路径，服务器上可以用配置文件里的地址</span>
        <span class="token class-name">String</span> localBasePath <span class="token operator">=</span> <span class="token string">&quot;C:\\\\Users\\\\shiva\\\\Desktop\\\\1\\\\&quot;</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> first <span class="token operator">=</span> <span class="token string">&quot;https://prod-xxxx.oss-cn-hangzhou.aliyuncs.com/business/2022/3/3/xxxxxx97c.jpg&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> second <span class="token operator">=</span> <span class="token string">&quot;https://prod-cloudspider.oss-cn-hangzhou.aliyuncs.com/business/2022/3/3/fxxxxxxe5e.jpg&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">//先下载到本地</span>
        <span class="token class-name">String</span> firstLocal <span class="token operator">=</span> localBasePath <span class="token operator">+</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.jpg&quot;</span><span class="token punctuation">;</span>
        <span class="token function">writeImageToLocal</span><span class="token punctuation">(</span><span class="token function">getImageFromNetByUrl</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">,</span> firstLocal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> secondLocal <span class="token operator">=</span> localBasePath <span class="token operator">+</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.jpg&quot;</span><span class="token punctuation">;</span>
        <span class="token function">writeImageToLocal</span><span class="token punctuation">(</span><span class="token function">getImageFromNetByUrl</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">,</span> secondLocal<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//开始合并</span>
        <span class="token class-name">String</span> targetName <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.jpg&quot;</span><span class="token punctuation">;</span>
        <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>firstLocal<span class="token punctuation">,</span> secondLocal<span class="token punctuation">}</span><span class="token punctuation">,</span> localBasePath <span class="token operator">+</span> targetName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//拿到合并后的文件，开始压缩</span>
        <span class="token class-name">String</span> resultName <span class="token operator">=</span> <span class="token function">compressionLessByGoogle</span><span class="token punctuation">(</span>localBasePath<span class="token punctuation">,</span> targetName<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localBasePath <span class="token operator">+</span> resultName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取远程http地址视图片
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getImageFromNetByUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> strUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>strUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">HttpURLConnection</span> conn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conn<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">InputStream</span> inStream <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">readInputStream</span><span class="token punctuation">(</span>inStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 读取流mn
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">ByteArrayOutputStream</span> outStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            outStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        inStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> outStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 将获取的字节数组保存为文件写入硬盘
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeImageToLocal</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 本地目录</span>
            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">File</span> fileParent <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileParent<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fileParent<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">FileOutputStream</span> fops <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fops<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fops<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fops<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 对本地图片进行压缩，返回压缩后照片的本地路径;
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">compressionLessByGoogle</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> filePath<span class="token punctuation">,</span> <span class="token keyword">long</span> sizeKb<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//拿到原图</span>
        <span class="token class-name">File</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//不存在，或者比 6m(k就传 6*1024) 小，直接结束</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>img<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> img<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> sizeKb <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> filePath<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//根据点分割下，然后获得新路径</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> filePath<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这个应该是最后的格式</span>
        <span class="token class-name">String</span> fix <span class="token operator">=</span> split<span class="token punctuation">[</span>split<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        split<span class="token punctuation">[</span>split<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//原名称</span>
        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> split<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//需要开始循环了，每次压缩一半，质量保留 0.8</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> newFileName <span class="token operator">=</span> fileName <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> fix<span class="token punctuation">;</span>
            <span class="token class-name">Thumbnails</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> filePath<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">outputQuality</span><span class="token punctuation">(</span><span class="token number">0.8f</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> newFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//拿到新文件</span>
            <span class="token class-name">File</span> newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> newFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>newFile<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> sizeKb <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//比100k小，可以返回了</span>
                img<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> newFileName<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                newFile<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> filePath<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 图片拼接
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files<span class="token punctuation">,</span> <span class="token class-name">String</span> savePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">/* 1 读取第一张图片 */</span>
            <span class="token class-name">File</span> fileOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">BufferedImage</span> imageFirst <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileOne<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> firstWidth <span class="token operator">=</span> imageFirst<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 图片宽度</span>
            <span class="token keyword">int</span> firstHeight <span class="token operator">=</span> imageFirst<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 图片高度</span>
            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imageArrayFirst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>firstWidth <span class="token operator">*</span> firstHeight<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 从图片中读取RGB</span>
            imageArrayFirst <span class="token operator">=</span> imageFirst<span class="token punctuation">.</span><span class="token function">getRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> firstWidth<span class="token punctuation">,</span> firstHeight<span class="token punctuation">,</span> imageArrayFirst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> firstWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">/* 1 对第二张图片做相同的处理 */</span>
            <span class="token class-name">File</span> fileTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">BufferedImage</span> imageSecond <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> secondWidth <span class="token operator">=</span> imageSecond<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 图片宽度</span>
            <span class="token keyword">int</span> secondHeight <span class="token operator">=</span> imageSecond<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 图片高度</span>
            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imageArraySecond <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>secondWidth <span class="token operator">*</span> secondHeight<span class="token punctuation">]</span><span class="token punctuation">;</span>
            imageArraySecond <span class="token operator">=</span> imageSecond<span class="token punctuation">.</span><span class="token function">getRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> secondWidth<span class="token punctuation">,</span> secondHeight<span class="token punctuation">,</span> imageArraySecond<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> secondWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>firstHeight<span class="token punctuation">,</span> secondHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 生成新图片</span>
            <span class="token class-name">BufferedImage</span> imageResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>firstWidth <span class="token operator">+</span> secondWidth<span class="token punctuation">,</span> hh<span class="token punctuation">,</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">.</span><span class="token constant">TYPE_INT_RGB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> higIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> higIndex <span class="token operator">&lt;</span> hh<span class="token punctuation">;</span> higIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//纵向位置固定，横向开始遍历</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> widIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> widIndex <span class="token operator">&lt;</span> firstWidth<span class="token punctuation">;</span> widIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 超出图片高度，小于两张图片中较大的那张，颜色直接用白的</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstHeight <span class="token operator">&gt;</span> higIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        imageResult<span class="token punctuation">.</span><span class="token function">setRGB</span><span class="token punctuation">(</span>widIndex<span class="token punctuation">,</span> higIndex<span class="token punctuation">,</span> imageArrayFirst<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        k<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        imageResult<span class="token punctuation">.</span><span class="token function">setRGB</span><span class="token punctuation">(</span>widIndex<span class="token punctuation">,</span> higIndex<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">328966</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">int</span> k1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> higIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> higIndex <span class="token operator">&lt;</span> hh<span class="token punctuation">;</span> higIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//纵向位置固定，横向开始遍历</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> widIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> widIndex <span class="token operator">&lt;</span> secondWidth<span class="token punctuation">;</span> widIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 横向的坐标需要加上第一张图</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>secondHeight <span class="token operator">&gt;</span> higIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        imageResult<span class="token punctuation">.</span><span class="token function">setRGB</span><span class="token punctuation">(</span>widIndex <span class="token operator">+</span> firstWidth<span class="token punctuation">,</span> higIndex<span class="token punctuation">,</span> imageArraySecond<span class="token punctuation">[</span>k1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        k1<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        imageResult<span class="token punctuation">.</span><span class="token function">setRGB</span><span class="token punctuation">(</span>widIndex <span class="token operator">+</span> firstWidth<span class="token punctuation">,</span> higIndex<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">328966</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">File</span> outFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>savePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>outFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                outFile<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> savePath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>imageResult<span class="token punctuation">,</span> savePath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">,</span> outFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fileOne<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fileTwo<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","图片拼接合成.html.vue"]]);export{k as default};
