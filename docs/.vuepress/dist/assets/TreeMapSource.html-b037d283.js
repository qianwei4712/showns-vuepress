import{_ as a,r as t,o as e,c as p,a as c,w as o,d as l,f as n}from"./app-c14a8d33.js";const i={},r=n('<div class="catalog"><ul><li><a href="#t0">概述</a></li><li><a href="#t1">TreeMap 继承关系</a></li><li><a href="#t2">SortedMap、NavigableMap</a></li><li><a href="#t3">TreeMap 构造方法</a></li><li><a href="#t4">TreeMap 重点介绍</a><ul><li><a href="#t41">红黑树介绍</a></li><li><a href="#t42">TreeMap.Entry</a></li><li><a href="#t43">添加元素</a></li><li><a href="#t44">遍历顺序</a></li></ul></li><li><a href="#t5">TreeMap 和 HashMap</a></li><li><a href="#t7">参考文章</a></li></ul></div><h3 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> <span id="t0">1 概述</span></h3><p><strong>TreeMap</strong> 实现了<em>SortedMap</em>接口，也就是说会按照 <code>key</code> 的大小顺序对 <em>Map</em> 中的元素进行排序，<code>key</code> 大小的评判可以通过其本身的自然顺序(natural ordering)，也可以通过构造时传入的比较器(Comparator)。</p><p><strong>TreeMap 底层通过红黑树(Red-Black tree)实现</strong> ，也就意味着 <code>containsKey()</code> , <code>get()</code> , <code>put()</code> , <code>remove()</code> 都有着 <code>log(n)</code> 的时间复杂度。</p><p>先把 <strong>TreeMap</strong> 源码放上：<a href="https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/TreeMap.java" target="_blank">https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/TreeMap.java</a></p><p>关于红黑树，在以前写过的 HashMap 中有简单介绍，可以参考：<a href="https://blog.csdn.net/m0_46144826/article/details/106300438" target="_blank">https://blog.csdn.net/m0_46144826/article/details/106300438</a></p><blockquote><p>源码注解不会覆盖 100%，只会阅读重点特性和方法。实在是上一篇 HashMap 把人弄残废了。</p></blockquote><br><h3 id="_2-treemap-继承关系" tabindex="-1"><a class="header-anchor" href="#_2-treemap-继承关系" aria-hidden="true">#</a> <span id="t1">2 TreeMap 继承关系</span></h3><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/TreeMapSource1.png" alt="TreeMapSource1"></p><ul><li><p>实现 <strong>Serializable</strong> 接口开启序列化功能 ----具体介绍请转 <a href="https://blog.csdn.net/m0_46144826/article/details/105055432" target="_blank"><strong>Java 面向对象基础 - 异常、序列化</strong></a></p></li><li><p>实现 <strong>Cloneable</strong> 接口，允许使用 <strong>clone()</strong> 方法克隆 — 具体介绍请转 <a href="https://blog.csdn.net/m0_46144826/article/details/104075489" target="_blank"><strong>Java 面向对象基础 - Object 通用方法</strong></a></p></li><li><p><strong>AbstractMap</strong> 抽象类提供了 <strong>Map</strong> 的基础实现，使得 <strong>TreeMap</strong> 不需要从零开始实现一个 map 的所有方法。</p></li><li><p>然后剩下的 <strong>NavigableMap</strong> 和 <strong>SortedMap</strong> 实现了元素的比较，确定优先级，后面再详细讲。</p></li></ul><br><h3 id="_3-sortedmap、navigablemap" tabindex="-1"><a class="header-anchor" href="#_3-sortedmap、navigablemap" aria-hidden="true">#</a> <span id="t2">3 SortedMap、NavigableMap</span></h3><p>先把代码注释放上：</p><ul><li><p>SortedMap 接口源码 ：<a href="https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/SortedMap.java" target="_blank">https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/SortedMap.java</a></p></li><li><p>NavigableMap 接口源码 ：<a href="https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/NavigableMap.java" target="_blank">https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/NavigableMap.java</a></p></li></ul><p><strong>SortedMap</strong> 是 <strong>NavigableMap</strong> 的父类。</p><p><strong>SortedMap</strong> 是一个根据 key 进排序的 Map 集合，接口设计要求实现一个 <strong>comparator</strong> 比较器，如果没有实现，则使用元素自带的比较器。</p>',17),u=n(`<p><strong>NavigableMap</strong> 在 <strong>SortedMap</strong> 基础上进行了一些功能增强，具体功能见下表：</p><p><strong>SortedMap 接口方法：</strong></p><table><thead><tr><th style="text-align:center;">方法、参数、返回值</th><th style="text-align:center;">功能介绍</th></tr></thead><tbody><tr><td style="text-align:center;"><code>Comparator&lt;? super K&gt; comparator()</code></td><td style="text-align:center;">返回用于在此 map 中对键进行排序的比较器；如果此映射使用其键的 Comparable 自然排序，则返回 null。</td></tr><tr><td style="text-align:center;"><code>SortedMap&lt;K,V&gt; subMap(K fromKey, K toKey)</code></td><td style="text-align:center;">返回此地图部分的视图，其键范围为 fromKey（包括边界） 到 toKey（不包括）</td></tr><tr><td style="text-align:center;"><code>SortedMap&lt;K,V&gt; headMap(K toKey)</code></td><td style="text-align:center;">返回此地图部分的视图，其键范围为起始节点到 toKey（不包括）</td></tr><tr><td style="text-align:center;"><code>SortedMap&lt;K,V&gt; tailMap(K fromKey)</code></td><td style="text-align:center;">此地图部分的视图，其键范围为 fromKey（包括边界） 到结束</td></tr><tr><td style="text-align:center;"><code>K firstKey()</code></td><td style="text-align:center;">当前在此地图中的第一个（最小）键</td></tr><tr><td style="text-align:center;"><code>K lastKey()</code></td><td style="text-align:center;">当前在此地图中的最后一个（最大）键</td></tr><tr><td style="text-align:center;"><code>Set&lt;K&gt; keySet()</code></td><td style="text-align:center;">此 map 中包含的 key 的 set 集合，以 key 比较后升序排列</td></tr><tr><td style="text-align:center;"><code>Collection&lt;V&gt; values()</code></td><td style="text-align:center;">此 map 中包含的 value 值的集合，按 key 比较后升序排列</td></tr><tr><td style="text-align:center;"><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code></td><td style="text-align:center;">此 map 中包含的键值对的集合视图，按 key 比较后升序排列</td></tr></tbody></table><p><strong>NavigableMap 接口添加的方法：</strong></p><table><thead><tr><th style="text-align:center;">方法、参数、返回值</th><th style="text-align:center;">功能介绍</th></tr></thead><tbody><tr><td style="text-align:center;"><code>Map.Entry&lt;K,V&gt; lowerEntry(K key)</code></td><td style="text-align:center;">返回严格小于给定键的最大键值对，或者如果没有这样的键。</td></tr><tr><td style="text-align:center;"><code>K lowerKey(K key)</code></td><td style="text-align:center;">返回严格小于给定键的最大键，或者如果没有这样的键。</td></tr><tr><td style="text-align:center;"><code>Map.Entry&lt;K,V&gt; floorEntry(K key)</code></td><td style="text-align:center;">返回小于或等于给定键的最大键值对，或者如果没有这样的键。</td></tr><tr><td style="text-align:center;"><code>K floorKey(K key)</code></td><td style="text-align:center;">返回小于或等于给定键的最大键，或者如果没有这样的键。</td></tr><tr><td style="text-align:center;"><code>Map.Entry&lt;K,V&gt; ceilingEntry(K key)</code></td><td style="text-align:center;">返回大于或等于给定键的最小键值对，或者如果没有这样的键。</td></tr><tr><td style="text-align:center;"><code>K ceilingKey(K key)</code></td><td style="text-align:center;">返回大于或等于给定键的最小键，或者如果没有这样的键。</td></tr><tr><td style="text-align:center;"><code>Map.Entry&lt;K,V&gt; higherEntry(K key)</code></td><td style="text-align:center;">返回严格大于给定键的最小键值对，或者如果没有这样的键。</td></tr><tr><td style="text-align:center;"><code>K higherKey(K key)</code></td><td style="text-align:center;">返回严格大于给定键的最小键，或者如果没有这样的键。</td></tr><tr><td style="text-align:center;"><code>Map.Entry&lt;K,V&gt; firstEntry()</code></td><td style="text-align:center;">返回第一个（最小）键值对，如果不存在返回 null</td></tr><tr><td style="text-align:center;"><code>Map.Entry&lt;K,V&gt; lastEntry()</code></td><td style="text-align:center;">返回最后一个（最大）键值对，如果不存在返回 null</td></tr><tr><td style="text-align:center;"><code>Map.Entry&lt;K,V&gt; pollFirstEntry()</code></td><td style="text-align:center;">返回第一个（最小）键值对并移除，如果不存在返回 null</td></tr><tr><td style="text-align:center;"><code>Map.Entry&lt;K,V&gt; pollLastEntry()</code></td><td style="text-align:center;">返回最后一个（最大）键值对并移除，如果不存在返回 null</td></tr><tr><td style="text-align:center;"><code>NavigableMap&lt;K,V&gt; descendingMap()</code></td><td style="text-align:center;">返回此 map 中包含的映射的逆序视图。</td></tr><tr><td style="text-align:center;"><code>NavigableSet&lt;K&gt; navigableKeySet()</code></td><td style="text-align:center;">返回一个 Navigable 的 key 的集合</td></tr><tr><td style="text-align:center;"><code>NavigableSet&lt;K&gt; descendingKeySet()</code></td><td style="text-align:center;">返回一个 Navigable 的 key 的倒序集合</td></tr></tbody></table><br><h3 id="_4-treemap-构造方法" tabindex="-1"><a class="header-anchor" href="#_4-treemap-构造方法" aria-hidden="true">#</a> <span id="t3">4 TreeMap 构造方法</span></h3><p>TreeMap 真正的参数就以下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 比较器用于维护此树形图中的顺序；如果比较器使用其键的自然顺序，则为null。
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> comparator<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 根节点
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * treemap节点数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 修改次数，快速失败机制
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他还有三个提供遍历的参数，不过这些貌似并不重要 ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">EntrySet</span> entrySet<span class="token punctuation">;</span><span class="token comment">//键值对遍历</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">KeySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> navigableKeySet<span class="token punctuation">;</span><span class="token comment">//key遍历</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">NavigableMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> descendingMap<span class="token punctuation">;</span><span class="token comment">//逆序map遍历</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后看构造函数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 使用其键的自然顺序构造一个新的空树形图。
     * 插入地图的所有键都必须实现<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Comparable</span></span><span class="token punctuation">}</span>接口。
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        comparator <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 带比较器的构造函数。
     * 所有插入的 key都必须支持该比较器
     * <span class="token keyword">@param</span> <span class="token parameter">comparator</span> treemap的比较器。 如果为 null，将使用key的自然比较
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> comparator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>comparator <span class="token operator">=</span> comparator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 使用参数 m 的key的自然排序构造
     * 时间复杂度为 n*log(n)
     * <span class="token keyword">@param</span>  <span class="token parameter">m</span> 需要被添加的初始 map
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ClassCastException</span></span> 如果m中的键没有继承<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Comparable</span></span><span class="token punctuation">}</span>，或不能相互比较
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> 如果指定的map为null
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        comparator <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token function">putAll</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 使用 sortedmap构造，需要判断是否存在比较器
     * <span class="token keyword">@param</span>  <span class="token parameter">m</span> the sorted map whose mappings are to be placed in this map,
     *         and whose comparator is to be used to sort this map
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> 如果指定的map为null
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        comparator <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">buildFromSorted</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span> cannotHappen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> cannotHappen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>带比较器的构造函数上有说明：</p><blockquote><p>如果 comparator 为 null，将使用 key 的自然比较</p></blockquote><p><strong>因为 TreeMap 没有比较器的 set 方法，所以要设置比较器必须在构造方法声明。</strong></p><br><h3 id="_5-treemap-重点介绍" tabindex="-1"><a class="header-anchor" href="#_5-treemap-重点介绍" aria-hidden="true">#</a> <span id="t4">5 TreeMap 重点介绍</span></h3><p>因为 TreeMap 使用红黑树做为存储结构。</p><p>关于红黑树，在以前写过的 HashMap 中有简单介绍，可以参考：<a href="https://blog.csdn.net/m0_46144826/article/details/106300438" target="_blank">https://blog.csdn.net/m0_46144826/article/details/106300438</a></p><p>所以这篇中不会很详细，到时候会与 HashMap 进行下对比。</p><p>其实也没啥好解释的，所有特性只要知道结构，代码都是顺理成章的，而且 TreeMap 也没有复杂的计算和逻辑。</p><br><h4 id="_5-1-红黑树介绍" tabindex="-1"><a class="header-anchor" href="#_5-1-红黑树介绍" aria-hidden="true">#</a> <span id="t41">5.1 红黑树介绍</span></h4><p>这是一个在线红黑树动态测试网页，上面可以进行图解： <a href="https://rbtree.phpisfuture.com/" target="_blank">https://rbtree.phpisfuture.com/</a></p><p>红黑树首先是一个二叉排序树，对于二叉排序树的特点就很明显了：</p><p><strong>（1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值；</strong></p><p><strong>（2）若右子树不空，则右子树上所有结点的值均大于它的根结点的值；</strong></p><p><strong>（3）左、右子树也分别为二叉排序树；</strong></p><p><strong>（4）没有相等的键值；</strong></p><p>然后红黑树并不严格是平衡的，但是大佬们得出结论，根据红黑树的特点，它确实是自平衡的，它的特点是：</p><ul><li><strong>每个节点或者是黑色，或者是红色；根节点是黑色</strong></li><li><strong>如果一个节点是红的，则它的两个儿子都是黑的</strong></li><li><strong>从任一节点到其叶子的所有简单路径都包含相同数目的黑色节点。</strong></li><li><strong>每个红色节点的两个子节点一定都是黑色（叶子节点包含 NULL）</strong></li></ul><p>红黑树插入过程中情况：每次插入节点的时候会将节点着色为黑色。其目的为了快的满足红黑树的约束条件。</p><blockquote><ol><li>红黑树结构不会旋转变化情况： <ol><li><strong>当插入的节点为的父亲为黑色节点。【什么都不用做】</strong></li><li><strong>被插入的节点是根节点。【直接把此节点涂为黑色】</strong></li></ol></li><li>红黑树结构发生旋转变化情况： <ol><li><strong>当前节点的父节点是红色，且当前节点的祖父节点的另一个子节点（叔叔节点）也是红色。</strong></li><li><strong>当前插入的父节点是红色，当前叔叔节点的黑色，且当前节点为其父亲节点的左孩子。（进行左旋）</strong></li><li><strong>当前插入的父节点是红色，当前叔叔节点的黑色，且当前节点为其父亲节点的右孩子。（进行右旋）</strong></li></ol></li></ol></blockquote><br><h4 id="_5-2-treemap-entry" tabindex="-1"><a class="header-anchor" href="#_5-2-treemap-entry" aria-hidden="true">#</a> <span id="t42">5.2 TreeMap.Entry</span></h4><p>TreeMap.Entry 是类中最基础的结构，它代表树中的一个节点：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token class-name">K</span> key<span class="token punctuation">;</span><span class="token comment">// 键</span>
        <span class="token class-name">V</span> value<span class="token punctuation">;</span><span class="token comment">//值</span>
        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> left<span class="token punctuation">;</span><span class="token comment">//左孩子</span>
        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> right<span class="token punctuation">;</span><span class="token comment">//右孩子</span>
        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span><span class="token comment">//父亲</span>
        <span class="token keyword">boolean</span> color <span class="token operator">=</span> <span class="token constant">BLACK</span><span class="token punctuation">;</span><span class="token comment">//默认黑色</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对一个一个树形节点来说，他们的重要引用都有。</p><br><h4 id="_5-3-添加元素" tabindex="-1"><a class="header-anchor" href="#_5-3-添加元素" aria-hidden="true">#</a> <span id="t43">5.3 添加元素</span></h4><p>添加元素方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//首先判断根节点是否为空</span>
        <span class="token comment">//如果根节点为空，默认为根节点</span>
        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> t <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">compare</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入（可能为空）检查</span>
            <span class="token comment">//设置根节点，默认为黑色，没有父节点</span>
            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            modCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> cmp<span class="token punctuation">;</span>
        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>
        <span class="token comment">// 拆分比较器和可比较的路径</span>
        <span class="token comment">//获得当前 treemap的比较器</span>
        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> cpr <span class="token operator">=</span> comparator<span class="token punctuation">;</span>
        <span class="token comment">//比较器为不为空，使用 treemap的比较器</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cpr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">do</span> <span class="token punctuation">{</span><span class="token comment">//循环遍历，大于0往右子树，小于0坐子树，等于0替换</span>
                parent <span class="token operator">=</span> t<span class="token punctuation">;</span>
                cmp <span class="token operator">=</span> cpr<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> t<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    t <span class="token operator">=</span> t<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    t <span class="token operator">=</span> t<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//比较器为空，使用自然比较，需要key实现Comparable接口</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
                <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> key<span class="token punctuation">;</span>
            <span class="token keyword">do</span> <span class="token punctuation">{</span>
                parent <span class="token operator">=</span> t<span class="token punctuation">;</span>
                cmp <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    t <span class="token operator">=</span> t<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    t <span class="token operator">=</span> t<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token function">fixAfterInsertion</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的根节点比较方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 使用与此TreeMap正确的比较方法比较两个键。
     */</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> k1<span class="token punctuation">,</span> <span class="token class-name">Object</span> k2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> comparator<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>k1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">K</span><span class="token punctuation">)</span>k2<span class="token punctuation">)</span>
            <span class="token operator">:</span> comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">K</span><span class="token punctuation">)</span>k1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">K</span><span class="token punctuation">)</span>k2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="_5-4-遍历顺序" tabindex="-1"><a class="header-anchor" href="#_5-4-遍历顺序" aria-hidden="true">#</a> <span id="t44">5.4 遍历顺序</span></h4><p>看着这么多集合类代码，我还是第一次写遍历顺序，先看入口代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 返回此映射中包含的映射的<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Set</span></span><span class="token punctuation">}</span>视图。
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">EntrySet</span> es <span class="token operator">=</span> entrySet<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>es <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> es <span class="token operator">:</span> <span class="token punctuation">(</span>entrySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EntrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内部类 <code>EntrySet()</code> 的迭代器为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EntryIterator</span><span class="token punctuation">(</span><span class="token function">getFirstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先在这个 EntryIterator 构造中，传入了第一个键值对的引用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">final</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getFirstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token keyword">return</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据红黑树的特性： <strong>若左子树不空，则左子树上所有结点的值均小于它的根结点的值</strong></p><p>所以返回最小的节点，就是最左边的节点。</p><p>然后就是常见的 <code>next</code> 顺序了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">EntryIterator</span> <span class="token keyword">extends</span> <span class="token class-name">PrivateEntryIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token class-name">EntryIterator</span><span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">nextEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的 <code>next</code> 方法使用了 <code>PrivateEntryIterator</code> 的内部方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">final</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">nextEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获得下一个节点</span>
        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token comment">//如果为空抛出异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 快速失败机制，如果在迭代过程中进行了 treemap 修改，则抛出线程异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//拿到下一个元素</span>
        next <span class="token operator">=</span> <span class="token function">successor</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//上一个返回的元素</span>
        lastReturned <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token keyword">return</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就是最后的 <code>successor(e)</code> 方法了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 返回指定Entry的后继者；如果没有，则返回null。
     */</span>
    <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">TreeMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">successor</span><span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果当前节点为空，则返回null</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//当前节点不为空，且右子树不为空</span>
            <span class="token comment">//拿到右子树中最小的</span>
            <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> t<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token keyword">return</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//当前节点不为空且右子树为空，那就需要拿父节点</span>
            <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> t<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
            <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> ch <span class="token operator">=</span> t<span class="token punctuation">;</span>
            <span class="token comment">//如果当前节点是父节点的右孩子，需要拿到最小的祖先节点</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">==</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ch <span class="token operator">=</span> p<span class="token punctuation">;</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> p<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_6-treemap-和-hashmap" tabindex="-1"><a class="header-anchor" href="#_6-treemap-和-hashmap" aria-hidden="true">#</a> <span id="t5">6 TreeMap 和 HashMap</span></h3><table><thead><tr><th style="text-align:center;">对比项目</th><th style="text-align:center;">HashMap</th><th style="text-align:center;">TreeMap</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>内部结构</strong></td><td style="text-align:center;">数组+链表+红黑树</td><td style="text-align:center;">红黑树</td></tr><tr><td style="text-align:center;"><strong>继承关系</strong></td><td style="text-align:center;">继承 AbstractMap，实现 Map 接口</td><td style="text-align:center;">继承 AbstractMap，实现 NavigableMap、SortedMap<br>保证了 SortedMap 的有序性</td></tr><tr><td style="text-align:center;"><strong>实现方式</strong></td><td style="text-align:center;">定义了 hashcode() 和 equals()，基于 hash 实现，可以根据初始容量和负载因子调优</td><td style="text-align:center;">红黑树总是处于平衡的状态，无法调优</td></tr><tr><td style="text-align:center;"><strong>遍历顺序</strong></td><td style="text-align:center;">不能保证遍历顺序，因为 key 的 hash 值跟 hashcode 和表长度都有关系。</td><td style="text-align:center;">会按照排序后的顺序输出</td></tr><tr><td style="text-align:center;"><strong>长度限制</strong></td><td style="text-align:center;">一个桶内链表达到 8 时转化为红黑树，表长最大为 Integer.Max</td><td style="text-align:center;">红黑树没有长度限制</td></tr><tr><td style="text-align:center;"><strong>场景</strong></td><td style="text-align:center;">通常情况下，HashMap 是要更快一点，毕竟数组嘛</td><td style="text-align:center;">需要排序才使用 TreeMap</td></tr></tbody></table><br><h3 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="te">参考文章</span></h3><p><a href="https://www.breakyizhan.com/java/5376.html" target="_blank">https://www.breakyizhan.com/java/5376.html/</a></p><p><a href="http://cmsblogs.com/?p=1013" target="_blank">http://cmsblogs.com/?p=1013</a></p><p><a href="https://www.pdai.tech/md/java/collection/java-map-TreeMap&amp;TreeSet.html" target="_blank">https://www.pdai.tech/md/java/collection/java-map-TreeMap&amp;TreeSet.html</a></p>`,69);function k(d,m){const s=t("font");return e(),p("div",null,[r,c(s,{color:"red","font-weight":"bold"},{default:o(()=>[l("所以 SoryedMap 的 key 必须实现 Comparable 接口")]),_:1}),u])}const g=a(i,[["render",k],["__file","TreeMapSource.html.vue"]]);export{g as default};
