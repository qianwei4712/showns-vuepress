import{_ as n,o as s,c as a,f as e}from"./app-36b09dbd.js";const t={},p=e(`<div class="catalog"><ul><li><a href="#t1">概述</a></li><li><a href="#t2">继承关系</a></li><li><a href="#t3">构造方法</a></li><li><a href="#t4">LinkedList 的常用方法</a><ul><li><a href="#t41">add</a></li><li><a href="#t42">remove</a></li><li><a href="#t43">poll() 和 pop()</a></li></ul></li><li><a href="#t5">总结</a></li><li><a href="#t6">参考文章</a></li></ul></div><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> <span id="t1">概述</span></h3><p>阅读 Java 版本为 <strong>1.8.0.25</strong>。</p><blockquote><p><em>LinkedList</em> 同时实现了<em>List</em>接口和<em>Deque</em>接口，也就是说它既可以看作一个顺序容器，又可以看作一个队列(<em>Queue</em>)，同时又可以看作一个栈(<em>Stack</em>)。</p></blockquote><p>当你需要使用栈或者队列时，可以考虑使用 <em>LinkedList</em> ，一方面是因为 Java 官方已经声明不建议使用 <em>Stack</em> 类，更遗憾的是，Java 里根本没有一个叫做 <em>Queue</em> 的类(只是个接口)。关于栈或队列，现在的首选是<em>ArrayDeque</em>，它有着比 <em>LinkedList</em> (当作栈或队列使用时)有着更好的性能。</p><p>学习方式为，将 <strong>LinkedList</strong> 源码类拷贝至自定义包内，进行注释添加，代码请移步：<br><a href="https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/LinkedList.java" target="_blank">https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/LinkedList.java</a></p><p>知识点总结如下：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/LinkedListSource1.png" alt="LinkedListSource1"></p><br><h3 id="继承关系" tabindex="-1"><a class="header-anchor" href="#继承关系" aria-hidden="true">#</a> <span id="t2">继承关系</span></h3><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/LinkedListSource2.png" alt="LinkedListSource2"></p><ul><li><p>实现 <strong>Serializable</strong> 接口开启序列化功能 ----具体介绍请转 <strong>Java 面向对象基础 - 异常、序列化</strong></p></li><li><p>实现 <strong>Cloneable</strong> 接口，允许使用 <strong>clone()</strong> 方法克隆 --- 具体介绍请转 <strong>Java 面向对象基础 - Object 通用方法、枚举</strong></p></li><li><p>实现 <strong>Deque</strong> 接口，<strong>Deque</strong> 继承自 <strong>Queue</strong> ，实现一个双向队列基础方法 --- 具体请参考文章</p><p><a href="https://blog.csdn.net/xushiyu1996818/article/details/100161326" target="_blank">https://blog.csdn.net/xushiyu1996818/article/details/100161326</a></p></li></ul><br><h3 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> <span id="t3">构造方法</span></h3><p>LinkedList 底层构造仅有 3 个字段，LinkedList 通过 <code>first</code> 和 <code>last</code> 引用分别指向链表的第一个和最后一个元素，以此达到双向链表的功能 ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//list长度，默认为0</span>
    <span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//第一个节点</span>
    <span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">;</span>
    <span class="token comment">//最后一个节点</span>
    <span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> last<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>Node&lt;E&gt;</code> 为内部静态类，泛型可以存放任意对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token comment">// 当前节点对象</span>
        <span class="token class-name">E</span> item<span class="token punctuation">;</span>
        <span class="token comment">// 下一个节点对象</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
        <span class="token comment">// 上一个节点对象</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>
        <span class="token comment">// 构造方法为全参构造器</span>
        <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 <code>Node&lt;E&gt;</code> 的特性，LinkedList 的结构图如下：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/LinkedListSource3.jpg" alt="LinkedListSource3"></p><p>LinkedList 构造方法有 2 个，无参构造器什么都没有，因此默认 LinkedList 的 <code>first</code> 和 <code>last</code> 引用均为空。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//无参构造器，所有节点默认为null</span>
    <span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 集合参数构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用无参构造器，先创建list</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用批量添加</span>
        <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="linkedlist-的常用方法" tabindex="-1"><a class="header-anchor" href="#linkedlist-的常用方法" aria-hidden="true">#</a> <span id="t4">LinkedList 的常用方法</span></h3><p>同一类型方法都大同小异，增删迭代都会选一个贴代码，几个个人认为比较特殊方法也会稍微介绍下。</p><p>其中一些知识点和 <code>ArrayList</code> 相同，例如：<strong>modCount 的作用</strong> ，请直接转至 <strong>ArrayList 源码解析</strong> 。</p><br><h4 id="add-int-index-e-element" tabindex="-1"><a class="header-anchor" href="#add-int-index-e-element" aria-hidden="true">#</a> <span id="t41">add(int index, E element)</span></h4><p>涉及添加方法如下：</p><ol><li><strong>List 接口方法：</strong></li></ol><ul><li><p>add(E e)，末尾添加一个元素</p></li><li><p>add(int index, E element)，向指定索引插入元素</p></li><li><p>addAll(Collection&lt;? extends E&gt; c)，顺序批量添加</p></li><li><p>addAll(int index, Collection&lt;? extends E&gt; c)，从指定位置开始批量添加</p></li></ul><ol start="2"><li><strong>Deque 接口方法：</strong></li></ol><ul><li>addFirst(E e)，在链表开头添加元素</li><li>addLast(E e)，在链表末尾添加元素，和 add(E e) 方法相同</li></ul><p>添加方法 <strong>add(int index, E element)</strong>，向指定索引插入元素，涉及的 <strong>private</strong> 方法比较全面，这里贴下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//在指定位置添加元素</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//判断索引位置是否可用</span>
        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span>
            <span class="token comment">//如果添加位置和长度相同，当前最大索引为size-1，则添加在末尾</span>
            <span class="token function">linkLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token comment">//在原索引位置的节点前面插入新节点</span>
            <span class="token function">linkBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的几个 <strong>private</strong> 方法 <strong><code>linkLast(E e) 、node(int index)</code></strong> 和 <strong><code>linkBefore(E e, Node&lt;E&gt; succ)</code></strong> 在源码中非常常用。</p><p><strong>linkLast(E e)</strong> 作用是在末尾添加新节点：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 将元素标定为最后一个节点</span>
    <span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//原本最后一个节点</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>
        <span class="token comment">//以E为值，构造新节点</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将新节点作为最后一个节点</span>
        last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token comment">//若原链表为空（最后一个节点为空），将新节点设为第一个节点</span>
        <span class="token comment">//否则将新节点设置为，原节点的下一个节点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token comment">//链表长度+1</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">//操作次数+1</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>画个图明了得表达下</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/LinkedListSource4.jpg" alt="LinkedListSource4"></p><p>然后是 <strong><code>linkBefore(E e, Node&lt;E&gt; succ)</code></strong> ，在指定节点前插入，配合 <strong><code>node(int index)</code></strong> 获得指定索引的节点，可进行，按索引位置插入元素：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//返回指定索引的节点</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//判断插入的位置在链表前半段或者是后半段</span>
        <span class="token comment">//对正数，右移1位相当于除以2，保留整数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 前半段顺序遍历</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 后半段倒序遍历</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
                x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
            <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 在指定节点前插入新节点</span>
    <span class="token keyword">void</span> <span class="token function">linkBefore</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> succ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取原节点的上一个</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
        <span class="token comment">//根据需要插入的元素，创建新节点，</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> succ<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将新节点设为原节点的前一个</span>
        succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
        <span class="token comment">//链表长度+1</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">//操作次数+1</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>node(int index)</strong> 采用双向遍历，而且采用了位移，讲道理，敲了几年代码还真没用过几次。。。。</p><p>顺便贴个示意图，不能白画 10 分钟画出来。。。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/LinkedListSource5.jpg" alt="LinkedListSource5"></p><br><h4 id="remove-int-index" tabindex="-1"><a class="header-anchor" href="#remove-int-index" aria-hidden="true">#</a> <span id="t42">remove(int index)</span></h4><p>涉及移除方法有：</p><ol><li><strong>List 接口方法：</strong></li></ol><ul><li><p>remove(Object o)，移除第一个指定元素</p></li><li><p>remove(int index)，根据索引位置删除</p></li><li><p>clear()，清空链表</p></li></ul><ol start="2"><li><strong>Deque 接口方法：</strong></li></ol><ul><li>removeFirst()，移除链表第一个节点</li><li>removeLast()，移除链表最后一个节点，和 removeFirst() 方法相同</li><li>remove()，移除头节点，实际上是调用 removeFirst()</li><li>removeFirstOccurrence(Object o)，移除第一个出现的元素，内部调用了 remove(Object o)</li><li>removeLastOccurrence(Object o)，移除最后一个出现的元素，倒序遍历，与 remove(Object o) 相反</li></ul><p>内部调用都差不多，<strong>remove(int index)</strong> 作用是根据索引位置删除：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//根据索引位置删除</span>
    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//判断索引节点是否可用</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//判断索引节点是否可用</span>
    <span class="token comment">// 和 isPositionIndex 区别就是，长度超出 1 是否可用</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以发现，<strong>remove(int index)</strong> 不能取 <strong>size</strong> 值，而 <strong>add</strong> 系列方法可以。</p><p>然后就是解除节点的连接：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 移除指定节点</span>
    <span class="token class-name">E</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 保存前后节点和当前节点元素值引用</span>
        <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
        <span class="token comment">//前后判空，重新设置 first 和 last 引用</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            first <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
            x<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            last <span class="token operator">=</span> prev<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>
            x<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//设置为空，帮助 GC尽快回收</span>
        x<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        size<span class="token operator">--</span><span class="token punctuation">;</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="poll-和-pop" tabindex="-1"><a class="header-anchor" href="#poll-和-pop" aria-hidden="true">#</a> <span id="t43">poll() 和 pop()</span></h4><p>除了上面提到的 <strong>Deque 接口方法</strong>，还有专用队列操作：</p><ul><li>peek()，返回第一个节点的值</li><li>poll()，移除第一个节点，并返回第一个节点的值</li><li>offer(E e)，在末尾添加节点</li><li>offerFirst(E e)，在队列顶部添加节点</li><li>offerLast(E e)，在队列底部添加节点</li><li>peekFirst()，返回第一个节点的元素值，不移除节点</li><li>peekLast()，返回最后一个节点的元素值，不移除节点</li><li>pollFirst()，返回第一个节点的元素值，并移除节点</li><li>pollLast()，返回最后一个节点的元素值，并移除节点</li><li>push(E e)，往队列顶部添加节点</li><li>pop()，从队列顶部弹出节点</li></ul><p>这些方法实际上都是调用了 <strong>List 接口</strong> 的基础方法，没有特别的地方，常用的应该就是 <strong>pash、pop、poll</strong> 这些，就贴个代码略过了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//移除第一个节点，并返回第一个节点的值</span>
    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

   <span class="token comment">// 往队列顶部添加节点</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 从队列顶部弹出节点</span>
    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>poll()</strong> 和 <strong>pop()</strong> 方法其实基本相同，根据 <strong>removeFirst()</strong> 可以知道，<strong>poll()</strong> 在空链表时返回空，<strong>pop()</strong> 则会抛出异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//移除链表第一个节点</span>
    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> <span id="t5">总结</span></h3><ol><li>对于随机访问，查询读取操作， ArrayList 优于 LinkedList，因为 LinkedList 需要移动指针。</li><li>大量的增删操作使用 LinkedList，因为 ArrayList 需要创建复制数组。</li><li>平时 coding 中，使用完的对象要置空，帮助 GC 回收。</li></ol><br><h3 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="t6">参考文章</span></h3><p><a href="https://www.pdai.tech/md/java/collection/java-collection-LinkedList.html" target="_blank">https://www.pdai.tech/md/java/collection/java-collection-LinkedList.html</a></p><p><a href="https://blog.csdn.net/m0_37884977/article/details/80467658" target="_blank">https://blog.csdn.net/m0_37884977/article/details/80467658</a></p>`,72),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","LinkedListSource.html.vue"]]);export{d as default};
