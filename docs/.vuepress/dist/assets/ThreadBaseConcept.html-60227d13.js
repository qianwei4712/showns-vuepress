import{_ as o,r as c,o as l,c as i,a as s,w as a,d as t,b as e,f as p}from"./app-c14a8d33.js";const u={},r=p(`<div class="catalog"><ul><li><a href="#t0">前言</a></li><li><a href="#t1">线程的状态及状态转换</a></li><li><a href="#t2">线程的使用方式</a></li><li><a href="#t3">线程基础机制</a><ul><li><a href="#t31">priority 优先级</a></li><li><a href="#t32">daemon 守护线程</a></li><li><a href="#t33">sleep() 线程休眠</a></li><li><a href="#t34">yield() 状态声明</a></li><li><a href="#t35">其他 native 方法</a></li></ul></li><li><a href="#t4">线程之间的协作方式</a><ul><li><a href="#t41">wait、notify 机制</a></li><li><a href="#t42">join</a></li><li><a href="#t43">await、signal</a></li></ul></li><li><a href="#t5">线程中断机制</a><ul><li><a href="#t51">协作式和抢占式</a></li><li><a href="#t52">isInterrupted()</a></li><li><a href="#t53">interrupt()</a></li><li><a href="#t54">interrupted()</a></li></ul></li><li><a href="#te">参考文章</a></li></ul></div><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> <span id="t0">前言</span></h2><p>在进入多线程和并发代码学习前，我们得先了解线程这玩意儿。通常需要了解的内容有：</p><ul><li>线程有哪几种状态? 分别说明从一种状态到另一种状态转变有哪些方式?</li><li>通常线程有哪几种使用方式?</li><li>基础线程机制有哪些?</li><li>线程之间有哪些协作方式?</li><li>线程的中断机制？</li></ul><p>首先讲一个老生常谈的概念，进程与线程：</p><ul><li><strong>进程</strong> ：指在系统中正在运行的一个应用程序；程序一旦运行就是进程； <strong>进程是资源分配的最小单位。</strong></li><li><strong>线程</strong> ：系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。 <strong>线程是程序执行的最小单位。</strong></li></ul><blockquote><p><strong>线程是一个操作系统级别的概念。 JAVA语言（包括其他编程语言）本身不创建线程；而是调用操作系统层提供的接口创建、控制、销毁线程实例。</strong></p></blockquote><p>比如 <code>Thread</code> 的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最底层方法用的是 <code>native</code> 方法，调用的是 <code>C、C++</code> 操作系统本地方法。</p><p>开始之前老规矩，把源码放上：</p><ul><li>Thread 源码解读注释：<a href="https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/lang/Thread.java" target="_blank">https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/lang/Thread.java</a></li><li>Object 源码解读注释：<a href="https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/lang/Object.java" target="_blank">https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/lang/Object.java</a></li></ul><br><h2 id="线程的状态及状态转换" tabindex="-1"><a class="header-anchor" href="#线程的状态及状态转换" aria-hidden="true">#</a> <span id="t1">线程的状态及状态转换</span></h2><p>操作系统层面，线程有以下状态：</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/thread/操作系统线程状态转换.png" alt="计算机层面的线程状态转换"></p><p>这五种状态是最基本的转换模型。在不同的编程语言中，会有细微区别。</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/thread/Java 线程状态转换图.png" alt="Java线程状态转换图"></p><p>对 <code>Java</code> 来说，线程状态已经确定在了 <strong>Thread</strong> 内部类的枚举中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
        <span class="token constant">NEW</span><span class="token punctuation">,</span><span class="token comment">//尚未启动的线程的线程状态</span>
        <span class="token constant">RUNNABLE</span><span class="token punctuation">,</span><span class="token comment">//可运行线程的线程状态。处于可运行状态的线程正在Java虚拟机中执行，但可能正在等待来自操作系统的其他资源，例如处理器。</span>
        <span class="token constant">BLOCKED</span><span class="token punctuation">,</span><span class="token comment">//阻塞状态</span>
        <span class="token constant">WAITING</span><span class="token punctuation">,</span><span class="token comment">//等待线程的线程状态</span>
        <span class="token constant">TIMED_WAITING</span><span class="token punctuation">,</span><span class="token comment">//具有指定等待时间的等待线程的线程状态</span>
        <span class="token constant">TERMINATED</span><span class="token punctuation">;</span><span class="token comment">//终止线程的线程状态。线程已完成执行。</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Blocking、 Waiting、Timed Waiting 其实都是休眠状态，在 Java 中进行了区分。</p><p>可运行状态和运行状态合并成 Runnable。</p></blockquote><p>然后看看详细介绍</p><ol><li><strong>New（新建）</strong></li></ol><p>线程对象被创建时，它只会短暂地处于这种状态。此时它已经分配了必须的系统资源，并执行了初始化。</p><p>相当于，这个线程还没有调用 <code>start()</code> 方法。</p><br><ol start="2"><li><strong>Runnable（可运行/就绪/运行中）</strong></li></ol><p><code>Runnable</code> 状态包括了操作系统线程状态中的 Running 和 Ready，也就是处于此状态的线程可能正在运行，也可能正在等待系统资源，如等待 CPU 为它分配时间片，如等待网络IO读取数据。</p><p>线程调度程序会从可运行线程池中选择一个线程作为当前线程。这也是线程进入运行状态的唯一一种方式。</p><p>所以线程只能从，可运行状态进入运行中状态。</p><ul><li>调用线程的 <code>start()</code> 方法，此线程进入就绪状态。</li><li>当前线程时间片用完了，调用当前线程的 <code>yield()</code> 方法，当前线程进入就绪状态。</li><li>锁池里的线程拿到对象锁后，进入就绪状态。</li><li>当前线程 <code>sleep() </code>方法结束，其他线程 <code>join()</code> 结束，等待用户输入完毕，某个线程拿到对象锁，这些线程也将进入就绪状态。</li></ul><br><ol start="3"><li><strong>Blocking（阻塞）</strong></li></ol><p>Blocking 称为阻塞状态，或者说线程已经被挂起，原因通常是它在等待一个“锁”，当尝试进入一个 synchronized 语句块/方法时，锁已经被其它线程占有，就会被阻塞，直到另一个线程走完临界区或发生了相应锁对象的 wait() 操作后，它才有机会去争夺进入临界区的权利。</p><p>在 Java 代码中，需要考虑 synchronized 的粒度问题，否则一个线程长时间占用锁，其它争抢锁的线程会一直阻塞，直到拥有锁的线程释放锁。</p><p>处于 BLOCKED 状态的线程，即使对其调用 thread.interrupt() 也无法改变其阻塞状态，因为 interrupt() 方法只是设置线程的中断状态，即做一个标记，不能唤醒处于阻塞状态的线程。</p><br><ol start="4"><li><strong>Waiting（无限期等待）</strong></li></ol><p>等待其它线程显式地唤醒，否则不会被分配 CPU 时间片。</p><table><thead><tr><th style="text-align:left;">进入方法</th><th>退出方法</th></tr></thead><tbody><tr><td style="text-align:left;">没有设置 Timeout 参数的 Object.wait() 方法</td><td>Object.notify() / Object.notifyAll()</td></tr><tr><td style="text-align:left;">没有设置 Timeout 参数的 Thread.join() 方法</td><td>被调用的线程执行完毕</td></tr><tr><td style="text-align:left;">LockSupport.park() 方法</td><td>-</td></tr></tbody></table><br><ol start="5"><li><strong>Timed Waiting（限期等待）</strong></li></ol><p>无需等待其它线程显式地唤醒，在一定时间之后会被系统自动唤醒。</p><p>调用 <code>Thread.sleep()</code> 方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。</p><p>调用 <code>Object.wait()</code> 方法使线程进入限期等待或者无限期等待时，常常用“挂起一个线程”进行描述。</p><p>睡眠和挂起是用来描述行为，而阻塞和等待用来描述状态。</p><p>阻塞和等待的区别在于，阻塞是被动的，它是在等待获取一个排它锁。而等待是主动的，通过调用 <code>Thread.sleep()</code> 和 <code>Object.wait()</code> 等方法进入。</p><table><thead><tr><th>进入方法</th><th>退出方法</th></tr></thead><tbody><tr><td>Thread.sleep() 方法</td><td>时间结束</td></tr><tr><td>设置了 Timeout 参数的 Object.wait() 方法</td><td>时间结束 / Object.notify() / Object.notifyAll()</td></tr><tr><td>设置了 Timeout 参数的 Thread.join() 方法</td><td>时间结束 / 被调用的线程执行完毕</td></tr><tr><td>LockSupport.parkNanos() 方法</td><td>-</td></tr><tr><td>LockSupport.parkUntil() 方法</td><td>-</td></tr></tbody></table><br><ol start="6"><li><strong>Terminated（死亡）</strong></li></ol><p>可以是线程结束任务之后自己结束，或者产生了异常而结束。</p><p>其实这只是 Java 语言级别的一种状态，在操作系统内部可能已经注销了相应的线程，或者将它复用给其他需要使用线程的请求，而在 Java 语言级别只是通过 Java 代码看到的线程状态而已。</p><br><p><strong>“阻塞”与“等待”的区别：</strong></p><p>（1）“阻塞”状态是等待着获取到一个排他锁，进入“阻塞”状态都是被动的，离开“阻塞”状态是因为其它线程释放了锁，不阻塞了；</p><p>（2）“等待”状态是在等待一段时间 或者 唤醒动作的发生，进入“等待”状态是主动的；</p><p>如主动调用 Object.wait() ，如无法获取到 ReentraantLock ，主动调用 LockSupport.park() ，如主线程主动调用 subThread.join() ，让主线程等待子线程执行完毕再执行。</p><p>离开“等待”状态是因为其它线程发生了唤醒动作或者到达了等待时间。</p><br><h2 id="线程的使用方式" tabindex="-1"><a class="header-anchor" href="#线程的使用方式" aria-hidden="true">#</a> <span id="t2">线程的使用方式</span></h2><p>Java 创建线程的方式有：</p><ul><li>实现 Runnable 接口</li><li>实现 Callable 接口</li><li>继承 Thread 类</li></ul><p>实现 Runnable 和 Callable 接口的类只能当做一个可以在线程中运行的任务，不是真正意义上的线程，因此最后还需要通过 Thread 来调用。</p><h3 id="runnable-接口" tabindex="-1"><a class="header-anchor" href="#runnable-接口" aria-hidden="true">#</a> Runnable 接口</h3><p>Runnable 接口就一个方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Runnable接口应由任何类实现，其实例将由线程执行。 该类必须定义一个无参数的方法，称为run 。
 * <span class="token keyword">@since</span>   JDK1.0
 */</span>
<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 当实现接口的对象Runnable被用来创建一个线程，启动线程使对象的run在独立执行的线程中调用的方法。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>方法run的一般合同是它可以采取任何行动。
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本的使用方式为:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Runnable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lamada 表达式则更为简编：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Runnable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="callable-接口" tabindex="-1"><a class="header-anchor" href="#callable-接口" aria-hidden="true">#</a> Callable 接口</h3><p>Callable 接口和 Runnable 相比，就多了一个返回值，使用方式有点差异。</p><p>实现方式为 <code>call()</code> 方法，带有返回值，可以抛出异常。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 返回结果并可能引发异常的任务。 实现者定义一个没有参数的单一方法，称为 call 。
 * Callable 接口类似于 Runnable ，因为它们都是为其实例可能由另一个线程执行的类设计的。
 * 然而，A Runnable 不返回结果，也不能抛出被检查的异常。
 * 该 Executors 类包含的实用方法，从其他普通形式转换为 Callable 类。
 * <span class="token keyword">@since</span> 1.5
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>V<span class="token punctuation">&gt;</span></span> the result type of method <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">call</span></span><span class="token punctuation">}</span>
 */</span>
<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 计算一个返回值，如果不能计算那么抛出异常
     * <span class="token keyword">@return</span> computed result
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span> if unable to compute a result
     */</span>
    <span class="token class-name">V</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Callable 不能直接作为 Thread 参数创建线程，而是用 <code>Future</code> 来装载返回结果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token annotation punctuation">@Override</span>
     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token string">&quot;结束&quot;</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ft<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ft<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="thread-类" tabindex="-1"><a class="header-anchor" href="#thread-类" aria-hidden="true">#</a> Thread 类</h3><p>最后就是最基本的继承 Thread 类了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MyThread</span> mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样也是需要实现 <code>run()</code> 方法，因为 Thread 类也实现了 <code>Runable</code> 接口。</p><p>当调用 <code>start()</code> 方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待被调度，当一个线程被调度时会执行该线程的 <code>run()</code> 方法。</p><p>在实际开发中， <strong>推荐使用接口实现方式使用线程</strong> ：</p><ul><li><strong>Java 不支持多重继承，因此继承了 Thread 类就无法继承其它类，但是可以实现多个接口；</strong></li><li><strong>继承整个 Thread 类开销过大，使用接口方式更加轻量。</strong></li></ul><br><h2 id="线程基础机制" tabindex="-1"><a class="header-anchor" href="#线程基础机制" aria-hidden="true">#</a> <span id="t3">线程基础机制</span></h2><p>线程的机制，其实说的就是 Thread 的底层方法，所以这一部分将会介绍 Java Thread 的部分源码。主要包括：</p><p><strong>priority 优先级、daemon 守护线程、sleep() 线程休眠、yield() 状态声明、interrupt 线程中断、其他 native 方法。</strong></p><p>这一部分介绍的都是 <code>JDK8</code> 中的 <code>Thread</code> 类的一些 <code>native</code> 方法和最基础的机制。</p><p><code>native</code> 方法调用操作系统本地方法，也可以把它看做 Java 中最底层部分。</p><p><em>虽然不知道这些在啥时候能用到，但是看起来还是很高大上的........</em></p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/20200723231006.jpg" alt=""></p><br><h3 id="priority-优先级" tabindex="-1"><a class="header-anchor" href="#priority-优先级" aria-hidden="true">#</a> <span id="t31">priority 优先级</span></h3><p>在 <code>Java doc</code> 中有这样关于优先级的介绍：</p><blockquote><p><strong>每一条线程都有优先级。拥有更高优先级的线程在执行时优先于低优先级的线程。</strong></p><p><strong>当线程中执行的代码创建了一个新的线程对象，那么这个新的线程对象的优先级和创建它的线程的优先级相同。</strong></p></blockquote>`,97),d=p(`<ul><li><strong>规则性</strong> ： <strong>优先级高的线程获取 CPU 的资源概率比较高</strong> ；线程最终是由操作系统来分配 CPU 资源的，Java 只能为这条线程设置较高优先级，使其更有可能尽早获得运行。</li><li><strong>随机性</strong> ： <strong>在操作系统层面，就算线程设置了更高的优先级，也无法绝对保证优先执行，只是拥有更大的概率获得资源。</strong></li><li><strong>继承性</strong> ： <strong>当线程中执行的代码创建了一个新的线程对象，那么这个新的线程对象的优先级和创建它的线程的优先级相同。</strong> 这个好理解，而且代码里也非常明确。</li></ul><p>首先看看 <code>Thread</code> 关于优先级的参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 线程优先级，int类型，范围为1-10，默认为5</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> priority<span class="token punctuation">;</span>
<span class="token comment">// 线程可以具有的最低优先级。</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">MIN_PRIORITY</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 分配给线程的默认优先级</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">NORM_PRIORITY</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">// 线程可以具有的最高优先级。</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">MAX_PRIORITY</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在一条线程初始化时，请删去其余代码，可以发现线程的 <code>继承性</code> ，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>
                      <span class="token keyword">long</span> stackSize<span class="token punctuation">,</span> <span class="token class-name">AccessControlContext</span> acc<span class="token punctuation">,</span>
                      <span class="token keyword">boolean</span> inheritThreadLocals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token class-name">Thread</span> parent <span class="token operator">=</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>省略的其他多余代码，初始化线程，将启动线程的优先级传递到新线程。</p><p>然后，我们还能通过调用线程的 <code>setPriority()</code> 方法设置线程的优先级（ <strong>优先级的设定最好在 start() 之前</strong> ）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token keyword">int</span> newPriority<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ThreadGroup</span> g<span class="token punctuation">;</span>
    <span class="token comment">//判定当前运行的线程是否有权修改该线程</span>
    <span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newPriority <span class="token operator">&gt;</span> <span class="token constant">MAX_PRIORITY</span> <span class="token operator">||</span> newPriority <span class="token operator">&lt;</span> <span class="token constant">MIN_PRIORITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//获取该线程所属的线程组</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>g <span class="token operator">=</span> <span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断是否高于此线程组的最高优先级</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newPriority <span class="token operator">&gt;</span> g<span class="token punctuation">.</span><span class="token function">getMaxPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newPriority <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">getMaxPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 调用 native 方法设置优先级</span>
        <span class="token function">setPriority0</span><span class="token punctuation">(</span>priority <span class="token operator">=</span> newPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后实际设置优先级的方法为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">setPriority0</span><span class="token punctuation">(</span><span class="token keyword">int</span> newPriority<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置优先级</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用操作系统本地方法，所以 Java 只能通过操作系统开放的方法来管理线程。</p><br><h3 id="daemon-守护线程" tabindex="-1"><a class="header-anchor" href="#daemon-守护线程" aria-hidden="true">#</a> <span id="t32">daemon 守护线程</span></h3><p>在 <code>Java</code> 中有两类线程：<strong>用户线程 (User Thread)</strong> 和 <strong>守护线程 (Daemon Thread)</strong></p><p>在 JDK8 的 Thread 源码的官方注释中，关于守护线程有以下几句描述：</p>`,15),k=e("p",null,"每一条线程都可能被标注为守护线程。当创建它的线程是一个守护线程时，新线程才是守护线程。",-1),v=e("p",null,"当 Java 虚拟机启动时，通常已经存在了一个非守护线程（这个线程通常会调用某指定类的名为main的方法）。",-1),m=p(`<br><p>先说简单的，与线程优先级相同，守护线程的 <code>继承性</code> 也在线程创建 <code>init</code> 方法中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>daemon <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//判断就是直接返回属性值</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> daemon<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个没啥好解释的了。。。。然后继续看官方注释，可以发现：</p><ul><li><strong>main 方法启动的线程是非守护线程（也就是用户线程）。</strong></li><li>发生上述的两种情况时，Java 虚拟机将会退出。翻译一下其实就是，所有非守护线程结束时，Java 虚拟机才会停止。所以， <strong>Java 虚拟机中必定包含守护线程。</strong></li></ul><blockquote><p>实际上，Java GC 就是守护线程。</p></blockquote><p>是不是绕的脑阔疼。。。。</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/BA7750DF.png" alt=""></p><hr><p><strong>守护线程是服务线程，准确地来说就是服务其他的线程，具有”陪伴“特性。若进程中没有用户线程，则守护线程自动销毁。</strong></p><p>给个小栗子提供下测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;守护线程尚未停止&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//主线程等待3秒</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主线程（非守护线程）结束。。。守护线程即将关闭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果很明显了，就不贴了。。。。。。</p><p>还有就是：</p><p><strong>设置守护线程必须在线程开始执行之前：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 将此线程标记为<span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">isDaemon</span></span> 守护线程<span class="token punctuation">}</span>或用户线程。
     * 当仅运行的线程都是守护程序线程时，Java虚拟机将退出。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> 必须在线程启动之前调用此方法
     * <span class="token keyword">@param</span>  <span class="token parameter">on</span> 如果<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>，则将该线程标记为守护线程
     * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">IllegalThreadStateException</span></span> 如果此线程是 <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">isAlive</span></span> alive<span class="token punctuation">}</span>
     * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">SecurityException</span></span> 如果 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">checkAccess</span></span><span class="token punctuation">}</span> 确定当前线程无法修改此线程
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> on<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        daemon <span class="token operator">=</span> on<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@return</span> 测试此线程是否仍然存在。如果一个线程已经启动并且尚未死亡，则该线程是活动的。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>看，这里用到了个 native 方法，最终决定线程的并不是 Java。</em></p><br><p>到这里忽然想起以前在 main 方法测试线程池的时候，主线程运行结束，虚拟机没有停止。</p><p>当时没有在意，现在想想应该是非守护线程没有全部关闭。</p><br><p>现在来研究下，太具体的不讲了，主要确定下是因为非守护线程没有关闭这件事：</p><ol><li>比如已经一个线程池 <code>ThreadPoolExecutor</code> 的实例对象，我现在 <code>pool.execute()</code> 提交了一个任务。</li><li>线程池内部有个 <code>Worker</code> 内部类，专门负责处理任务。执行任务的方法里写了个死循环（为啥要死循环我就不知道了，以后再研究）</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">//这里写了个死循环，会看这个 Worker有没有任务，如果没有就会去取</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>最后就是这个 <code>Worker</code> 创建的时候并没有设置为守护线程，所以根据线程守护属性的继承性，它是用户线程。</li></ol><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/thread/线程池Worker为用户线程.png" alt="线程池Worker守护线程属性传递"></p><p>又解决了以前的一个疑问，舒服。。。。。。抬走，下一个 ~~</p><br><h3 id="sleep-线程休眠" tabindex="-1"><a class="header-anchor" href="#sleep-线程休眠" aria-hidden="true">#</a> <span id="t33">sleep() 线程休眠</span></h3><p><code>sleep(long millis)</code> 方法就算是没学过并发也肯定见过。在刚开始学习的时候肯定见过这个方法的使用。</p><p>而且，不是还有段子，二期性能优化全靠这段代码嘛。。。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token doc-comment comment">/**
  * 使当前正在执行的线程进入休眠状态（暂时停止执行），以毫秒为单位，取决于系统定时器和调度程序的精度和准确性。
  * 并且线程不会丢失监视器锁。
  * <span class="token keyword">@param</span>  <span class="token parameter">millis</span> 睡眠时间（以毫秒为单位）
  * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> 如果<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">millis</span></span><span class="token punctuation">}</span>的值为负
  * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">InterruptedException</span></span> 如果有任何线程中断了当前线程。抛出此异常时，将清除当前线程的中断状态。
  */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有两个异常，虽然不知道 native 是如何抛出异常的，但是了解下，有这两异常。</p><p><strong>这是一个静态方法，作用于当前使用这个方法的线程。</strong></p><p>Thread 中还有一个更的睡眠方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span>  <span class="token parameter">millis</span> 睡眠时间（以毫秒为单位）
     * <span class="token keyword">@param</span>  <span class="token parameter">nanos</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span><span class="token operator">-</span><span class="token number">999999</span></span></span><span class="token punctuation">}</span> 额外的纳秒睡眠
     * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> 如果<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">millis</span></span><span class="token punctuation">}</span>的值为负，或者<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">nanos</span></span><span class="token punctuation">}</span>的值不在<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span><span class="token operator">-</span><span class="token number">999999</span></span></span><span class="token punctuation">}</span>范围内
     * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">InterruptedException</span></span> 如果有任何线程中断了当前线程。抛出此异常时，将清除当前线程的中断状态。
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">,</span> <span class="token keyword">int</span> nanos<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;timeout value is negative&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nanos <span class="token operator">&gt;</span> <span class="token number">999999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;nanosecond timeout value out of range&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&gt;=</span> <span class="token number">500000</span> <span class="token operator">||</span> <span class="token punctuation">(</span>nanos <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> millis <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            millis<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span>millis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细一读简直瞎了我的狗眼。。。。。。意思就是，超过 500 微秒，算 1 毫秒？？？？源码还能这么随意？？？</p><p>不过这里其实也能发现一个知识点：</p><p><strong>操作系统对线程的管理只能精确到毫秒级别。</strong></p><p>然后这里补充两个有点意思冷门知识：</p><ul><li><code>Thread.currentThread().sleep()</code> 和 <code>Thread.sleep()</code> 的区别</li><li><code>Thread.sleep(0)</code> 有什么作用</li></ul><p>先看第一个， <code>Thread.currentThread().sleep()</code> 和 <code>Thread.sleep()</code> 的区别。我就直接列了：</p><ol><li>从上面 sleep 方法的代码以及注释中可以发现，它是作用于当前线程。</li><li>因为它是一个静态方法，所有线程共用一个方法。所以当当前线程调用这个方法时，并没有创建新的 Thread 对象。</li><li><code>Thread.currentThread().sleep()</code> 则是先返回当前正在执行的线程的引用。这也是一个 <code>native</code> 方法。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@return</span>  返回对当前正在执行的线程对象的引用。
 */</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token class-name">Thread</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>所以实际上，两者并没有区别。只是一个是直接使用静态方法，一个是实例调用静态方法。</li></ol><br><p>下面看第二个，<code>Thread.sleep(0)</code> 有什么作用直接引用<a href="https://www.cnblogs.com/JianGuoWan/p/9139698.html" target="_blank">大佬们的博客</a>：</p><blockquote><p><strong>Thread.Sleep(0) 并非是真的要线程挂起0毫秒，意义在于这次调用Thread.Sleep(0)的当前线程确实的被冻结了一下，让其他线程有机会优先执行。</strong></p><p><strong>Thread.Sleep(0) 是你的线程暂时放弃cpu，让线程马上重新回到就绪队列而非等待队列，也就是释放一些未用的时间片给其他线程或进程使用，就相当于一个让位动作。</strong></p></blockquote><br><h3 id="yield-状态声明" tabindex="-1"><a class="header-anchor" href="#yield-状态声明" aria-hidden="true">#</a> <span id="t34">yield() 状态声明</span></h3><p>Thread 还提供了一个方法，这个方法的作用是建议 CPU 处理线程。看如下代码和注释：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 向处理器提出建议，当前线程愿意让出CPU给其他线程。处理器也可以忽略此提示。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Yield 是一种启发式尝试，旨在提高线程之间的相对进展，否则将过度利用CPU。
     * 应将其使用与详细的性能分析和基准测试结合起来，以确保它实际上具有所需的效果。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这是一个很少使用的方法。它可能在调试或者测试的时候，或者设计并发控制程序的时候很有用。
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确实在 Thread 源码内部没有这个方法的直接调用，JDK 内部也很少使用这个方法。</p><p>不过和上面的 <code>Thread.sleep(0)</code> 进行对比：</p><ul><li><code>yield()</code> 只是建议，CPU 并不一定采纳执行。就算 CPU 采纳，线程也依然是 <strong>RUNNABLE</strong> 状态。只是从运行状态变化到就绪状态。</li><li>调用 <code>Thread.sleep()</code> 时，则会立即从 <strong>RUNNABLE</strong> 转化为 <strong>TIMED_WAITING</strong> 状态。</li></ul><br><h3 id="其他-native-方法" tabindex="-1"><a class="header-anchor" href="#其他-native-方法" aria-hidden="true">#</a> <span id="t35">其他 native 方法</span></h3><p>Thread 一些过时的 native 方法{ <code>suspend0()挂起线程</code> ，<code>resume0()恢复挂起的线程</code> ， <code>stop0()停止线程</code> }就不介绍了。</p><p>上面已经介绍了绝大部分 native 方法，剩下的几个在这里统一做下简要介绍。</p><p>还有非常重要的中断机制，这个将会后面单独介绍。中断是线程中非常重要的内容，能写的很多。。。</p><ol><li>设置线程名</li></ol><p>Thread 中对操作系统进行线程名操作是这个方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">setNativeName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置线程名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是在 Thread 类中，也有自己维护的线程名。</p><p>首先 Thread 维护了一个 <code>char[]</code> 作为线程名。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">char</span>  name<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//线程名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同时提供了 <code>get/set</code> 方法，对于其中的 <code>set</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 更改线程名
     * <span class="token keyword">@param</span>      <span class="token parameter">name</span>  此线程的新名称。
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果线程状态不为0（初始状态），说明线程已经启动</span>
         <span class="token comment">// 那就需要调用 native 方法进行更改。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">setNativeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果线程已经启动，那么需要调用本地方法进行更改。。</p><p>那么如果没启动呢，就不需要调用了？。。。。那这样是不是说明：</p>`,71),b=p(`<p>应该对吧，逻辑通畅。</p><br><ol start="2"><li>持有锁</li></ol><p>锁的内容也是后面讲，瞟一眼这个代码注释：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 如果当前线程持有指定锁，则返回true
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>此方法旨在允许程序断言当前线程已持有指定的锁：
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>
     <span class="token code-section">*     <span class="token line"><span class="token code language-java"><span class="token keyword">assert</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">holdsLock</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
     *</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>
     * <span class="token keyword">@param</span>  <span class="token parameter">obj</span> 测试锁所有权的对象
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> 如果obj为 null
     * <span class="token keyword">@return</span> 如果当前线程持有指定锁，则返回true
     * <span class="token keyword">@since</span> 1.4
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">holdsLock</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><ol start="3"><li>还有几个不知道什么作用的方法</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">static</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">static</span> <span class="token class-name">StackTraceElement</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dumpThreads</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threads<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两静态方法在 Thread 类没用到，好像和 JVM 栈有关。</p><p>既然没用到，那就不管了。。。</p><br><h2 id="线程之间的协作方式" tabindex="-1"><a class="header-anchor" href="#线程之间的协作方式" aria-hidden="true">#</a> <span id="t4">线程之间的协作方式</span></h2><p>在一般的SSM框架增删改查中，我们很少需要用到多线程协作。（应该是基本用不到）</p><p>但是在稍微偏向技术方面，甚至是，自己做点小玩具，想要更加高效时，就需要用到多线程之间的协调通信。</p><p>刚开始学习并发，也不知道全不全。。。我目前找到的就这几种。</p><br><h3 id="wait、notify-机制" tabindex="-1"><a class="header-anchor" href="#wait、notify-机制" aria-hidden="true">#</a> <span id="t41">wait、notify 机制</span></h3><p>首先要介绍的就是，并发中比较特殊的方法。</p><p><code>wait</code> 和 <code>notify</code> 系列方法是写在 <code>Object</code> 中的， <code>Object</code> 在 JAVA 中的地位，那简直是老祖宗了，除了 <code>Class</code> 外，根本没有其他类有这种地位。。。</p><blockquote><p>所以首先我提出的疑问就是，为什么要把这几个方法写在 <strong>Object</strong> 中，而不是 <strong>Thread</strong> 中？</p></blockquote><p>在网上查了半天资料，才发现这居然还是一道号称艰难的面试题。</p><p>结论可能会涉及后面的知识，还有一些我都看不懂的，先全部列上：</p><ol><li>首先是，wait 和 notify 都必须在同步中才能生效，这些方法都必须标识同步所属的锁。<strong>任意对象都可以作为锁</strong> ，所以将这两方法设计在了 Object 类而不是 Thread 类中。</li><li>wait 方法暂停的是持有锁的对象，所以想调用方式为 <code>Object.wait()</code> ，notify 也一样。</li><li>wait 和 notify 不仅仅是普通方法或同步工具，更重要的是它们是 <strong>Java 中两个线程之间的通信机制</strong>。 如果不能通过 Java 关键字(例如 synchronized)实现通信此机制，同时又要确保这个机制对每个对象可用，那么 Object 类则是的合理的声明位置。</li><li>在 Java 中，为了进入代码的临界区，线程需要锁定并等待锁，他们不知道哪些线程持有锁，而只是知道锁被某个线程持有， 并且需要等待以取得锁, 而不是去了解哪个线程在同步块内，并请求它们释放锁。</li></ol><p>说实话，大佬的理解我确实看不懂。。。。</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/NM29O3L8D9OFYYR5LSQ.jpg" alt=""></p><p><strong>同步</strong> 和 <strong>等待通知</strong> 是两个不同的领域，不要把它们看成是相同的或相关的。</p><p>同步是提供互斥并确保 Java 类的线程安全，而 <strong>wait 和 notify 是两个线程之间的通信机制</strong> 。</p><p>好嘞，然后继续。wait() 的三个重载方法中，两个方法调用另一个 native 本地方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//无参方法，默认 wait(0),无限期等待</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token keyword">int</span> nanos<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;timeout value is negative&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nanos <span class="token operator">&gt;</span> <span class="token number">999999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;nanosecond timeout value out of range&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&gt;=</span> <span class="token number">500000</span> <span class="token operator">||</span> <span class="token punctuation">(</span>nanos <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            timeout<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">wait</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终产生作用的是下面这个本地方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 导致当前线程等待，直到另一个线程调用此对象的notify()方法或notifyAll()方法，或指定的时间已过。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>当前线程必须持有本身对象监视器。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>此方法使当前线程（称为T）将自身置入等待 set 集合中，然后放弃该对象的所有同步声明。
     *之后线程 T 无法成为线程调度的目标，并且休眠，直到发生四件事情之一：
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>一些其他线程调用该对象的notify方法，并且线程T恰好被任意选择为被唤醒的线程。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>某些其他线程调用此对象的notifyAll方法。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>一些其他线程interrupts线程T。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>指定的实时数量已经过去，或多或少。 然而，如果timeout为零，则不考虑实时，线程等待直到通知。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
     * 然后从该对象的等待set集合中删除线程T ，并重新启用线程调度。
     * 然后它以通常的方式与其他线程竞争在对象上进行同步的权限;
     * 一旦获得了对象的控制，其对对象的所有同步声明就恢复到现状，也就是在调用wait方法之后的情况。
     * 线程T然后从调用wait方法返回。 因此，从返回wait方法，对象和线程的同步状态T正是因为它是当wait被调用的方法。
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>线程也可以唤醒，而不会被通知，中断或超时，即所谓的虚假唤醒 。
     * 虽然这在实践中很少会发生，但应用程序必须通过测试应该使线程被唤醒的条件来防范，并且如果条件不满足则继续等待。
     * 换句话说，等待应该总是出现在循环中，就像这样：
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>
     <span class="token code-section">*     <span class="token line"><span class="token code language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span></span>
     *         <span class="token line"><span class="token code language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>condition</span> <span class="token attr-name">does</span> <span class="token attr-name">not</span> <span class="token attr-name">hold</span><span class="token punctuation">&gt;</span></span><span class="token code language-java"><span class="token punctuation">)</span></span></span>
     *             <span class="token line"><span class="token code language-java">obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
     *         <span class="token line"><span class="token code language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// Perform action appropriate to condition</span></span></span>
     *     <span class="token line"><span class="token code language-java"><span class="token punctuation">}</span></span></span>
     *</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>如果当前线程interrupted任何线程之前或在等待时，那么InterruptedException被抛出。
     * 如上所述，在该对象的锁定状态已恢复之前，不会抛出此异常。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>请注意， wait方法，因为它将当前线程放入该对象的等待集，仅解锁此对象;
     * 当前线程可以同步的任何其他对象在线程等待时保持锁定。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>该方法只能由作为该对象的监视器的所有者的线程调用。
     * 有关线程可以成为监视器所有者的方法的说明，请参阅notify方法。
     *
     * <span class="token keyword">@param</span>      <span class="token parameter">timeout</span>   等待的最长时间（以毫秒为单位）。
     * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span>      如果timeout值为负。
     * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">IllegalMonitorStateException</span></span>  如果当前线程不是此对象的监视器的所有者
     * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">InterruptedException</span></span> 如果任何线程在当前线程等待通知之前或当前线程中断当前线程。 当抛出此异常时，当前线程的中断状态将被清除。
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是官方注解的谷歌翻译。</p><p>上面的官方文档的每句话都蛮重要的。。。当然最重要的就两点：</p><ol><li>使用 wait 的方法前提： <strong>当前线程必须持有本身对象监视器</strong></li><li>从 wait 唤醒的方式： <ul><li><strong>其他线程调用该对象的 notify 或 notifyAll 方法。</strong></li><li><strong>其他线程 interrupts 此线程。</strong></li><li><strong>休眠时间已经过去，线程重新等待调度。如果timeout为零，则不考虑实时，线程等待直到通知。</strong></li></ul></li></ol><p>notify 方法则有以下两个：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 唤醒正在等待对象监视器的单个线程。
     * 如果任何线程正在等待这个对象，其中一个被选择被唤醒。
     * 选择是任意的，并且由实施器判断发生。
     * 线程通过调用wait方法之一等待对象的监视器。
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>唤醒的线程将无法继续，直到当前线程放弃此对象上的锁定为止。
     * 唤醒的线程将以通常的方式与任何其他线程竞争，这些线程可能正在积极地竞争在该对象上进行同步;
     * 例如，唤醒的线程在下一个锁定该对象的线程中没有可靠的权限或缺点。
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>该方法只能由作为该对象的监视器的所有者的线程调用。 线程以三种方式之一成为对象监视器的所有者：
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>通过执行该对象的同步实例方法。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>通过执行在对象上synchronized synchronized语句的正文。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>对于类型为Class,的对象，通过执行该类的同步静态方法。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>一次只能有一个线程可以拥有一个对象的显示器。
     * 
     * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">IllegalMonitorStateException</span></span>  如果当前线程不是此对象的监视器的所有者
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 唤醒正在等待对象监视器的所有线程。 线程通过调用wait方法之一等待对象的监视器。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>唤醒的线程将无法继续，直到当前线程释放该对象上的锁。
     * 唤醒的线程将以通常的方式与任何其他线程竞争，这些线程可能正在积极地竞争在该对象上进行同步;
     * 例如，唤醒的线程在下一个锁定该对象的线程中不会有可靠的特权或缺点。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>该方法只能由作为该对象的监视器的所有者的线程调用。
     * 有关线程可以成为监视器所有者的方法的说明，请参阅notify方法。
     * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">IllegalMonitorStateException</span></span>  如果当前线程不是此对象的监视器的所有者
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个栗子测试下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">WaitNotify</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WaitNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>example<span class="token operator">::</span><span class="token function">waitObj</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>example<span class="token operator">::</span><span class="token function">notifyObj</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;main 主线程结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WaitNotify</span> <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">notifyObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;notity 调用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">waitObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;wait 结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若启动多个线程调用 wait() 方法，则如下图：</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/thread/wait、notify机制示意图.png" alt="wait、notify机制示意图"></p><blockquote><p>PS: 没有设置守护线程，因此 main 方法将永远不会终结。</p></blockquote><p>这里顺便补充下，<code>sleep()</code> 和 <code>wait()</code> 的区别：</p><table><thead><tr><th style="text-align:center;">sleep()</th><th style="text-align:center;">wait()</th></tr></thead><tbody><tr><td style="text-align:center;">Thread 的静态方法</td><td style="text-align:center;">Object 的方法</td></tr><tr><td style="text-align:center;">保留锁</td><td style="text-align:center;">释放锁</td></tr></tbody></table><br><h3 id="join" tabindex="-1"><a class="header-anchor" href="#join" aria-hidden="true">#</a> <span id="t42">join</span></h3><blockquote><p>join 方法的作用是使所属的线程对象x正常执行 run() 方法中的任务，而使当前线程z进行无限期的阻塞，等待线程x销毁后再继续执行线程z后面的代码。</p></blockquote>`,46),g=p(`<p>join 与 synchronized 的区别是：join 在内部使用 wait（）方法进行等待，而 synchronized 关键字使用的是 JVM 底层，使用“对象监视器”原理作为同步。</p><p>先来看下 <code>join</code> 方法的源码，其他两个无参和带参方法，最终调用的都是这个 <code>synchronized</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span>  <span class="token parameter">millis</span> 等待时间（以毫秒为单位）
     * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> 如果<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">millis</span></span><span class="token punctuation">}</span>的值为负
     * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">InterruptedException</span></span> 如果有任何线程中断了当前线程，抛出此异常时，线程的中断状态将被清除。
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">//记录进入方法的时间</span>
        <span class="token keyword">long</span> base <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;timeout value is negative&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果线程未死亡，则循环调用 wait</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//第一次进入，now 为0，等待 millis 毫秒</span>
                <span class="token comment">//第二次进入，now 为已经等待时间，delay小于等于0时跳出</span>
                <span class="token keyword">long</span> delay <span class="token operator">=</span> millis <span class="token operator">-</span> now<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">wait</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
                now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> base<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从源码中可以发现， <code>join</code> 最后还是基于 <code>wait</code> 方法实现的。</p><p>先看个例子，看看如何工作，再画图：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;join 线程的 run 方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token number">1999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;， main 线程循环中：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果，省略前后：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>...
1596276428638， main 线程循环中：4
1596276430640， main 线程循环中：6
join 线程的 run 方法
1596276430640， main 线程循环中：7
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再放张图，大概示意下工作流程：</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/thread/join 机制线程示意图.png" alt="join 机制线程示意图"></p><br><h3 id="await、signal" tabindex="-1"><a class="header-anchor" href="#await、signal" aria-hidden="true">#</a> <span id="t43">await、signal</span></h3><p>java.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。</p><p>这种方式可以在一个 Lock 对象里面可以创建多个Condition（即对象监视器）实例，线程对象可以注册在指定的Condition中，从而可以有选择性地对指定线程进行通知，所以更加灵活。</p><p>这种方式先贴一个大佬的例子，内容有点多，以后再说，我感觉以后肯定会讲到，应该会有专门一篇。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AwaitTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Condition</span> condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;before&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AwaitTest</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AwaitTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>example<span class="token operator">::</span><span class="token function">after</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>example<span class="token operator">::</span><span class="token function">before</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="线程中断机制" tabindex="-1"><a class="header-anchor" href="#线程中断机制" aria-hidden="true">#</a> <span id="t5">线程中断机制</span></h2><p>一个线程执行完毕之后会自动结束，如果在运行过程中发生异常也会提前结束。</p><p>线程中断是一个非常重要的概念，中断线程是取消任务最好的方法。</p><p>在 Java 的 <code>Thread</code> 类中，提供了以下三个关于线程中断的 <code>public</code> 方法：</p><ul><li><code>void interrupt()</code> ，中断线程。</li><li><code>static boolean interrupted()</code> ，测试当前线程是否已被中断。通过此方法可以清除线程的中断状态。</li><li><code>boolean isInterrupted()</code> ，测试线程是否已经中断，线程的中断状态不受该方法的影响。</li></ul><p>这三个是线程的公共方法，但是它的最底层是两个 native 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">interrupt0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//中断线程</span>
    <span class="token doc-comment comment">/**
     * 测试某些线程是否已被中断。线程的中断状态不受此方法的影响。
     * ClearInterrupted参数决定线程中断状态是否被重置，若为true则重置。
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> <span class="token class-name">ClearInterrupted</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这里就可以发现：</p>`,25),h=p(`<p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/然而.jpg" alt=""></p><br><h3 id="协作式和抢占式" tabindex="-1"><a class="header-anchor" href="#协作式和抢占式" aria-hidden="true">#</a> <span id="t51">协作式和抢占式</span></h3><p>然后，就有了下一个问题：</p><blockquote><p><strong>中断状态是个啥玩意儿？？？线程中断难道不是终止线程嘛？为什么还会有状态？Thread 类里面也没有这个状态变量啊，难道操作系统内给线程添加了这个状态？</strong></p></blockquote><p>所以，又又又又得百度去咯。。。根据各位大佬们的博客，个人感觉应该是这样的：</p><ol><li><strong>明确线程中断状态不是 Thread 类的标志位，而是操作系统中对线程的中断标志。</strong></li></ol><p>这一结论来自 <code>native</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 测试某些线程是否已被中断。线程的中断状态不受此方法的影响。
     * ClearInterrupted参数决定线程中断状态是否被重置，若为true则重置。
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> <span class="token class-name">ClearInterrupted</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显了，在操作系统对线程的管理中，确实存在一个中断状态的标志位。</p><br><ol start="2"><li><strong>操作系统调度线程的方式：协作式、抢占式</strong></li></ol><ul><li>协作式：<strong>线程自己的工作执行完后，要主动通知调度切换到另一个线程上。</strong> 如果一个线程编写有问题，一直不告知系统进行线程切换，那么程序就会一直阻塞在那里。线程的执行时间由自身掌控。</li><li>抢占式：<strong>线程将由调度来分配执行时间，线程的切换不由线程自身决定。</strong> 不会出现一个线程导致整个进程阻塞的问题。</li></ul>`,13),w=p(`<p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/225U43536-9.jpg" alt=""></p><br><h3 id="isinterrupted" tabindex="-1"><a class="header-anchor" href="#isinterrupted" aria-hidden="true">#</a> <span id="t52">isInterrupted()</span></h3><blockquote><p><strong>测试线程是否已经中断，线程的中断状态不受该方法的影响。</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 测试此线程是否已被中断。线程的中断状态不受此方法的影响。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>如果中断时，线程并没有存活，那么该方法返回 false。意思就是，如果线程还没有 start 启动，或者已经消亡，那么返回依然是 false.
     * <span class="token keyword">@return</span>  如果该线程已被中断，返回true；否则返回 false
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//不清除中断状态</span>
        <span class="token keyword">return</span> <span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是最基础的判断中断状态，且不更改 OS 线程中断标志位。可以对照上面的 native 方法阅读。特别的记一下这两句：</p>`,6),y=p(`<p>举个栗子看下效果就行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程中断&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后 main 启动：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Example</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前线程 example 尚未启动，此时状态：&quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        example<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前线程 example 启动且尚未调用 interrupt，此时状态：&quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        example<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前线程 example 启动且调用 interrupt，此时状态：&quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;等待 5 秒，example 应该已经消亡，此时状态：&quot;</span> <span class="token operator">+</span> example<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出状态为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>当前线程 example 尚未启动，此时状态：false
当前线程 example 启动且尚未调用 interrupt，此时状态：false
当前线程 example 启动且调用 interrupt，此时状态：true
线程中断
等待 5 秒，example 应该已经消亡，此时状态：false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="interrupt" tabindex="-1"><a class="header-anchor" href="#interrupt" aria-hidden="true">#</a> <span id="t53">interrupt()</span></h3><blockquote><p><strong>中断线程</strong></p></blockquote><p>先看下源码，以及官方（我自个的渣渣翻译）注释：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 中断此线程。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>线程可以中断自身，这是允许的。在这种情况下，不用进行安全性验证（<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> checkAccess<span class="token punctuation">}</span> 方法检测）
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>若当前线程由于 wait() 方法阻塞，或者由于join()、sleep()方法，然后线程的中断状态将被清除，并且将收到 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span><span class="token punctuation">}</span>。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>如果线程由于 IO操作（<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">InterruptibleChannel</span></span> InterruptibleChannel<span class="token punctuation">}</span>）阻塞，那么通道 channel 将会关闭，
     * 并且线程的中断状态将被设置，线程将收到一个 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">ClosedByInterruptException</span></span><span class="token punctuation">}</span> 异常。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>如果线程由于在 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">Selector</span></span><span class="token punctuation">}</span> 中而阻塞，那么线程的中断状态将会被设置，它将立即从选择操作中返回。
     *该值可能是一个非零值，就像调用选择器的<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">Selector</span></span>＃wakeupakeup<span class="token punctuation">}</span>方法一样。
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>如果上述条件均不成立，则将设置该线程的中断状态。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>中断未运行的线程不必产生任何作用。
     * <span class="token keyword">@throws</span>  <span class="token reference"><span class="token class-name">SecurityException</span></span> 如果当前线程无法修改此线程
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果调用中断的是线程自身，则不需要进行安全性判断</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>blockerLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Interruptible</span> b <span class="token operator">=</span> blocker<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">interrupt0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 只是设置中断标志</span>
                b<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">interrupt0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法的作用，在上面的栗子中已经有过体现了，接着来测试下源码中提到的异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程 sleep 结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;main 线程调用 interrupt 结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程抛出了中断异常，此时状态：&quot;</span> <span class="token operator">+</span> thread<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;等待 5 秒，线程应该已经消亡，此时状态：&quot;</span> <span class="token operator">+</span> thread<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>main 线程调用 interrupt 结束
线程抛出了中断异常，此时状态：<span class="token boolean">true</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>InterruptedException</span><span class="token operator">:</span> sleep interrupted
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">thread<span class="token punctuation">.</span></span>InterruptTest</span><span class="token punctuation">.</span>lambda$test2$<span class="token function">0</span><span class="token punctuation">(</span><span class="token class-name">InterruptTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">thread<span class="token punctuation">.</span></span>InterruptTest</span>$$<span class="token class-name">Lambda</span>$<span class="token number">1</span><span class="token operator">/</span><span class="token number">791452441.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">745</span><span class="token punctuation">)</span>
等待 <span class="token number">5</span> 秒，线程应该已经消亡，此时状态：<span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 sleep 过程中调用中断，抛出中断异常。。线程不会往下执行。</p><p><strong>虽然抛出了异常，但是线程的中断状态确实设置成功了。。。只是线程被立刻从 sleep 中唤醒。</strong></p><p>嗯，这两这个好理解。。。。。</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/Z6JZX6IFOVSYGLPDXRG.jpg" alt=""></p><br><h3 id="interrupted" tabindex="-1"><a class="header-anchor" href="#interrupted" aria-hidden="true">#</a> <span id="t54">interrupted()</span></h3><blockquote><p><strong>测试当前线程是否已被中断。通过此方法可以清除线程的中断状态。</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 测试当前线程是否已被中断。
     * 通过此方法可以清除线程的中断状态.
     * 换句话说，如果此方法要连续调用两次，则第二个调用将返回false(除非当前线程在第一个调用清除了它的中断状态之后，且在第二个调用对其进行检查之前再次中断)
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>如果中断时，线程并没有存活，那么该方法返回 false
     * <span class="token keyword">@return</span>   如果该线程已被中断，返回true；否则返回 false
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//清除线程的中断状态</span>
        <span class="token keyword">return</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说实话，这个方法的作用，实在是有点迷。。。。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Example2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;调用 interrupt 方法，线程中断&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;尚未调用 interrupted 方法，此时线程中断状态：&quot;</span> <span class="token operator">+</span> <span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程第 1 次调用 interrupted 方法，方法返回：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程第 1 次调用 interrupted 方法结束后，此时线程中断状态：&quot;</span> <span class="token operator">+</span> <span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程第 2 次调用 interrupted 方法，方法返回：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程第 2 次调用 interrupted 方法结束后，此时线程中断状态：&quot;</span> <span class="token operator">+</span> <span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程第 3 次调用 interrupted 方法，方法返回：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程第 3 次调用 interrupted 方法结束后，此时线程中断状态：&quot;</span> <span class="token operator">+</span> <span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mian 方法测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Example2</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        example<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台输出结果为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>调用 interrupt 方法，线程中断
尚未调用 interrupted 方法，此时线程中断状态：true
线程第 1 次调用 interrupted 方法，方法返回：true
线程第 1 次调用 interrupted 方法结束后，此时线程中断状态：false
线程第 2 次调用 interrupted 方法，方法返回：false
线程第 2 次调用 interrupted 方法结束后，此时线程中断状态：false
线程第 3 次调用 interrupted 方法，方法返回：false
线程第 3 次调用 interrupted 方法结束后，此时线程中断状态：false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>乍一看，感觉需要挠头。。。这个方法的作用也忒不明显了。。。 <code>java doc</code> 也不讲的不清楚。</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/FO1K\`MWB}1T3WPLJYPS~UHP.jpg" alt=""></p><p>仔细一想，是这样的：</p><ul><li>作为一个 <code>static</code> 方法，作用于当前线程</li><li><strong>调用 <code>static boolean interrupted()</code> 方法后，先将线程的中断状态设置为 false，再返回原先的中断状态</strong></li></ul><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="te">参考文章</span></h2><p><a target="_blank" href="https://www.cnblogs.com/javadevelper/p/6036472.html">https://www.cnblogs.com/javadevelper/p/6036472.html</a></p><p><a target="_blank" href="https://www.pdai.tech/md/java/thread/java-thread-x-thread-basic.html">https://www.pdai.tech/md/java/thread/java-thread-x-thread-basic.html</a></p><p><a target="_blank" href="https://blog.csdn.net/qq_33565047/article/details/102958254">https://blog.csdn.net/qq_33565047/article/details/102958254</a></p><p><a target="_blank" href="https://blog.csdn.net/wanliguodu/article/details/81005560">https://blog.csdn.net/wanliguodu/article/details/81005560</a></p><p><a target="_blank" href="https://www.cnblogs.com/trust-freedom/p/6606594.html">https://www.cnblogs.com/trust-freedom/p/6606594.html</a></p><p><a target="_blank" href="https://blog.csdn.net/qq_22771739/article/details/82529874">https://blog.csdn.net/qq_22771739/article/details/82529874</a></p><p><a target="_blank" href="https://blog.csdn.net/weixin_33782386/article/details/92423372">https://blog.csdn.net/weixin_33782386/article/details/92423372</a></p><p><a target="_blank" href="https://segmentfault.com/a/1190000016056471">https://segmentfault.com/a/1190000016056471</a></p><p><a target="_blank" href="https://www.cnblogs.com/JianGuoWan/p/9139698.html">https://www.cnblogs.com/JianGuoWan/p/9139698.html</a></p><p><a target="_blank" href="https://segmentfault.com/a/1190000019962661">https://segmentfault.com/a/1190000019962661</a></p><p><a target="_blank" href="https://www.jianshu.com/p/beb5413c5ce6">https://www.jianshu.com/p/beb5413c5ce6</a></p><p><a target="_blank" href="https://www.cnblogs.com/Donnnnnn/p/7234934.html">https://www.cnblogs.com/Donnnnnn/p/7234934.html</a></p><p><a target="_blank" href="https://blog.csdn.net/oldshaui/article/details/106952102">https://blog.csdn.net/oldshaui/article/details/106952102</a></p><p><a target="_blank" href="https://blog.csdn.net/qq_41901915/article/details/103654263">https://blog.csdn.net/qq_41901915/article/details/103654263</a></p><p><a target="_blank" href="https://www.cnblogs.com/L-a-u-r-a/p/8575217.html">https://www.cnblogs.com/L-a-u-r-a/p/8575217.html</a></p><p><a target="_blank" href="https://blog.csdn.net/tianjindong0804/article/details/105134182">https://blog.csdn.net/tianjindong0804/article/details/105134182</a></p>`,51);function f(j,x){const n=c("font");return l(),i("div",null,[r,s(n,{color:"red"},{default:a(()=>[t("这两句话就囊括了线程优先级的三个性质：**继承性、规则性、随机性** ")]),_:1}),d,e("blockquote",null,[k,v,s(n,{color:"red"},{default:a(()=>[t("**Java 虚拟机将继续执行，直到发生以下任一情况，发生这两种情况，Java 虚拟机将结束：**")]),_:1}),e("ul",null,[e("li",null,[s(n,{color:"red"},{default:a(()=>[t("**Runtime类的exit方法被调用，并且安全管理器已经允许进行退出操作。**")]),_:1})]),e("li",null,[s(n,{color:"red"},{default:a(()=>[t("**所有非守护线程都已经消亡，消亡原因要么是从run方法返回了，要么是抛出异常了。**")]),_:1})])])]),m,s(n,{color:"red"},{default:a(()=>[t("**Java 中 `new Thread()` 创建了一条线程，在 `start()` 之前，其实并没有真正在操作系统中生成线程。**")]),_:1}),b,s(n,{color:"red"},{default:a(()=>[t("**join 方法具有使线程排队运行的作用，有些类似同步的运行效果。**")]),_:1}),g,s(n,{color:"red"},{default:a(()=>[t("**线程的中断状态，并不是由 Java 来决定。实际上，Thread 类中并没有维护线程的中断状态。**")]),_:1}),h,s(n,{color:"red"},{default:a(()=>[t("**Java 的线程中断，也作为协作式中断，调用 `interrupt()` 方法最终也只是更改操作系统中的中断标志位，线程是否中断，由线程自身决定。**")]),_:1}),w,s(n,{color:"red"},{default:a(()=>[t("**如果线程还没有 start 启动，或者已经消亡，那么返回依然是 false。中断状态只代表是否有线程调用中断方法。**")]),_:1}),y])}const q=o(u,[["render",f],["__file","ThreadBaseConcept.html.vue"]]);export{q as default};
