import{_ as e,r as o,o as c,c as l,b as n,d as s,a as t,f as p}from"./app-831ad1c2.js";const i={},u=p(`<div class="catalog"><ul><li><a href="#t1">死信队列</a><ul><li><a href="#t11">环境准备配置</a></li><li><a href="#t12">消息达到最大长度</a></li><li><a href="#t13">消息 TTL 过期</a></li><li><a href="#t14">拒绝消息</a></li><li><a href="#t15">死信消费</a></li></ul></li><li><a href="#t2">延迟队列</a><ul><li><a href="#t21">基于死信实现</a></li><li><a href="#t22">基于插件实现</a></li></ul></li><li><a href="#t3">惰性队列</a></li><li><a href="#t4">其他</a><ul><li><a href="#t41">幂等性</a></li></ul></li><li><a href="#te">参考文章</a></li></ul></div><h2 id="死信队列" tabindex="-1"><a class="header-anchor" href="#死信队列" aria-hidden="true">#</a> <span id="t1">死信队列</span></h2><blockquote><p><strong>死信：无法被消费的消息，称为死信。</strong></p></blockquote><p>如果死信一直留在队列中，会导致一直被消费，却从不消费成功。</p><p>所以我们专门开辟了一个来存放死信的队列，叫死信队列（DLX，dead-letter-exchange）。</p><p>死信的几种来源：</p><ol><li>消息 TTL 过期（time to live，存活时间，可以用在限时支付消息）</li><li>队列达到最大长度（队列满了，无法路由到该队列）</li><li>消息被拒绝（ basic.reject / basic.nack ），并且 <code>requeue = false</code></li></ol><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/deploy/20210904 RabbitMQ 相关绘图.png" alt=""></p><br><h3 id="环境准备配置" tabindex="-1"><a class="header-anchor" href="#环境准备配置" aria-hidden="true">#</a> <span id="t11">环境准备配置</span></h3><p>准备 MQ 的队列和环境：</p><ul><li>正常交换机 <ul><li>正常队列（最长队列 5） ---- <strong>正常消费者，拒绝消息</strong></li><li>ttl 队列（过期时间 60 秒） ---- <strong>没有消费者</strong></li></ul></li><li>死信交换机 <ul><li>死信队列</li></ul></li></ul><p>主要配置文件如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadConfig</span> <span class="token punctuation">{</span>

    <span class="token comment">/* 正常配置 **********************************************************************************************************/</span>

    <span class="token doc-comment comment">/**
     * 正常交换机，开启持久化
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">DirectExchange</span> <span class="token function">normalExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;normalExchange&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">normalQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// durable: 是否持久化,默认是false,持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在，暂存队列：当前连接有效</span>
        <span class="token comment">// exclusive: 默认也是false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable</span>
        <span class="token comment">// autoDelete: 是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token function">deadQueueArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 队列设置最大长度</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-max-length&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;normalQueue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">ttlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token function">deadQueueArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 队列设置消息过期时间 60 秒</span>
        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;ttlQueue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">Binding</span> <span class="token function">normalRouteBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">normalQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">normalExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;normalRouting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">Binding</span> <span class="token function">ttlRouteBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">ttlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">normalExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;ttlRouting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 死信配置 **********************************************************************************************************/</span>

    <span class="token doc-comment comment">/**
     * 死信交换机
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">DirectExchange</span> <span class="token function">deadExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;deadExchange&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 死信队列
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">deadQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;deadQueue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">Binding</span> <span class="token function">deadRouteBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">deadQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">deadExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;deadRouting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 转发到 死信队列，配置参数
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">deadQueueArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 绑定该队列到私信交换机</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;deadExchange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-routing-key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;deadRouting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><strong>arguments</strong> 具体参数如下：</p><table><thead><tr><th>参数名</th><th>作用</th></tr></thead><tbody><tr><td>x-message-ttl</td><td>发送到队列的消息在丢弃之前可以存活多长时间（毫秒）。</td></tr><tr><td>x-max-length</td><td>队列最大长度</td></tr><tr><td>x-expires</td><td>队列在被自动删除（毫秒）之前可以使用多长时间。</td></tr><tr><td>x-max-length</td><td>队列在开始从头部删除之前可以包含多少就绪消息。</td></tr><tr><td>x-max-length-bytes</td><td>队列在开始从头部删除之前可以包含的就绪消息的总体大小。</td></tr><tr><td>x-dead-letter-exchange</td><td>设置队列溢出行为。这决定了在达到队列的最大长度时消息会发生什么。<br>有效值为drop-head或reject-publish。交换的可选名称，如果消息被拒绝或过期，将重新发布这些名称。</td></tr><tr><td>x-dead-letter-routing-key</td><td>可选的替换路由密钥，用于在消息以字母为单位时使用。如果未设置，将使用消息的原始路由密钥。</td></tr><tr><td>x-max-priority</td><td>队列支持的最大优先级数;如果未设置，队列将不支持消息优先级。</td></tr><tr><td>x-queue-mode</td><td>将队列设置为惰性模式，在磁盘上保留尽可能多的消息以减少内存使用;如果未设置，队列将保留内存缓存以尽快传递消息。</td></tr><tr><td>x-queue-master-locator</td><td>将队列设置为主位置模式，确定在节点集群上声明时队列主机所在的规则。</td></tr><tr><td>x-overflow</td><td>队列达到最大长度时，可选模式包括： <code>drop-head</code>, <code>reject-publish</code> 和 <code>reject-publish-dlx</code>.</td></tr></tbody></table><br><h3 id="队列达到最大长度" tabindex="-1"><a class="header-anchor" href="#队列达到最大长度" aria-hidden="true">#</a> <span id="t12">队列达到最大长度</span></h3><p>首先测试最简单的，没有消费者。</p><p>调用6次正常队列的生产方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 正常消息队列，队列最大长度5
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/normalQueue&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">normalQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;messageId&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, 正常队列消息，最大长度 5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;normalExchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;normalRouting&quot;</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MQ 结果如下：</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/scattered/QQ截图20210913200350.png" alt=""></p><br><h3 id="消息-ttl-过期" tabindex="-1"><a class="header-anchor" href="#消息-ttl-过期" aria-hidden="true">#</a> <span id="t13">消息 TTL 过期</span></h3><p>消息的TTL 指的是消息的存活时间，我们可以通过设置消息的TTL或者队列的TTL来实现。</p><blockquote><ul><li><strong>消息的TTL</strong> ：对于设置了过期时间属性(expiration)的消息，消息如果在过期时间内没被消费，会过期。过期在消息即将投递到消费者时判断。</li><li><strong>队列的TTL</strong> ：对于设置了过期时间属性(x-message-ttl)的队列，所有路由到这个队列的消息，都会设置上这个过期时间</li></ul></blockquote><p>两种配置都行，一般都用在定时任务，限时支付这种地方。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 消息 TTL, time to live
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/ttlToDead&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">ttlToDead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;messageId&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, ttl队列消息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;normalExchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ttlRouting&quot;</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送后：</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/scattered/QQ截图20210913201353.png" alt=""></p><p>等待过期后：</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/scattered/QQ截图20210913201456.png" alt=""></p><p><span style="color:red;"><strong>Demo 中只是为了方便，代码中尽量使用 消息TTL，不要用 队列TTL</strong></span></p><br><h3 id="拒绝消息" tabindex="-1"><a class="header-anchor" href="#拒绝消息" aria-hidden="true">#</a> <span id="t14">拒绝消息</span></h3><p>正常队列消费后拒绝消息，并且不进行重新入队：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;normalQueue&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalConsumer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">Message</span> mqMsg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;收到消息，并拒绝重新入队 : &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>mqMsg<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MQ 控制台：</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/scattered/QQ截图20210913203304.png" alt=""></p><br><h3 id="死信消费" tabindex="-1"><a class="header-anchor" href="#死信消费" aria-hidden="true">#</a> <span id="t15">死信消费</span></h3><p>死信队列消费：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;deadQueue&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadConsumer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">Message</span> mqMsg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;死信队列收到消息 : &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>mqMsg<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消息顺序和实验一致：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>死信队列收到消息 : {data=1631534291765, 正常队列消息，最大长度 5, messageId=bce3888b-da38-4299-ac88-d22cbe164739}
死信队列收到消息 : {data=1631535222745, ttl队列消息, messageId=a4617445-5aab-4fac-aec7-5709ea699598}
死信队列收到消息 : {data=1631534503765, 正常队列消息，最大长度 5, messageId=b65ecaab-5ce7-4597-a32c-c90b67ec46da}
死信队列收到消息 : {data=1631534511468, 正常队列消息，最大长度 5, messageId=d63d2a4c-e7d3-4f00-a6ca-78e2d62d1d92}
死信队列收到消息 : {data=1631534585087, 正常队列消息，最大长度 5, messageId=eed0c349-415b-43dc-aa79-c683122a1289}
死信队列收到消息 : {data=1631534588311, 正常队列消息，最大长度 5, messageId=7a7bd152-f2fa-4a74-b9e6-943ac7cbb3d4}
死信队列收到消息 : {data=1631534608504, 正常队列消息，最大长度 5, messageId=9de512a1-4ca4-4060-9096-27aba01c1687}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="延迟队列" tabindex="-1"><a class="header-anchor" href="#延迟队列" aria-hidden="true">#</a> <span id="t2">延迟队列</span></h2><p>使用场景：</p><ul><li><strong>订单十分钟内未支付则自动取消</strong>：下单发送消息 TTL 十分钟，自动转入死信队列 DLX（消费取消订单）</li><li><strong>用户发起退款，如果三天内没有得到处理则通知相关运营人员</strong>：发送退款请求消息 TTL 3天，还没消费转入死信队列（人工接入）</li></ul><p>类似场景还蛮多的。</p><h3 id="基于死信实现" tabindex="-1"><a class="header-anchor" href="#基于死信实现" aria-hidden="true">#</a> <span id="t21">基于死信实现</span></h3><p>基础的延迟队列就不写了，和死信队列一样。实现原理也很简单，消息 TTL 实现延迟。</p><p>上面讲 TTL 时，尽量使用 消息TTL。相对于 队列TTL，消息的TTL 更加灵活。</p><blockquote><p><strong>但是在延迟队列情况下，消息TTL 的过期判断是在即将投递到消费者才判断的，如果消息积压严重，那么即时已经过期的消息，也会在队列中等待很长时间。</strong></p></blockquote><p>这对时间要求严格的场景下，是不允许的。<strong>所以看起来，延迟队列使用队列 TTL 比较合适。</strong></p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/emo/XIKOEQKFKLOO3UE00.jpg" alt=""></p><p>但是但是，<strong>使用队列 TTL，对每一种过期时间，都必须新创建一个队列。</strong></p><p>这就不符合程序设计原则，最好有一种通用的队列，又没有上面提到的 消息TTL 的缺点。</p><br><h3 id="基于插件实现" tabindex="-1"><a class="header-anchor" href="#基于插件实现" aria-hidden="true">#</a> <span id="t22">基于插件实现</span></h3><p>RabbitMQ 中有个插件可以解决上面的缺陷，<strong>rabbitmq_delayed_message_exchange</strong> 插件。</p>`,63),d={href:"https://www.rabbitmq.com/community-plugins.html",target:"_blank",rel:"noopener noreferrer"},r=p(`<p>进入 RabbitMQ 的安装目录下的 plgins 目录，执行下面命令让该插件生效，然后重启 RabbitMQ</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/usr/lib/rabbitmq/lib/rabbitmq_server-3.8.8/plugins
rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_delayed_message_exchang
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>添加插件后，在 MQ 控制台，新增 exchange 有以下新选项：</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/scattered/QQ截图20210915205723.png" alt=""></p><blockquote><p><strong>使用插件实现，将 消息TTL 判断从队列提前到了交换机。</strong> 从而解决了 队列TTL 等待超时的缺陷。</p></blockquote><p>延时交换机内部自带一个分布式数据系统，可以判断过期时间。</p><p>其他使用都一样，在声明交换机时，要使用自定义交换机：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//自定义交换机 我们在这里定义的是一个延迟交换机</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">CustomExchange</span> <span class="token function">delayedExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">//自定义交换机的类型</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-delayed-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//交换机名称，交换机类型，持久化，自动删除，参数</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomExchange</span><span class="token punctuation">(</span><span class="token string">&quot;delayed.exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x-delayed-message&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>剩余代码就不写了。</p><br><h2 id="惰性队列" tabindex="-1"><a class="header-anchor" href="#惰性队列" aria-hidden="true">#</a> <span id="t3">惰性队列</span></h2><p>一句话，惰性队列会将消息保存到磁盘中。消费的时候才会从加载到内存中。</p><p>目的就是支持更长的队列，可以用在消费者不稳定，经常宕机的情况。</p><p><strong>与之对比，持久化队列即便写入磁盘，也会在内存中保留备份。</strong></p><p>使用方式，队列参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-queue-mode&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lazy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> <span id="t4">其他</span></h2><h3 id="幂等性" tabindex="-1"><a class="header-anchor" href="#幂等性" aria-hidden="true">#</a> <span id="t41">幂等性</span></h3><p>例如：消费者 ack 时网络中断等，导致重复消费</p><p>一般解决思路都是，以下2种方式：</p><ul><li><strong>全局ID或者时间戳，可以用MQ自带的ID，消费前判断</strong></li><li><strong>redis 原子性机制，利用 redis 执行 setnx 命令。（推荐）</strong></li></ul><p>其实可以搭配使用。</p><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="te">参考文章</span></h2>`,24),k={href:"https://www.jianshu.com/p/986ee5eb78bc",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.csdn.net/qq_40911404/article/details/111825748",target:"_blank",rel:"noopener noreferrer"},v={href:"https://blog.csdn.net/shishishi777/article/details/99879419",target:"_blank",rel:"noopener noreferrer"},b={href:"https://blog.csdn.net/likemiddle/article/details/90400624",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.bilibili.com/video/BV1cb4y1o7zz",target:"_blank",rel:"noopener noreferrer"},h={href:"https://gitee.com/pic_bed_of_shiva/static-resources/blob/master/showns/file/%E5%B0%9A%E7%A1%85%E8%B0%B7_%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6RabbitMQ_%E8%AF%BE%E4%BB%B6.pdf",target:"_blank",rel:"noopener noreferrer"};function f(q,x){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("下载插件："),n("a",d,[s("Community Plugins — RabbitMQ"),t(a)]),s("，然后解压放置到 RabbitMQ 的插件目录。")]),r,n("p",null,[n("a",k,[s("RabbitMQ的死信队列详解 - 简书 (jianshu.com)"),t(a)])]),n("p",null,[n("a",m,[s("消息TTL_luzaichun的博客-CSDN博客_消息ttl"),t(a)])]),n("p",null,[n("a",v,[s("Springboot+RabbitMQ死信队列_shishishi777的博客-CSDN博客"),t(a)])]),n("p",null,[n("a",b,[s("创建RabbitMQ队列的参数(Arguments)说明_风的狂野的专栏-CSDN博客"),t(a)])]),n("p",null,[n("a",g,[s("尚硅谷2021最新版RabbitMQ教程丨快速掌握MQ消息中间件_哔哩哔哩_bilibili"),t(a)])]),n("p",null,[n("a",h,[s("尚硅谷_消息中间件RabbitMQ_课件.pdf"),t(a)])])])}const w=e(i,[["render",f],["__file","RabbitMqHighClass.html.vue"]]);export{w as default};
