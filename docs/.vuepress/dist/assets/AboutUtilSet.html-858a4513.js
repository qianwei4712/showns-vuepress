import{_ as o,r as p,o as i,c as u,a,w as t,d as s,b as n,f as c}from"./app-c14a8d33.js";const r={},d=c(`<div class="catalog"><ul><li><a href="#t0">概述</a></li><li><a href="#t1">Set 接口</a></li><li><a href="#t2">HashSet 源码</a></li><li><a href="#t3">TreeSet 源码</a><ul><li><a href="#t30">TreeSet 继承关系</a></li><li><a href="#t31">SortedSet、NavigableSet</a></li><li><a href="#t32">TreeSet 简单介绍</a></li></ul></li></ul></div><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> <span id="t0">概述</span></h3><p>Java 集合接口听得最多的应该就是 List、Queue、Set、Map。</p><p>Set 的实现类重要的不多，而且源码也不复杂，甚至觉得没啥可讲的。</p><p>这一篇就汇总贴一下源码注释吧，也不过多介绍了： <strong>HashSet、TreeSet</strong></p><p>还是老规矩，先把源码放上：</p><ul><li>Set 接口源码：<a href="https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/Set.java" target="_blank">https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/Set.java</a></li><li>HashSet 源码：<a href="https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/HashSet.java" target="_blank">https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/HashSet.java</a></li><li>TreeSet 源码：<a href="https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/TreeSet.java" target="_blank">https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/TreeSet.java</a></li></ul><br><h3 id="set-接口" tabindex="-1"><a class="header-anchor" href="#set-接口" aria-hidden="true">#</a> <span id="t1">Set 接口</span></h3><p>首先说下 Set 接口设计的定义：</p><blockquote><p><strong>一个不包含重复元素的容器，即不满足 e1.equals(e2) 条件。</strong></p></blockquote><p>Set 接口的官方注释中有这么一句： <strong>如果允许 null，只允许存在一个 null</strong></p><p>作为一个接口，这里就列一下它的方法和设计要求，具体使用在实现类里讲解。</p><p><strong>查询操作</strong></p><table><thead><tr><th style="text-align:center;">方法名/参数/返回值</th><th style="text-align:center;">接口设计约束</th></tr></thead><tbody><tr><td style="text-align:center;"><code>int size()</code></td><td style="text-align:center;">返回此集合中的元素数。如果此集包含超过 Integer.MAX_VALUE，则返回 Integer.MAX_VALUE。</td></tr><tr><td style="text-align:center;"><code>boolean isEmpty()</code></td><td style="text-align:center;">如果集合不包含任何元素，则返回 true</td></tr><tr><td style="text-align:center;"><code>boolean contains(Object o)</code></td><td style="text-align:center;">如果此集合包含指定的元素，则返回 true。<br>更正式地讲，当且仅当此集合包含一个元素 e，使得（o == null？e == null：o 时，才返回 true）。</td></tr><tr><td style="text-align:center;"><code>Iterator&lt;E&gt; iterator()</code></td><td style="text-align:center;">返回此集合中元素的迭代器。元素以不特定的顺序返回（除非此集合是提供保证的某些类的实例）。</td></tr><tr><td style="text-align:center;"><code>Object[] toArray()</code><br><code>&lt;T&gt; T[] toArray(T[] a)</code></td><td style="text-align:center;">转数组</td></tr></tbody></table><p><strong>修改操作</strong></p><table><thead><tr><th style="text-align:center;">方法名/参数/返回值</th><th style="text-align:center;">接口设计约束</th></tr></thead><tbody><tr><td style="text-align:center;">boolean add(E e);</td><td style="text-align:center;">如果指定的元素尚不存在，则将其添加到该集合（可选操作）<br>更正式地讲，如果集合中不包含任何元素 e2 ，满足 e == null？e2 == null ：e.equals（e2）<br>如果此集合已经包含元素，则调用将使该集合保持不变，并返回 false<br>结合构造函数上的限制，可以确保集合永远不会包含重复元素</td></tr><tr><td style="text-align:center;">boolean remove(Object o);</td><td style="text-align:center;">如果存在指定的元素，则从该集合中删除（可选操作）<br>更正式地讲，删除元素 e，满足 o == null？e == null：o.equals（e）<br> 如果此集合包含元素，则返回 true（或者等效地，如果此集合作为调用结果更改）<br> 一旦调用返回，此集合将不包含该元素。</td></tr></tbody></table><p><strong>其他操作</strong></p><table><thead><tr><th style="text-align:center;">方法名/参数/返回值</th><th style="text-align:center;">接口设计约束</th></tr></thead><tbody><tr><td style="text-align:center;">boolean containsAll(Collection&lt;?&gt; c);</td><td style="text-align:center;">判断包含全部</td></tr><tr><td style="text-align:center;">boolean addAll(Collection&lt;? extends E&gt; c);</td><td style="text-align:center;">批量添加</td></tr><tr><td style="text-align:center;">boolean retainAll(Collection&lt;?&gt; c);</td><td style="text-align:center;">删除差集</td></tr><tr><td style="text-align:center;">boolean removeAll(Collection&lt;?&gt; c);</td><td style="text-align:center;">删除交集</td></tr><tr><td style="text-align:center;">void clear();</td><td style="text-align:center;">删除所有元素，操作后集合为空</td></tr><tr><td style="text-align:center;">boolean equals(Object o);</td><td style="text-align:center;">两个集合具有相同的大小，指定集合的每个成员都包含在此集合中，则返回 true<br>此定义确保 equals 方法可在 set 接口的不同实现中正常工作</td></tr><tr><td style="text-align:center;">int hashCode();</td><td style="text-align:center;">返回此集合的哈希码值<br>集合的哈希码定义为集合中元素的哈希码之和，其中 null 元素的哈希码为零。</td></tr></tbody></table><br><h3 id="hashset-源码" tabindex="-1"><a class="header-anchor" href="#hashset-源码" aria-hidden="true">#</a> <span id="t2">HashSet 源码</span></h3><p>HashSet 通过内部维护一个 HashMap 来实现。主要就以下几点：</p><ul><li>添加到 HashSet 的元素作为 HashMap 的 Key</li><li>所有 HashMap 的 Value 共用一个 <strong>static final</strong> 的 <strong>new Object</strong></li></ul><p>HashMap 源码可以看看以前写过的 ： <a href="https://blog.csdn.net/m0_46144826/article/details/106300438" target="_blank">https://blog.csdn.net/m0_46144826/article/details/106300438</a></p><p>实在没什么好讲的，贴下代码略过了。。。。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 此类实现 Set接口，并由哈希表（实际上是 HashMap实例）支持。
 * 它不保证集合的迭代顺序，特别是，它不能保证顺序会随着时间的推移保持恒定。此类允许null元素。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 *
 * 此类为基本操作提供恒定的时间性能（添加，删除，包含和大小），假设哈希函数将元素正确分散在各个存储桶中。
 * 对此集合进行迭代需要的时间与 HashSet实例的大小（元素数）之和加上 HashMap实例的“容量”（数量之和）成比例个桶。
 * 因此，如果迭代性能很重要，则不要将初始容量设置得过高（或负载因数过低），这一点非常重要。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>请注意，此实现未同步。&lt;/ strong&gt;
 * 如果多个线程同时访问 hashset，并且线程中的至少一个修改了哈希集，则必须外部同步。
 * 这通常是通过对某些自然封装了该对象的对象进行同步来完成的。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 *
 * 如果不存在这样的对象，则应使用<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Collections</span></span>＃synchronizedSet Collections.synchronizedSet<span class="token punctuation">}</span> 方法来“包装”该集合。
 * 最好在创建时执行此操作，以防止意外异步访问集合：
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span> * Set s = Collections.synchronizedSet（new HashSet（...））; &lt;/ pre&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 *
 *此类的iterator方法返回的迭代器为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>fail-fast&lt;/ i&gt;：
 * 如果在创建迭代器后的任何时间修改了集合，则除通过迭代器自己的remove法外，迭代器将引发<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConcurrentModificationException</span></span><span class="token punctuation">}</span>。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 *
 * 请注意，不能保证迭代器的快速失败行为，因为通常来说，在存在不同步的并发修改的情况下，不可能做出任何硬性保证。
 * 快速失败的迭代器尽最大努力抛出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span> ConcurrentModificationException &lt;/ tt&gt;。
 * 因此，编写依赖于此异常的程序的正确性是错误的：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>迭代器的快速失败行为仅应用于检测错误。&lt;/ i&gt;
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>E<span class="token punctuation">&gt;</span></span> 此集合所维护的元素类型
 * <span class="token keyword">@since</span>   1.2
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>
    <span class="token keyword">extends</span> <span class="token class-name">AbstractSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>
    <span class="token keyword">implements</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5024744406713321676L</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>

    <span class="token comment">// 在 HashMap中与key对应的虚拟值，所有 HashSet公用一个</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token constant">PRESENT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 构造一个空的 HashSet，默认HashMap长度16，扩容系数0.75
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 构造一个新集合，其中包含指定集合中的元素。 HashMap是使用默认加载因子（0.75）和足以容纳指定集合中的元素的初始容量创建的。
     * <span class="token keyword">@param</span> <span class="token parameter">c</span> 指定添加的集合
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> 如果指定集合为空
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">.75f</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 带默认长度和扩容系数的构造器
     * <span class="token keyword">@param</span>      <span class="token parameter">initialCapacity</span>  hashmap的初始容量
     * <span class="token keyword">@param</span>      <span class="token parameter">loadFactor</span>        hashmap的扩容系数
     * <span class="token keyword">@throws</span>     <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> 如果扩容系数和初始长度小于0
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 指定初始容量的构造器，默认扩容系数0.75
     * <span class="token keyword">@param</span>      <span class="token parameter">initialCapacity</span>   指定初始容量
     * <span class="token keyword">@throws</span>     <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> 如果初始长度小于0
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 构造一个新的空链接哈希集。 （此包private构造函数仅由LinkedHashSet使用。）支持 HashMap实例是具有指定的初始容量和指定的负载因子的LinkedHashMap。
     * <span class="token keyword">@param</span>      <span class="token parameter">initialCapacity</span>    hashmap的初始容量
     * <span class="token keyword">@param</span>      <span class="token parameter">loadFactor</span>         hashmap的扩容系数
     * <span class="token keyword">@param</span>      <span class="token parameter">dummy</span>             被忽略（将此构造函数与其他int，float构造函数区分开）
     * <span class="token keyword">@throws</span>     <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> 如果扩容系数和初始长度小于0
     */</span>
    <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span> <span class="token keyword">boolean</span> dummy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 返回此集合中元素的迭代器。直接使用 hashmap的keyset迭代器
     * 元素不按特定顺序返回。
     * <span class="token keyword">@return</span> set迭代器
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">ConcurrentModificationException</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> 此集合中元素的数量
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> 如果此集合不包含任何元素，则返回 true
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 如果此集合包含指定的元素，则返回 true。
     * 更正式地讲，当且仅当此集合包含元素 e，使得（o == null？e == null：o时，才返回 true）。
     * <span class="token keyword">@param</span> <span class="token parameter">o</span> 需要进行判定的元素
     * <span class="token keyword">@return</span> 如果此集合包含该元素，则返回 true
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 如果指定的元素尚不存在，则将其添加到该集合中。
     * 因为 hashmap 添加已有的 key，会返回原value,所以不为null。
     * <span class="token keyword">@param</span> <span class="token parameter">e</span> 需要添加的元素
     * <span class="token keyword">@return</span> 如果原 set不含有该元素，则返回true
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token constant">PRESENT</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 从该集合中删除指定的元素（如果存在）。
     * 因为 hashmap 删除某个 key，会返回原value。如果不存在则会返回null。
     * <span class="token keyword">@param</span> <span class="token parameter">o</span> 要从此集中移除的对象（如果存在）
     * <span class="token keyword">@return</span> 如果此集合包含该元素，则返回 true
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">PRESENT</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 清空
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> 返回此HashSet的浅拷贝
     */</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newSet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            newSet<span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> newSet<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 将此 HashSet实例的状态保存到流中（即对其进行序列化）。
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectOutputStream</span> s<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// Write out any hidden serialization magic</span>
        s<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Write out HashMap capacity and load factor</span>
        s<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">.</span><span class="token function">writeFloat</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">loadFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Write out size</span>
        s<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Write out all elements in the proper order.</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">E</span> e <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            s<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 从流中重构 HashSet实例（即反序列化）。
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span> s<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token comment">// Read in any hidden serialization magic</span>
        s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Read capacity and verify non-negative.</span>
        <span class="token keyword">int</span> capacity <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal capacity: &quot;</span> <span class="token operator">+</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Read load factor and verify positive and non NaN.</span>
        <span class="token keyword">float</span> loadFactor <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal load factor: &quot;</span> <span class="token operator">+</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Read size and verify non-negative.</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal size: &quot;</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Set the capacity according to the size and load factor ensuring that</span>
        <span class="token comment">// the HashMap is at least 25% full but clamping to maximum capacity.</span>
        capacity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>size <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> loadFactor<span class="token punctuation">,</span> <span class="token number">4.0f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token punctuation">.</span><span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Create backing HashMap</span>
        map <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">LinkedHashSet</span> <span class="token operator">?</span>
               <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span> <span class="token operator">:</span>
               <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Read in all elements in the proper order.</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
            <span class="token class-name">E</span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token constant">PRESENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 在此元素上创建一个可分割迭代器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Spliterator.html#binding<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> &lt;/ em&gt;，实现了快速失败机制<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>fail-fast&lt;/ em&gt; <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Spliterator</span></span><span class="token punctuation">}</span>。
     * <span class="token keyword">@return</span> a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Spliterator</span></span></span><span class="token punctuation">}</span> over the elements in this set
     * <span class="token keyword">@since</span> 1.8
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Spliterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashMap<span class="token punctuation">.</span>KeySpliterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="treeset-源码" tabindex="-1"><a class="header-anchor" href="#treeset-源码" aria-hidden="true">#</a> <span id="t3">TreeSet 源码</span></h3><br><h4 id="treeset-继承关系" tabindex="-1"><a class="header-anchor" href="#treeset-继承关系" aria-hidden="true">#</a> <span id="t30">TreeSet 继承关系</span></h4><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/AboutUtilSet1.png" alt="AboutUtilSet1"></p><p>老规矩，稍微说下继承的几个类有啥作用：</p><ul><li><p>实现 <strong>Serializable</strong> 接口开启序列化功能 ----具体介绍请转 <a href="https://blog.csdn.net/m0_46144826/article/details/105055432" target="_blank"><strong>Java 面向对象基础 - 异常、序列化</strong></a></p></li><li><p>实现 <strong>Cloneable</strong> 接口，允许使用 <strong>clone()</strong> 方法克隆 — 具体介绍请转 <a href="https://blog.csdn.net/m0_46144826/article/details/104075489" target="_blank"><strong>Java 面向对象基础 - Object 通用方法</strong></a></p></li><li><p><strong>AbstractSet</strong> 抽象类提供了 <strong>Set</strong> 的基础实现，是的 <strong>TreeSet</strong> 不需要从零开始实现一个 Set 的所有方法。当然，<strong>AbstractCollection</strong> 也一样。</p></li><li><p>然后剩下的 <strong>NavigableSet</strong> 和 <strong>SortedSort</strong> 实现了元素的比较，确定优先级，后面再详细讲。</p></li></ul><br><h4 id="sortedset、navigableset" tabindex="-1"><a class="header-anchor" href="#sortedset、navigableset" aria-hidden="true">#</a> <span id="t31">SortedSet、NavigableSet</span></h4><p>先把代码注释放上：</p><ul><li><p>SortedSet 接口源码 ：<a href="https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/SortedSet.java" target="_blank">https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/SortedSet.java</a></p></li><li><p>NavigableSet 接口源码 ：<a href="https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/NavigableSet.java" target="_blank">https://gitee.com/qianwei4712/JDK1.8.0.25-read/blob/master/src/main/java/java/util/NavigableSet.java</a></p></li></ul><p><strong>SortedSet</strong> 是 <strong>NavigableSet</strong> 的父类。</p><p><strong>SortedSet</strong> 是一个自动排序不重复的 Collection 集合，接口设计要求实现一个 <strong>comparator</strong> 比较器，如果没有实现，则使用元素自带的比较器。</p>`,39),k=n("p",null,[n("strong",null,"NavigableSet"),s(" 在 "),n("strong",null,"SortedSet"),s(" 基础上进行了一些功能增强，具体功能见下表：")],-1),m=n("p",null,[n("strong",null,"SortedSet 接口方法：")],-1),v=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"方法、参数、返回值"),n("th",{style:{"text-align":"center"}},"功能介绍")])],-1),b=n("tr",null,[n("td",{style:{"text-align":"center"}},[n("code",null,"Comparator<? super E> comparator()")]),n("td",{style:{"text-align":"center"}},"返回本 SortedSet 的比较器，如果使用自然排序则返回 null")],-1),g=n("td",{style:{"text-align":"center"}},[n("code",null,"SortedSet<E> subSet(E fromElement, E toElement)")],-1),y={style:{"text-align":"center"}},h=n("td",{style:{"text-align":"center"}},[n("code",null,"SortedSet<E> headSet(E toElement)")],-1),w={style:{"text-align":"center"}},S=n("td",{style:{"text-align":"center"}},[n("code",null,"SortedSet<E> tailSet(E fromElement)")],-1),f={style:{"text-align":"center"}},x=n("tr",null,[n("td",{style:{"text-align":"center"}},[n("code",null,"E first()")]),n("td",{style:{"text-align":"center"}},"返回当前 set 中第一个（最小）节点")],-1),E=n("tr",null,[n("td",{style:{"text-align":"center"}},[n("code",null,"E last()")]),n("td",{style:{"text-align":"center"}},"返回当前 set 中最后（最大）一个节点")],-1),j=c('<p><strong>NavigableSet 接口添加的方法：</strong></p><table><thead><tr><th style="text-align:center;">方法、参数、返回值</th><th style="text-align:center;">功能介绍</th></tr></thead><tbody><tr><td style="text-align:center;">E lower(E e);</td><td style="text-align:center;">返回此 set 中严格小于给定元素的最大元素；如果不存在这样的元素，则返回 null。</td></tr><tr><td style="text-align:center;">E floor(E e);</td><td style="text-align:center;">返回此 set 中小于等于给定元素的最大元素；如果不存在这样的元素，则返回 null。</td></tr><tr><td style="text-align:center;">E ceiling(E e);</td><td style="text-align:center;">返回此 set 中大于等于给定元素的最小元素；如果不存在这样的元素，则返回 null。</td></tr><tr><td style="text-align:center;">E higher(E e);</td><td style="text-align:center;">返回此 set 中严格大于给定元素的最小元素；如果不存在这样的元素，则返回 null。</td></tr><tr><td style="text-align:center;">E pollFirst();</td><td style="text-align:center;">获取并移除第一个（最小）元素；如果此 set 为空，则返回 null。</td></tr><tr><td style="text-align:center;">E pollLast();</td><td style="text-align:center;">获取并移除最后一个（最大）元素；如果此 set 为空，则返回 null。</td></tr><tr><td style="text-align:center;"><code>Iterator&lt;E&gt;</code> iterator();</td><td style="text-align:center;">以升序返回在此 set 的元素上进行迭代的迭代器。</td></tr><tr><td style="text-align:center;"><code>NavigableSet&lt;E&gt;</code> descendingSet();</td><td style="text-align:center;">返回此 set 中所包含元素的逆序视图。</td></tr><tr><td style="text-align:center;"><code>Iterator&lt;E&gt;</code> descendingIterator();</td><td style="text-align:center;">以降序返回在此 set 的元素上进行迭代的迭代器。</td></tr><tr><td style="text-align:center;"><code>NavigableSet&lt;E&gt;</code> subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive);</td><td style="text-align:center;">返回此 set 的部分视图，其元素范围从 fromElement 到 toElement。根据 fromInclusive 和 toInclusive 判断是否包含边界。</td></tr><tr><td style="text-align:center;"><code>NavigableSet&lt;E&gt;</code> headSet(E toElement, boolean inclusive);</td><td style="text-align:center;">返回此 set 的部分视图，其元素范围从开始到 toElement。根据 toInclusive 判断是否包含边界。</td></tr><tr><td style="text-align:center;"><code>NavigableSet&lt;E&gt;</code> tailSet(E fromElement, boolean inclusive);</td><td style="text-align:center;">返回此 set 的部分视图，其元素范围从 fromElement 到结束。根据 fromInclusive 判断是否包含边界。</td></tr></tbody></table><br><h4 id="treeset-简单介绍" tabindex="-1"><a class="header-anchor" href="#treeset-简单介绍" aria-hidden="true">#</a> <span id="t32">TreeSet 简单介绍</span></h4><p>TreeSet 和 HashSet 一样，都是都是通过适配器模式完成。</p><p>通过内部维护一个 NavigableMap 来实现。主要就以下几点：</p><ul><li>添加到 TreeSet 的元素作为 NavigableMap 的 Key</li><li>所有 NavigableMap 的 Value 共用一个 <strong>static final</strong> 的 <strong>new Object</strong></li></ul><p>代码实现其实和上面的 HashSet 一样。。我就不贴了。。</p><p>这里顺便提下，TreeSet 使用 NavigableMap 最为参数，而不是 TreeMap 。</p><p>很明显的，使用接口作为参数，可以增加程序的扩展性，所有实现接口的类都可以传入。</p>',10);function _(H,M){const l=p("font"),e=p("tt");return i(),u("div",null,[d,a(l,{color:"red"},{default:t(()=>[s("**所以集合内泛型元素必须实现 Comparable 接口**")]),_:1}),k,m,n("table",null,[v,n("tbody",null,[b,n("tr",null,[g,n("td",y,[s("返回此集合部分的视图，其元素范围从"),a(e,null,{default:t(()=>[s("fromElement")]),_:1}),s("（包括）到"),a(e,null,{default:t(()=>[s("toElement")]),_:1}),s("（不包括）。")])]),n("tr",null,[h,n("td",w,[s("此集合的一部分的视图，其元素严格小于"),a(e,null,{default:t(()=>[s("toElement")]),_:1})])]),n("tr",null,[S,n("td",f,[s("此集合中元素大于或等于"),a(e,null,{default:t(()=>[s("fromElement")]),_:1}),s("的部分的视图")])]),x,E])]),j])}const I=o(r,[["render",_],["__file","AboutUtilSet.html.vue"]]);export{I as default};
