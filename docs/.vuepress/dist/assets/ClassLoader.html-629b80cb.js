import{_ as p,r as o,o as c,c as i,b as n,a as e,w as l,d as s,f as a}from"./app-c14a8d33.js";const d={},u=a('<div class="catalog"><ul><li><a href="#t0">类加载机制概述</a></li><li><a href="#t1">class 文件生命周期</a><ul><li><a href="#t11">Loading：加载阶段</a></li><li><a href="#t12">Linking：链接阶段</a></li><li><a href="#t13">Initialization：初始化阶段</a></li><li><a href="#t14">使用和卸载</a></li></ul></li><li><a href="#t2">类加载器的种类和特点</a><ul><li><a href="#t21">ClassLoader 体验</a></li><li><a href="#t22">类加载器双亲委派机制</a></li></ul></li><li><a href="#te">参考文章</a></li></ul></div><h2 id="类加载机制概述" tabindex="-1"><a class="header-anchor" href="#类加载机制概述" aria-hidden="true">#</a> <span id="t0">类加载机制概述</span></h2><blockquote><p>本文所有代码和介绍，基于 JDK 1.8.0.25</p></blockquote><p>还是放上这个最眼熟的图，这个针对 <code>hotspot</code> 虚拟机所绘制的简图：</p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/JVM运行时数据区.png" alt="JVM运行时数据区" style="zoom:67%;"><p>本文要介绍的就是这个图中的 <strong>类加载器</strong> ，主要内容包括类加载器的工作步骤，内部组成等。</p><p>对于类加载器的内部结构，先看下面这个图：</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/类加载子系统内部结构.png" alt="类加载子系统内部结构"></p><p>类加载器会把 <code>.class</code> 字节码加载到运行时数据区的方法区。</p><p>除了类的信息外，方法区还存放着运行时常量池信息（版本、字段、方法、接口啥的）。</p><br><h2 id="class-文件生命周期" tabindex="-1"><a class="header-anchor" href="#class-文件生命周期" aria-hidden="true">#</a> <span id="t1">class 文件生命周期</span></h2><p>从上面的图中可以看出：</p>',13),r=a('<p>再加上运行时数据区、执行引擎和最后消亡，根据顺序如下图所示：</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/class文件生命周期.png" alt="class文件生命周期"></p><br><h3 id="loading-加载阶段" tabindex="-1"><a class="header-anchor" href="#loading-加载阶段" aria-hidden="true">#</a> <span id="t11">Loading：加载阶段</span></h3><p>加载阶段有不同的类加载器，当然也可以自定义类加载器。</p><p>不过这是在自建虚拟机时、或者大佬优化虚拟机才搞的，我们就知道还能自定义就行了。</p><p>类的加载分为以下步骤：</p><ol><li><strong>通过一个类的全限定名获取定义此类文件的二进制字节流；</strong></li><li><strong>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构；</strong></li><li><strong>在内存中生成一个代表这个类的 <code>java.lang.Class</code> 对象，作为方法区这个类的各种数据的访问入口。</strong></li></ol><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/Class加载步骤简图.png" alt="Class加载步骤简图"></p><p>获取 <code>.class</code> 文件的几种方式：</p><ul><li>从本地系统中直接加载</li><li>通过网络下载 .class 文件，这种场景最典型的应用就是 Web Applet</li><li>从 zip，jar, war 等归档文件中加载 .class 文件</li><li>运行时计算生成，使用最多的是动态代理技术。在 <code>java.lang.reflect.Proxy</code> 中，就是用了 <code>ProxyGenerator.generateProxyClass()</code> 来为特定接口生成形式为 <code>“*$Proxy”</code> 的代理类的二进制字字符流</li><li>从专有数据库中提取 .class 文件</li><li>从其他文件生成，典型应用场景就是 JSP ，由 JSP 文件生成 Class 文件</li></ul><br><h3 id="linking-链接阶段" tabindex="-1"><a class="header-anchor" href="#linking-链接阶段" aria-hidden="true">#</a> <span id="t12">Linking：链接阶段</span></h3><p>主要包括以下三个阶段：</p>',14),k=a('<p><strong>验证: 确保被加载的类的正确性</strong></p><ol><li><p>目的在于确保 class 文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。</p></li><li><p>主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。</p><table><thead><tr><th style="text-align:left;">验证方式</th><th style="text-align:left;">具体验证内容和措施</th></tr></thead><tbody><tr><td style="text-align:left;">文件格式验证</td><td style="text-align:left;">验证字节流是否符合 Class 文件格式的规范；<br>1. 是否以<code>0xCAFEBABE</code>开头<br>2. 主、次版本号是否在当前虚拟机的处理范围之内<br>3. 常量池中的常量是否有不被支持的类型<br>4. 指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量<br>5. Class 文件各个部分及文件本身是否有被删除的或附加的其他信息</td></tr><tr><td style="text-align:left;">元数据验证</td><td style="text-align:left;">对字节码描述的信息进行语义分析，保证描述信息符合规范要求，<br>1. 这个类是否有父类，除了<code>java.lang.Object</code>之外<br>2. 这个类的父类是否继承了不允许被继承的类（final 修饰）<br>3. 如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法</td></tr><tr><td style="text-align:left;">字节码验证</td><td style="text-align:left;">通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</td></tr><tr><td style="text-align:left;">符号引用验证</td><td style="text-align:left;">确保解析动作能正确执行。</td></tr></tbody></table></li></ol>',2),v=n("p",null,[s("但是验证阶段不是必须的，它对 JVM 运行没有影响，"),n("em",null,[s("如果所引用的类经过反复验证，那么可以考虑采用 "),n("code",null,"-Xverifynone"),s(" 参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。")])],-1),m=a(`<br><ul><li><p><strong>准备: 为类的静态变量分配内存，并将其初始化为默认值</strong></p><ol><li>为类变量分配内存并且设置该类变量的默认初始值，即零值。</li><li>这里不包含用 final 修饰的 static，因为 final 在编译的时候就会分配了，准备阶段会显式初始化。</li><li><strong>这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到 Java 堆中。(因为这时候还没创建对象)</strong></li></ol><p>例如以下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>在准备阶段，它只会被赋值为 0，在初始化阶段才会赋值为 1.</p></blockquote><p>不同的类型零值不同：</p><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">零值</th><th style="text-align:center;">数据类型</th><th style="text-align:center;">零值</th></tr></thead><tbody><tr><td style="text-align:center;">int</td><td style="text-align:center;">0</td><td style="text-align:center;">boolean</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">long</td><td style="text-align:center;">0L</td><td style="text-align:center;">float</td><td style="text-align:center;">0.0f</td></tr><tr><td style="text-align:center;">short</td><td style="text-align:center;">(short)0</td><td style="text-align:center;">double</td><td style="text-align:center;">0.0d</td></tr><tr><td style="text-align:center;">char</td><td style="text-align:center;">&#39;\\u0000&#39;</td><td style="text-align:center;">reference</td><td style="text-align:center;">null</td></tr><tr><td style="text-align:center;">byte</td><td style="text-align:center;">(byte)0</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table></li></ul><br><ul><li><strong>解析: 把类中的符号引用转换为直接引用</strong><ol><li>将常量池内的符号引用转换为直接引用的过程。</li><li>事实上，解析操作往往会伴随着 JM 在执行完初始化之后再执行。</li><li>符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java 虚拟机规范》的 Class 文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</li><li>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的 CONSTANT_Class_info、 CONSTANT_Fleldref_info、 CONSTANT_Methodref_info 等。</li></ol></li></ul><br><h3 id="initialization-初始化阶段" tabindex="-1"><a class="header-anchor" href="#initialization-初始化阶段" aria-hidden="true">#</a> <span id="t13">Initialization：初始化阶段</span></h3><blockquote><p>初始化阶段就是执行类构造器方法 <code>&lt;client&gt;()</code> 的过程。</p><p><strong>这个方法是 javac 编译器自动收集类中的所有变量的赋值动作和静态代码块中的语句合并而成的。</strong></p></blockquote><p><em>编译器收集顺序和语句在源文件中出现顺序相同</em>。</p><p>所以意思就是，<code>static</code> 代码块在初始化阶段就已经执行了。</p><br><h3 id="使用和卸载" tabindex="-1"><a class="header-anchor" href="#使用和卸载" aria-hidden="true">#</a> <span id="t14">使用和卸载</span></h3><p>使用时，类访问方法区内的数据结构的接口， 对象是 Heap 区的数据。</p><p><strong>Java 虚拟机将结束生命周期的几种情况</strong></p><ul><li>执行了 System.exit() 方法</li><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统出现错误而导致 Java 虚拟机进程终止</li></ul><br><h2 id="类加载器的种类和特点" tabindex="-1"><a class="header-anchor" href="#类加载器的种类和特点" aria-hidden="true">#</a> <span id="t2">类加载器的种类和特点</span></h2><p>在上面的加载阶段图中，已经画出了： <code>启动（引导）类加载器</code> 、 <code>扩展类加载器</code> 、 <code>应用类加载器</code> ，还说明了可以 <code>自定义加载器</code> 。</p><p>但是，但是，Java 虚拟机规范只把加载器分为了两种：启动类加载器（C++语言实现的，很特别哦）和自定义类加载器。</p><p>它把派生于 <code>public abstract class ClassLoader</code> 的加载器都归类为了自定义类加载器。</p><p><img src="http://shiva.oss-cn-hangzhou.aliyuncs.com/data/java/类加载器层次结构.png" alt="类加载器层次结构"></p><p>这个结构层次图也被成为 <strong>双亲委派模型</strong> ，具体工作原理后面再讲，先看几个加载器的作用：</p><ol><li><code>启动类加载器</code> : Bootstrap ClassLoader，负责加载存放在 JDK\\jre\\lib(JDK 代表 JDK 的安装目录，下同)下，或被-Xbootclasspath 参数指定的路径中的，并且能被虚拟机识别的类库(如 rt.jar，所有的 java.<em>开头的类均被 Bootstrap ClassLoader 加载)。启动类加载器是无法被 Java 程序直接引用的。</em></li><li><code>扩展类加载器</code> : Extension ClassLoader，该加载器由 <code>sun.misc.Launcher$ExtClassLoader</code> 实现，它负责加载 JDK\\jre\\lib\\ext 目录中，或者由 java.ext.dirs 系统变量指定的路径中的所有类库(如 javax.*开头的类)，开发者可以直接使用扩展类加载器。</li><li><code>应用程序类加载器</code> : Application ClassLoader，该类加载器由 <code>sun.misc.Launcher$AppClassLoader</code> 来实现，它负责加载用户类路径(ClassPath)所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li></ol><p>应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。因为 JVM 自带的 ClassLoader 只是懂得从本地文件系统加载标准的 java class 文件，因此如果编写了自己的 ClassLoader，便可以做到如下几点:</p><ul><li>在执行非置信代码之前，自动验证数字签名。</li><li>动态地创建符合用户特定需要的定制化构建类。</li><li>从特定的场所取得 java class，例如数据库中和网络中。</li></ul><br><h3 id="classloader-体验" tabindex="-1"><a class="header-anchor" href="#classloader-体验" aria-hidden="true">#</a> <span id="t21">ClassLoader 体验</span></h3><p>先做个小实验：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JvmTest1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ClassLoader</span> systemClassLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>systemClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>systemClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>systemClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">JvmTest1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出效果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sun.misc.Launcher$AppClassLoader@58644d46
sun.misc.Launcher$ExtClassLoader@66d3c617
null
sun.misc.Launcher$AppClassLoader@58644d46
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可见我们写的代码，都是默认使用系统类加载器进行加载。</strong></p><p>在 Class 源码中，获取 ClassLoader 是通过 native 方法:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">ClassLoader</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ClassLoader</span> cl <span class="token operator">=</span> <span class="token function">getClassLoader0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">SecurityManager</span> sm <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">checkClassLoaderPermission</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> <span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> cl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">native</span> <span class="token class-name">ClassLoader</span> <span class="token function">getClassLoader0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="类加载器双亲委派机制" tabindex="-1"><a class="header-anchor" href="#类加载器双亲委派机制" aria-hidden="true">#</a> <span id="t22">类加载器双亲委派机制</span></h3>`,35),h=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token keyword">synchronized</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>
         <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
            <span class="token comment">// 首先判断该类型是否已经被加载</span>
            <span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//如果没有被加载，就委托给父类加载或者委派给启动类加载器加载</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                         <span class="token comment">//如果存在父类加载器，就委派给父类加载器加载</span>
                        c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">//如果不存在父类加载器，就检查是否是由启动类加载器加载的类，通过调用本地方法native Class findBootstrapClass(String name)</span>
                        c <span class="token operator">=</span> <span class="token function">findBootstrapClass0</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token comment">// 如果父类加载器和启动类加载器都不能完成加载任务，才调用自身的加载功能</span>
                    c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> c<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>双亲委派优势</strong></p><ul><li>系统类防止内存中出现多份同样的字节码</li><li>保证 Java 程序安全稳定运行</li></ul><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="te">参考文章</span></h2><p><a href="https://www.pdai.tech/md/java/jvm/java-jvm-classload.html" target="_blank">https://www.pdai.tech/md/java/jvm/java-jvm-classload.html</a></p><p><a href="https://www.bilibili.com/video/BV1PJ411n7xZ" target="_blank">https://www.bilibili.com/video/BV1PJ411n7xZ</a></p>`,7);function b(g,y){const t=o("font");return c(),i("div",null,[u,n("blockquote",null,[e(t,{color:"red"},{default:l(()=>[s("`.class` 文件在类加载器的执行过程包括了 **`加载`、`验证` 、`准备` 、`解析` 、`初始化`** 五个阶段。")]),_:1})]),r,n("ul",null,[n("li",null,[k,n("blockquote",null,[e(t,{color:"red"},{default:l(()=>[s("**验证阶段非常重要，这个阶段直接决定了 JVM 是否能承受恶意代码的攻击；这个阶段占用了整个类加载阶段的大量时间。**")]),_:1}),v])])]),m,n("blockquote",null,[n("p",null,[n("strong",null,[e(t,{color:"red"},{default:l(()=>[s("双亲委派模型工作流程为：类加载器收到加载请求时，会首先委派父加载器去加载，逐层向上委派直到父加载器反馈无法完成加载，才由子加载器完成加载。")]),_:1})])])]),h])}const x=p(d,[["render",b],["__file","ClassLoader.html.vue"]]);export{x as default};
