import{_ as p,r as t,o as i,c as l,b as n,d as a,a as e,f as o}from"./app-831ad1c2.js";const c={},r=o(`<h3 id="起因" tabindex="-1"><a class="header-anchor" href="#起因" aria-hidden="true">#</a> 起因</h3><p><em>2022.01.14</em></p><p>用户反馈系统卡，还出现过一次宕机。</p><p>然后我等到一次问题，上服务器一看发现：</p><blockquote><p><strong>CPU 跑满，100%，内存稳定。</strong></p></blockquote><p>首先排除场景问题：</p><ul><li>磁盘空间没有满</li><li>数据库连接正常</li></ul><br><h3 id="问题排查" tabindex="-1"><a class="header-anchor" href="#问题排查" aria-hidden="true">#</a> 问题排查</h3><p><strong>首先看占用 CPU 的进程，确定是不是CPU跑满：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">top</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20220126142132175.png" alt=""></p><p>定位到了哪个服务占用 CPU，进程编号为 16625.</p><br><p><strong>然后看日志文件，检查下有没有报错</strong></p><p>但是没看出什么东西，除了数据库、MQ 连接断开，没有其他有用信息。</p><br><p><strong>再看是哪个线程占用了 CPU 资源：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">top</span> <span class="token parameter variable">-Hp</span> <span class="token number">16625</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20220126144717567.png" alt=""></p><p>可以看到，16627、16628 两个线程占了很高的 CPU.</p><br><p><strong>jstack 检查下进程是不是进入死循环。</strong></p><p>先将10进制 tid，改为 16进制：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token builtin class-name">printf</span> <span class="token string">&quot;%x<span class="token entity" title="\\n">\\n</span>&quot;</span> <span class="token number">16627</span>
 40f3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后打印堆栈信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> jstack <span class="token number">16625</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&#39;0x40f3&#39;</span> <span class="token parameter variable">-C5</span> <span class="token parameter variable">--color</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;GC task thread#0 (ParallelGC)&quot; os_prio=0 tid=0x00007fbdb401e800 nid=0x40f3 runnable 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打印结果没有异常。。如果存在异常会出现类似：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20220126154025205.png" alt=""></p><br><h3 id="继续分析" tabindex="-1"><a class="header-anchor" href="#继续分析" aria-hidden="true">#</a> 继续分析</h3><p>按理说，没有死循环；并且发生 <strong>OutOfMemoryError:java heap space</strong></p><p>那就是某个功能产生了大量计算，创建了大量的对象，导致溢出。</p><blockquote><p>JDK 8 堆区分为：新生代、老年代、元空间（Meta）；元空间用堆外内存，不需要考虑。</p></blockquote><p>因为服务是默认运行，所以</p><blockquote><p><strong>年轻代+老年代 ，默认最大值为 1G</strong>，默认值为电脑物理内存大小 / 4 ，可以用 <code>-Xmx</code> 加大（和 <code>-Xms</code> 一起使用配置大小相同，防止循环扩容释放而浪费性能）。</p><p>**年轻代和老年代默认占比分配为 1 : 2，默认配置为 <code>-XX:NewRatio=2</code> **</p></blockquote><p>所以现在需要定位到是年轻代，还是老年代空间不足。或者奢侈点一起加大。</p><hr><p><strong>jstat 打印</strong></p><p>其次，可以继续监控下 GC，持续打印 GC情况</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jstat <span class="token parameter variable">-gc</span> <span class="token number">16625</span> <span class="token number">5000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20220126162904119.png" alt=""></p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20220126165256484.png" alt=""></p><p>参数说明：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>S0C：第一个幸存区的大小
S1C：第二个幸存区的大小
S0U：第一个幸存区的使用大小
S1U：第二个幸存区的使用大小
EC：伊甸园区的大小
EU：伊甸园区的使用大小
OC：老年代大小
OU：老年代使用大小
MC：方法区大小
MU：方法区使用大小
CCSC<span class="token punctuation">:</span>压缩类空间大小
CCSU<span class="token punctuation">:</span>压缩类空间使用大小
YGC：年轻代垃圾回收次数
YGCT：年轻代垃圾回收消耗时间
FGC：老年代垃圾回收次数
FGCT：老年代垃圾回收消耗时间
GCT：垃圾回收消耗总时间
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><strong>Jmap 打印</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jmap <span class="token parameter variable">-heap</span> <span class="token number">16625</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Attaching to process ID <span class="token number">6970</span>, please wait<span class="token punctuation">..</span>.
Debugger attached successfully.
Server compiler detected.
JVM version is <span class="token number">25.171</span>-b11

using thread-local object allocation.
Parallel GC with <span class="token number">2</span> thread<span class="token punctuation">(</span>s<span class="token punctuation">)</span>

Heap Configuration:
   MinHeapFreeRatio         <span class="token operator">=</span> <span class="token number">0</span>
   MaxHeapFreeRatio         <span class="token operator">=</span> <span class="token number">100</span>
   MaxHeapSize              <span class="token operator">=</span> <span class="token number">2147483648</span> <span class="token punctuation">(</span><span class="token number">2048</span>.0MB<span class="token punctuation">)</span>
   NewSize                  <span class="token operator">=</span> <span class="token number">715653120</span> <span class="token punctuation">(</span><span class="token number">682</span>.5MB<span class="token punctuation">)</span>
   MaxNewSize               <span class="token operator">=</span> <span class="token number">715653120</span> <span class="token punctuation">(</span><span class="token number">682</span>.5MB<span class="token punctuation">)</span>
   OldSize                  <span class="token operator">=</span> <span class="token number">1431830528</span> <span class="token punctuation">(</span><span class="token number">1365</span>.5MB<span class="token punctuation">)</span>
   NewRatio                 <span class="token operator">=</span> <span class="token number">2</span>
   SurvivorRatio            <span class="token operator">=</span> <span class="token number">8</span>
   MetaspaceSize            <span class="token operator">=</span> <span class="token number">21807104</span> <span class="token punctuation">(</span><span class="token number">20</span>.796875MB<span class="token punctuation">)</span>
   CompressedClassSpaceSize <span class="token operator">=</span> <span class="token number">1073741824</span> <span class="token punctuation">(</span><span class="token number">1024</span>.0MB<span class="token punctuation">)</span>
   MaxMetaspaceSize         <span class="token operator">=</span> <span class="token number">17592186044415</span> MB
   G1HeapRegionSize         <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0</span>.0MB<span class="token punctuation">)</span>

Heap Usage:
PS Young Generation
Eden Space:
   capacity <span class="token operator">=</span> <span class="token number">628621312</span> <span class="token punctuation">(</span><span class="token number">599</span>.5MB<span class="token punctuation">)</span>
   used     <span class="token operator">=</span> <span class="token number">177183568</span> <span class="token punctuation">(</span><span class="token number">168</span>.9754180908203MB<span class="token punctuation">)</span>
   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">451437744</span> <span class="token punctuation">(</span><span class="token number">430</span>.5245819091797MB<span class="token punctuation">)</span>
   <span class="token number">28.18605806352299</span>% used
From Space:
   capacity <span class="token operator">=</span> <span class="token number">45088768</span> <span class="token punctuation">(</span><span class="token number">43</span>.0MB<span class="token punctuation">)</span>
   used     <span class="token operator">=</span> <span class="token number">7012960</span> <span class="token punctuation">(</span><span class="token number">6</span>.688079833984375MB<span class="token punctuation">)</span>
   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">38075808</span> <span class="token punctuation">(</span><span class="token number">36</span>.311920166015625MB<span class="token punctuation">)</span>
   <span class="token number">15.553674032521803</span>% used
To Space:
   capacity <span class="token operator">=</span> <span class="token number">41943040</span> <span class="token punctuation">(</span><span class="token number">40</span>.0MB<span class="token punctuation">)</span>
   used     <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0</span>.0MB<span class="token punctuation">)</span>
   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">41943040</span> <span class="token punctuation">(</span><span class="token number">40</span>.0MB<span class="token punctuation">)</span>
   <span class="token number">0.0</span>% used
PS Old Generation
   capacity <span class="token operator">=</span> <span class="token number">1431830528</span> <span class="token punctuation">(</span><span class="token number">1365</span>.5MB<span class="token punctuation">)</span>
   used     <span class="token operator">=</span> <span class="token number">1090675464</span> <span class="token punctuation">(</span><span class="token number">1040</span>.1491775512695MB<span class="token punctuation">)</span>
   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">341155064</span> <span class="token punctuation">(</span><span class="token number">325</span>.35082244873047MB<span class="token punctuation">)</span>
   <span class="token number">76.17350256691832</span>% used

<span class="token number">34220</span> interned Strings occupying <span class="token number">4078864</span> bytes.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>最后就是导出 dump，用 VisualVM 分析。</strong></p></blockquote><br><h3 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h3>`,54),u={href:"https://blog.csdn.net/zouheliang/article/details/80537571",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.pianshen.com/article/94531135796/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.cnblogs.com/enchaolee/p/13626563.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://blog.csdn.net/wjb_2016/article/details/107050834",target:"_blank",rel:"noopener noreferrer"},v={href:"https://segmentfault.com/a/1190000019625967",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.bilibili.com/video/BV125411b72U?from=search&seid=14946171178356872223&spm_id_from=333.337.0.0",target:"_blank",rel:"noopener noreferrer"},h={href:"https://blog.csdn.net/qq_32784303/article/details/105293631",target:"_blank",rel:"noopener noreferrer"};function g(_,f){const s=t("ExternalLinkIcon");return i(),l("div",null,[r,n("ul",null,[n("li",null,[n("a",u,[a("踩坑调优，一次cpu引发的调优_奔跑的蜗牛的专栏-CSDN博客"),e(s)])]),n("li",null,[n("a",d,[a("如何回答“线上CPU100%排查”面试问题 - 程序员大本营 (pianshen.com)"),e(s)])]),n("li",null,[n("a",m,[a("线上服务器的cpu使用达到100%了，如何排查、定位和解决该问题？ - 梦飞翔up - 博客园 (cnblogs.com)"),e(s)])]),n("li",null,[n("a",b,[a("线上机器CPU 100%怎么排查定位解决？_ReStartForTD-CSDN博客"),e(s)])]),n("li",null,[n("a",v,[a("JVM 堆(heap)溢出案例 - SegmentFault 思否"),e(s)])]),n("li",null,[n("a",k,[a("程序CPU占用率飙升，如何定位线程的堆栈信息？_哔哩哔哩_bilibili"),e(s)])]),n("li",null,[n("a",h,[a("jstat -gc pid 查询jvm 状态_浮生若梦l的博客-CSDN博客"),e(s)])])])])}const M=p(c,[["render",g],["__file","线上服务CPU跑满.html.vue"]]);export{M as default};
