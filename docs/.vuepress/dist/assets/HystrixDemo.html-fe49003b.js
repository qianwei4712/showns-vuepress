import{_ as p,r as o,o as c,c as i,b as n,d as s,a as t,f as e}from"./app-831ad1c2.js";const l={},u=e('<div class="catalog"><ul><li><a href="#t0">前言</a></li><li><a href="#t1">雪崩、熔断、降级</a><ul><li><a href="#t11">服务雪崩</a></li><li><a href="#t12">服务熔断</a></li><li><a href="#t13">服务降级</a></li></ul></li><li><a href="#t2">Hystrix 入门使用</a><ul><li><a href="#t21">响应超时、系统出错</a></li><li><a href="#t22">请求超时</a></li><li><a href="#t23">熔断、恢复</a></li><li><a href="#t24">服务宕机</a></li></ul></li><li><a href="#t3">常用注解及详解</a><ul><li><a href="#t31">DefaultProperties</a></li><li><a href="#t32">HystrixCommand</a></li></ul></li><li><a href="#te">参考文章</a></li></ul></div><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> <span id="t0">前言</span></h2><p><em>2021.10.29，spring cloud 以前只零碎用过几个组件，这次系统学一遍</em></p><p>环境：<code>SpringBoot 2.4.2</code> 、<code>SpringCloud 2020.0.1</code> 、<code>SpringCloud Alibaba 2021.1</code>、<code>JDK 8</code>、<code>MYSQL 5.7</code></p><p>这个系列只讲实现，基本不会深入原理。</p><hr>',6),r=n("strong",null,"代码仓库 hystrix-demo 分支",-1),d={href:"https://gitee.com/learning-use-cases/spring-cloud-demo/tree/hystrix-demo/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/Netflix/Hystrix/wiki",target:"_blank",rel:"noopener noreferrer"},m=e(`<p>本文介绍 spring cloud 断路器 Hystrix。<strong>Hystrix 虽然官方已经不更新了</strong>，但是公司有一个维护的项目用了这个。不过以后新项目估计也不用了。</p><ul><li>Hystrix 是一个用于处理分布式系统的 <strong>延迟</strong> 和 <strong>容错</strong> 的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等。</li><li>Hystrix 能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</li></ul><p>其中，觉得最常用的还是下面这个应用场景：</p><blockquote><p>Hystrix 可以在某个服务单元发生故障后，<strong>向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常。</strong></p><p>Hystrix 可以用在每一个服务模块，不过<strong>一般用在客户端，也就是流量入口处做了限制即可</strong>。</p></blockquote><p>在开始代码之前，先介绍概念。</p><br><h2 id="雪崩、熔断、降级" tabindex="-1"><a class="header-anchor" href="#雪崩、熔断、降级" aria-hidden="true">#</a> <span id="t1">雪崩、熔断、降级</span></h2><h3 id="服务雪崩" tabindex="-1"><a class="header-anchor" href="#服务雪崩" aria-hidden="true">#</a> <span id="t11">服务雪崩</span></h3><p>一个服务失败，导致整条链路的服务都失败的情形，我们称之为 <strong>服务雪崩</strong></p><p>例如，下面几个服务：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211024193545369.png" alt="image-20211024193545369"></p><p>两个 <code>Service B</code> 、三个 <code>Service C</code> 进行负载均衡，刚好可以处理请求。</p><ol><li><p>如果发生意外导致 <code>Service C</code> 崩了，例如遇到：<strong>硬件故障、流量激增（异常流量，重试加大流量）、缓存穿透（一般发生在应用重启，所有缓存失效时，以及短时间内大量缓存失效，使请求直击后端服务，造成服务提供者超负荷运行，引起服务不可用）、程序BUG（内存泄漏，JVM 长时间 FullGC）、同步等待等</strong></p></li><li><p>导致 <code>Service B</code> 偶尔调用宕机 <code>Service C</code> 不可用，转而加大其他两个 <code>Service C</code> 压力，最后都不可用</p></li><li><p>最后整条服务调用链路全部崩盘。</p></li></ol><p>应对服务雪崩，各个问题都有对应的方法：</p><ul><li>硬件故障：多机房容灾、异地多活等。</li><li>流量激增：服务自动扩容、流量控制（限流、关闭重试）等。</li><li>缓存穿透：缓存预加载、缓存异步加载等。</li><li>程序BUG：修改程序bug、及时释放资源等。</li><li>同步等待：资源隔离、MQ 解耦、不可用服务调用快速失败等。资源隔离通常指不同服务调用采用不同的线程池；不可用服务调用快速失败一般通过熔断器模式结合超时机制实现。</li></ul><p>仔细观察，其实大多数的雪崩问题起因，都可以通过架构方式解决。但是如果真的出现了服务宕机，需要有可以保证整体系统仍然稳定运行。</p><hr><h3 id="服务熔断" tabindex="-1"><a class="header-anchor" href="#服务熔断" aria-hidden="true">#</a> <span id="t12">服务熔断</span></h3><p>服务熔断是应对雪崩效应的一种微服务链路保护机制。</p><blockquote><p>当调用链路的某个微服务不可用或者响应时间太长时，会进行服务熔断，不再有该节点微服务的调用，快速返回错误的响应信息。当检测到该节点微服务调用响应正常后，恢复调用链路。</p></blockquote><p>这样就可以保证服务故障不进行蔓延，导致雪崩。</p><p>熔断其实是一个框架级的处理，那么这套熔断机制的设计，基本上业内用的是 <code>断路器模式</code> 。状态转换图如下所示：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211024214646296.png" alt="image-20211024214646296"></p><p>详细的配置后续再讲。</p><hr><h3 id="服务降级" tabindex="-1"><a class="header-anchor" href="#服务降级" aria-hidden="true">#</a> <span id="t13">服务降级</span></h3><p>这里先解释熔断和降级的区别：</p><ul><li>服务熔断一般是某个服务（下游服务）故障引起；服务降级一般是从整体负荷考虑。</li><li>管理目标的层次不太一样，熔断其实是一个框架级的处理，每个微服务都需要（无层级之分）；降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）</li><li>实现方式不太一样，服务降级具有代码侵入性(由控制器完成/或自动降级)，熔断一般称为自我熔断。</li></ul><p>有点抽象啊。。。再详细一点。</p><blockquote><p><strong>服务熔断</strong> ：当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，<strong>可以将一些 不重要 或 不紧急 的服务或任务进行服务的 延迟使用 或 暂停使用。</strong></p></blockquote><p>服务降级的主要类型如下：</p><ul><li><strong>超时降级</strong> ：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测恢复情况</li><li><strong>失败次数降级</strong> ：主要是一些不稳定的API，当失败调用次数达到一定阀值自动降级，同样要使用异步机制探测回复情况</li><li><strong>故障降级</strong> ：如要调用的远程服务挂掉了（网络故障、DNS故障、HTTP服务返回错误的状态码和RPC服务抛出异常），则可以直接降级</li><li><strong>限流降级</strong> ：当触发了限流超额时，可以使用暂时屏蔽的方式来进行短暂的屏蔽</li></ul><p>所以，其实可以发现，<strong>服务熔断其实可以试为服务降级的一种</strong>，服务熔断导致服务不可用。</p><p>概念讲完了。。。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/20200723231006.jpg" alt="20200723231006"></p><p>看完服务降级，其实个人觉得，服务降级的场景在一般的公司中没有什么应用场景，至少在我们公司目前是肯定用不到。</p><p>为什么要等到服务降级，既然在代码设计期就能预设到故障场景，为什么不提前解决而等到发生故障再降级。。大佬们的思想还领略不到。。。。</p><br><h2 id="hystrix-入门使用" tabindex="-1"><a class="header-anchor" href="#hystrix-入门使用" aria-hidden="true">#</a> <span id="t2">Hystrix 入门使用</span></h2><p>pom 依赖引入：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动类添加注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableHystrix</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端使用 <code>openfegin</code> 调用时，使用了 <code>hystrix</code> 则需要配置文件开启：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 开启 hystrix</span>
<span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在开始前，先说明测试服务关系：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211030165805761.png" alt="image-20211030165805761"></p><p>Hystrix 测试分为包括：<code>payment 服务超时</code>、<code>payment 宕机</code>、<code>consumer 故障</code></p><br><h3 id="响应超时、系统出错" tabindex="-1"><a class="header-anchor" href="#响应超时、系统出错" aria-hidden="true">#</a> <span id="t21">响应超时、系统出错</span></h3><blockquote><p><strong>异常情况：payment 响应超时或者处理请求出错，这里需要先设置方法处理最长时限，超过了时限则需要有兜底方法处理，做服务降级 fallback</strong></p></blockquote><p>payment 服务 controller 里，测试超时方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;timeoutFallback&quot;</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;3000&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;timeout&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;接到请求，开始处理。。。。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;处理结束，可以返回了。。。。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token class-name">CodeEnum</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">&quot;操作成功，延时5秒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fallbackMethod = &quot;timeoutFallback&quot;</code> 配置了对应的 应变计划 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * hystrix fallback方法，超时触发
  */</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">timeoutFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token class-name">CodeEnum</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">&quot;调用超时，触发 hystrix fallback 方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接用 postman 调用 payment 超时方法：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211030220404202.png" alt="image-20211030220404202"></p><hr><p>将延时 5 秒方法稍作修改，改为系统处理出错，结果不变。</p><blockquote><p>表示默认 <code>@HystrixCommand</code> 注解，可以处理自行捕捉 <code>excepition</code> ，返回 <code>fallback</code> 方法</p></blockquote><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211030220541693.png" alt="image-20211030220541693"></p><br><h3 id="请求超时" tabindex="-1"><a class="header-anchor" href="#请求超时" aria-hidden="true">#</a> <span id="t22">请求超时</span></h3><blockquote><p><strong>异常情况：consumer 设定了请求最长等待时间，服务端处理超时，立刻调用 fallback 方法，不再继续等待</strong></p></blockquote><p><em>调用出错也和上面一样，哪个服务出错就用哪个 fallback.</em></p><p>consumer 客户端调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;timeoutFallback&quot;</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;1000&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;timeout&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PaymentDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> paymentServiceFegin<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样准备 fallback 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PaymentDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">timeoutFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PaymentDTO</span><span class="token punctuation">&gt;</span></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token class-name">CodeEnum</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">&quot;consumer 请求超时或错误，触发 hystrix fallback 方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端等待 1 秒、服务端最长处理时间 3 秒、方法线程等待 5 秒，实际调用结果：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211030225748870.png" alt="image-20211030225748870"></p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211030225849797.png" alt="image-20211030225849797"></p><p>可以发现：</p><blockquote><p><strong>客户端等待 1秒后停止继续调用，并且服务端也不继续执行代码，并没有完整执行方法内代码</strong></p></blockquote><br><h3 id="熔断、恢复" tabindex="-1"><a class="header-anchor" href="#熔断、恢复" aria-hidden="true">#</a> <span id="t23">熔断、恢复</span></h3><blockquote><p><strong>异常情况：服务调用出错频率过高，则触发熔断，立刻调用 fallback 方法，过一段时间自动恢复。</strong></p></blockquote><p>payment 准备熔断方法：<code>20秒内，如果请求次数超过 10次、或者失败率达到 60%，则触发断路器</code></p><p>代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;defaultFallback&quot;</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token comment">// 是否开启断路器</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;circuitBreaker.enabled&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">// 请求次数</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;circuitBreaker.requestVolumeThreshold&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">// 时间窗口期</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;circuitBreaker.sleepWindowInMilliseconds&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;20000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">// 跳闸失败率</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;circuitBreaker.errorThresholdPercentage&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;60&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;getById&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token class-name">CodeEnum</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">&quot;查询成功，参数：&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;抛出已知异常，通过 fallback 返回&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备 fallback 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">defaultFallback</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token class-name">CodeEnum</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">&quot;payment 服务触发熔断&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里说明下，<strong>fallback 方法参数要与 HystrixCommand注解方法一致</strong>，不然会找不到。</p><p>开始测试，首先 jmeter 1秒内请求20次，并且是异常请求：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211031132545320.png" alt="image-20211031132545320"></p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211031132612486.png" alt="image-20211031132612486"></p><p>立刻使用 postman 进行正常请求：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211031132652113.png" alt="image-20211031132652113"></p><p>过个 5 秒再请求一次：</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211031132722927.png" alt="image-20211031132722927"></p><p>更精确的测试就不做了，反正就这么个情况。</p><p>其他说明：</p><ul><li>熔断器内部有个 平均故障处理时间，达到该时间则进入半熔断状态。</li><li><strong>熔断器只能加在服务端，不能写在客户端。</strong></li></ul><br><h3 id="服务宕机" tabindex="-1"><a class="header-anchor" href="#服务宕机" aria-hidden="true">#</a> <span id="t24">服务宕机</span></h3><p>现在引入 consumer ，通过 openFegin 进行调用，若 payment 整个服务停了。</p><p>其实什么都不需要做，这个就相当于调用出错，一行代码不改，最后调用了客户端的 fallback 方法。</p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211031135040408.png" alt="image-20211031135040408"></p><p><img src="https://shiva.oss-cn-hangzhou.aliyuncs.com/picture-master/images/image-20211031135049761.png" alt="image-20211031135049761"></p><br><h2 id="常用注解及详解" tabindex="-1"><a class="header-anchor" href="#常用注解及详解" aria-hidden="true">#</a> <span id="t3">常用注解及详解</span></h2><h3 id="defaultproperties" tabindex="-1"><a class="header-anchor" href="#defaultproperties" aria-hidden="true">#</a> <span id="t31">DefaultProperties</span></h3><p>可以在 controller 上全局添加默认 fallback 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">&quot;defaultFallback&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/order&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token keyword">extends</span> <span class="token class-name">BaseController</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;1000&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;timeout&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PaymentDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> paymentServiceFegin<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在父类上面统一方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseController</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PaymentDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">defaultFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PaymentDTO</span><span class="token punctuation">&gt;</span></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token class-name">CodeEnum</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">&quot;consumer 请求超时或错误，触发 defaultFallback 方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了特殊需要指定的方法，其他就能全局配置。</p><br><h3 id="hystrixcommand" tabindex="-1"><a class="header-anchor" href="#hystrixcommand" aria-hidden="true">#</a> <span id="t32">HystrixCommand</span></h3><p><strong>commandKey</strong></p><p>配置全局唯一标识服务的名称，比如，库存系统有一个获取库存服务，那么就可以为这个服务起一个名字来唯一识别该服务。</p><p>如果不配置，则默认是 @HystrixCommand 注解修饰的函数的函数名。</p><br><p><strong>groupKey</strong></p><p>一个比较重要的注解，配置全局唯一标识服务分组的名称。</p><p>比如，库存系统就是一个服务分组。通过设置分组，Hystrix会根据组来组织和统计命令的告、仪表盘等信息。</p><p>Hystrix命令默认的线程划分也是根据命令组来实现。</p><p>默认情况下，Hystrix会让相同组名的命令使用同一个线程池，所以我们需要在创建Hystrix命令时为其指定命令组来实现默认的线程池划分。</p><p>此外，Hystrix还提供了通过设置threadPoolKey来对线程池进行设置。建议最好设置该参数，使用threadPoolKey来控制线程池组。</p><br><p><strong>fallbackMethod</strong></p><p>@HystrixCommand 注解修饰的函数的回调函数</p><p>@HystrixCommand 修饰的函数必须和这个回调函数定义在同一个类中，因为定义在了同一个类中。</p><br><p><strong>commandProperties</strong></p><p>常用的也就是测试代码中那几个，对照表看大佬们的总结：</p><blockquote><p>Command属性主要用来控制HystrixCommand命令的行为，它主要分下面的类别：</p><p>1、Execution：用来控制HystrixCommand.run()的执行 execution.isolation.strategy：该属性用来设置HystrixCommand.run()执行的隔离策略。默认为THREAD。 execution.isolation.thread.timeoutInMilliseconds：该属性用来配置HystrixCommand执行的超时时间，单位为毫秒。 execution.timeout.enabled：该属性用来配置HystrixCommand.run()的执行是否启用超时时间。默认为true。 execution.isolation.thread.interruptOnTimeout：该属性用来配置当HystrixCommand.run()执行超时的时候是否要它中断。 execution.isolation.thread.interruptOnCancel：该属性用来配置当HystrixCommand.run()执行取消时是否要它中断。 execution.isolation.semaphore.maxConcurrentRequests：当HystrixCommand命令的隔离策略使用信号量时，该属性用来配置信号量的大小。当最大并发请求达到该设置值时，后续的请求将被拒绝。</p><p>2、Fallback：用来控制HystrixCommand.getFallback()的执行 fallback.isolation.semaphore.maxConcurrentRequests：该属性用来设置从调用线程中允许HystrixCommand.getFallback()方法执行的最大并发请求数。当达到最大并发请求时，后续的请求将会被拒绝并抛出异常。 fallback.enabled：该属性用来设置服务降级策略是否启用，默认是true。如果设置为false，当请求失败或者拒绝发生时，将不会调用HystrixCommand.getFallback()来执行服务降级逻辑。</p><p>3、Circuit Breaker：用来控制HystrixCircuitBreaker的行为。 circuitBreaker.enabled：确定当服务请求命令失败时，是否使用断路器来跟踪其健康指标和熔断请求。默认为true。 circuitBreaker.requestVolumeThreshold：用来设置在滚动时间窗中，断路器熔断的最小请求数。例如，默认该值为20的时候，如果滚动时间窗（默认10秒）内仅收到19个请求，即使这19个请求都失败了，断路器也不会打开。 circuitBreaker.sleepWindowInMilliseconds：用来设置当断路器打开之后的休眠时间窗。休眠时间窗结束之后，会将断路器设置为“半开”状态，尝试熔断的请求命令，如果依然时候就将断路器继续设置为“打开”状态，如果成功，就设置为“关闭”状态。 circuitBreaker.errorThresholdPercentage：该属性用来设置断路器打开的错误百分比条件。默认值为50，表示在滚动时间窗中，在请求值超过requestVolumeThreshold阈值的前提下，如果错误请求数百分比超过50，就把断路器设置为“打开”状态，否则就设置为“关闭”状态。 circuitBreaker.forceOpen：该属性默认为false。如果该属性设置为true，断路器将强制进入“打开”状态，它会拒绝所有请求。该属性优于forceClosed属性。 circuitBreaker.forceClosed：该属性默认为false。如果该属性设置为true，断路器强制进入“关闭”状态，它会接收所有请求。如果forceOpen属性为true，该属性不生效。</p><p>4、Metrics：该属性与HystrixCommand和HystrixObservableCommand执行中捕获的指标相关。 metrics.rollingStats.timeInMilliseconds：该属性用来设置滚动时间窗的长度，单位为毫秒。该时间用于断路器判断健康度时需要收集信息的持续时间。断路器在收集指标信息时会根据设置的时间窗长度拆分成多个桶来累计各度量值，每个桶记录了一段时间的采集指标。例如，当为默认值10000毫秒时，断路器默认将其分成10个桶，每个桶记录1000毫秒内的指标信息。 metrics.rollingStats.numBuckets：用来设置滚动时间窗统计指标信息时划分“桶”的数量。默认值为10。 metrics.rollingPercentile.enabled：用来设置对命令执行延迟是否使用百分位数来跟踪和计算。默认为true，如果设置为false，那么所有的概要统计都将返回-1。 metrics.rollingPercentile.timeInMilliseconds：用来设置百分位统计的滚动窗口的持续时间，单位为毫秒。 metrics.rollingPercentile.numBuckets：用来设置百分位统计滚动窗口中使用桶的数量。 metrics.rollingPercentile.bucketSize：用来设置每个“桶”中保留的最大执行数。 metrics.healthSnapshot.intervalInMilliseconds：用来设置采集影响断路器状态的健康快照的间隔等待时间。</p><p>5、Request Context：涉及HystrixCommand使用HystrixRequestContext的设置。 requestCache.enabled：用来配置是否开启请求缓存。 requestLog.enabled：用来设置HystrixCommand的执行和事件是否打印到日志的HystrixRequestLog中。</p></blockquote><br><p><strong>ignoreExceptions</strong></p><p>调用服务时，除了HystrixBadRequestException之外，</p><p>其他@HystrixCommand修饰的函数抛出的异常均会被Hystrix认为命令执行失败而触发服务降级的处理逻辑（调用fallbackMethod指定的回调函数），</p><p>所以当需要在命令执行中抛出不触发降级的异常时来使用它，通过这个参数指定，哪些异常抛出时不触发降级（不去调用fallbackMethod），而是将异常向上抛出。</p><br><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> <span id="te">参考文章</span></h2>`,134),g={href:"https://www.bilibili.com/video/BV18E411x7eT?p=47&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.cnblogs.com/rjzheng/p/10340176.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://blog.csdn.net/loushuiyifan/article/details/82702522",target:"_blank",rel:"noopener noreferrer"},b={href:"https://segmentfault.com/a/1190000005988895",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.csdn.net/zero__007/article/details/90732554",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/sheinenggaosuwo/article/details/86594951",target:"_blank",rel:"noopener noreferrer"},x={href:"https://blog.csdn.net/qq_42969135/article/details/109629748",target:"_blank",rel:"noopener noreferrer"},q={href:"https://blog.csdn.net/chengqiuming/article/details/81568234",target:"_blank",rel:"noopener noreferrer"},C={href:"https://blog.csdn.net/weixin_42827159/article/details/115321296",target:"_blank",rel:"noopener noreferrer"},_={href:"https://blog.csdn.net/acmman/article/details/100595666",target:"_blank",rel:"noopener noreferrer"};function H(w,R){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[r,s(" ："),n("a",d,[s("Learning Use Cases/Spring Cloud Demo - Gitee.com"),t(a)])]),n("p",null,[s("官网文档："),n("a",k,[s("Home · Netflix/Hystrix Wiki (github.com)"),t(a)])]),m,n("p",null,[n("a",g,[s("尚硅谷SpringCloud框架开发教程(SpringCloudAlibaba微服务分布式架构丨Spring Cloud)_哔哩哔哩_bilibili"),t(a)])]),n("p",null,[n("a",v,[s("【原创】谈谈服务雪崩、降级与熔断 - 孤独烟 - 博客园 (cnblogs.com)"),t(a)])]),n("p",null,[n("a",h,[s("Hystrix原理与实战_漏水亦凡的专栏-CSDN博客_hystrix"),t(a)])]),n("p",null,[n("a",b,[s("防雪崩利器：熔断器 Hystrix 的原理与使用 - SegmentFault 思否"),t(a)])]),n("p",null,[n("a",y,[s("服务降级和服务熔断_ZERO-CSDN博客_服务熔断和服务降级的区别"),t(a)])]),n("p",null,[n("a",f,[s("什么是服务降级和熔断（网络白话摘要）_sheinenggaosuwo的专栏-CSDN博客_服务降级和服务熔断的区别"),t(a)])]),n("p",null,[n("a",x,[s("@EnableHystrix注解与@EnableCircuitBreaker的区别_是我的温柔啊-CSDN博客_enablecircuitbreaker"),t(a)])]),n("p",null,[n("a",q,[s("Hystrix的Command属性解读_实践求真知-CSDN博客_hystrixcommand"),t(a)])]),n("p",null,[n("a",C,[s("HystrixCommand注解使用_高粱的博客-CSDN博客"),t(a)])]),n("p",null,[n("a",_,[s("【Spring Cloud总结】18.Hystrix的commandProperties配置_程序猿之洞-CSDN博客"),t(a)])])])}const S=p(l,[["render",H],["__file","HystrixDemo.html.vue"]]);export{S as default};
